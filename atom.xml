<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>青山后小塘</title>
  
  <subtitle>人生如逆旅，我亦是行人</subtitle>
  <link href="https://zivmax.top/atom.xml" rel="self"/>
  
  <link href="https://zivmax.top/"/>
  <updated>2024-04-08T07:25:15.570Z</updated>
  <id>https://zivmax.top/</id>
  
  <author>
    <name>Zivmax</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CS110 Note [4]</title>
    <link href="https://zivmax.top/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/04/08/CS110/CS110-Note-4/"/>
    <id>https://zivmax.top/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/04/08/CS110/CS110-Note-4/</id>
    <published>2024-04-08T08:32:40.000Z</published>
    <updated>2024-04-08T07:25:15.570Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="The-Basics-of-Logic-Design">The Basics of Logic Design</h1>]]></content>
    
    
    <summary type="html">The Basics of Logic Design</summary>
    
    
    
    <category term="学习" scheme="https://zivmax.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机科学" scheme="https://zivmax.top/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
    <category term="CS110" scheme="https://zivmax.top/tags/CS110/"/>
    
    <category term="上科大" scheme="https://zivmax.top/tags/%E4%B8%8A%E7%A7%91%E5%A4%A7/"/>
    
    <category term="计算机体系架构" scheme="https://zivmax.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/"/>
    
    <category term="笔记" scheme="https://zivmax.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Unfinished" scheme="https://zivmax.top/tags/Unfinished/"/>
    
  </entry>
  
  <entry>
    <title>DATA100 Note [4]</title>
    <link href="https://zivmax.top/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/04/03/DATA100/DATA100-Note-4/"/>
    <id>https://zivmax.top/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/04/03/DATA100/DATA100-Note-4/</id>
    <published>2024-04-03T10:31:28.000Z</published>
    <updated>2024-04-07T05:30:54.735Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Visualization"><strong>Visualization</strong></h1><p>Encoding Information into Intuition</p><h1 id="1-Goals-of-Visualization">1. Goals of Visualization</h1><p><img src="https://ds100.org/course-notes/visualization_2/visualization_2_files/figure-html/cell-19-output-1.png" alt></p><ul><li><p>To broaden your understanding of the data.</p></li><li><p>To communicate results/conclusions to others.</p></li></ul><p>Altogether, these goals emphasize the fact that <em><strong>visualizations aren’t a matter of making “pretty” pictures</strong></em>.</p><h1 id="2-An-Overview-of-Distributions">2. An Overview of Distributions</h1><p><img src="https://ds100.org/course-notes/visualization_1/visualization_1_files/figure-html/cell-10-output-1.png" alt></p><ul><li><p>The total frequency of all categories must sum to 100%</p></li><li><p>Total count should sum to the total number of datapoints if we’re using raw counts.</p></li></ul><p>Most of the time, we're ploting the distribution of the data.</p><h1 id="3-Variable-Types-Inform-Plot-Choice">3. Variable Types Inform Plot Choice</h1><p>Recall the types of the variable:</p><p><img src="https://ds100.org/course-notes/visualization_1/images/variable_types_vis_1.png" alt></p><h2 id="3-1-Qualitative-Variables-Bar-Plots">3.1 Qualitative Variables: Bar Plots</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns <span class="comment"># seaborn is typically given the alias sns</span></span><br><span class="line">sns.countplot(data = wb, x = <span class="string">&#x27;Continent&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://ds100.org/course-notes/visualization_1/visualization_1_files/figure-html/cell-5-output-1.png" alt=" "></p><h2 id="3-2-Quantitative-Variables-Box-Violin-and-Hist">3.2 Quantitative Variables: Box, Violin and Hist</h2><h3 id="Box">Box</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.boxplot(data=wb, y=<span class="string">&#x27;Gross domestic product: % growth : 2016&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://ds100.org/course-notes/visualization_1/visualization_1_files/figure-html/cell-11-output-1.png" alt></p><h3 id="Violin">Violin</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.violinplot(data=wb, y=<span class="string">&#x27;Gross domestic product: % growth : 2016&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://ds100.org/course-notes/visualization_1/visualization_1_files/figure-html/cell-12-output-1.png" alt></p><h3 id="Histograms">Histograms</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.histplot(data=wb, x=<span class="string">&quot;Gross n...&quot;</span>, stat=<span class="string">&quot;density&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://ds100.org/course-notes/visualization_1/visualization_1_files/figure-html/cell-15-output-1.png" alt></p><h3 id="Overlap">Overlap</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.boxplot(data=wb, x=<span class="string">&quot;Continent&quot;</span>, y=<span class="string">&#x27;Gross n...&#x27;</span>)</span><br><span class="line">sns.histplot(data=wb, x=<span class="string">&quot;Gross n...: 2016&quot;</span>, hue=<span class="string">&quot;Hemisphere&quot;</span>, stat=<span class="string">&quot;density&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://ds100.org/course-notes/visualization_1/visualization_1_files/figure-html/cell-13-output-1.png" alt></p><p><img src="https://ds100.org/course-notes/visualization_1/visualization_1_files/figure-html/cell-17-output-1.png" alt></p><h1 id="4-Evaluating-Histograms">4. Evaluating Histograms</h1><ul><li><p>Skewness and Tails</p><ul><li>Skewed left vs skewed right</li><li>Left tail vs right tail</li></ul></li><li><p>Outliers</p><ul><li>Using percentiles</li></ul></li><li><p>Modes</p><ul><li>Most commonly occuring data</li></ul></li></ul><h2 id="4-1-Skewness-and-Tails">4.1 Skewness and Tails</h2><h3 id="Left-Skew-and-Right-Tail">Left Skew and Right Tail</h3><p><img src="https://ds100.org/course-notes/visualization_1/visualization_1_files/figure-html/cell-19-output-2.png" alt></p><h3 id="Right-Skew-and-Left-Tail">Right Skew and Left Tail</h3><p><img src="https://ds100.org/course-notes/visualization_1/visualization_1_files/figure-html/cell-20-output-2.png" alt></p><h2 id="4-2-Outliers">4.2 Outliers</h2><p>Loosely speaking, an outlier is defined as a data point that <em><strong>lies an abnormally large distance</strong></em> away from other values.</p><h2 id="4-3-Modes">4.3 Modes</h2><p><em>We describe a “mode” of a histogram as a peak in the distribution.</em></p><p><img src="https://ds100.org/course-notes/visualization_1/visualization_1_files/figure-html/cell-22-output-1.png" alt></p><h2 id="4-4-Challenge">4.4 Challenge</h2><p><em>In this image, it's hard to observe. It is these ambiguities that motivate us to consider using <strong>Kernel Density Estimation (KDE)</strong></em></p><p><img src="https://ds100.org/course-notes/visualization_1/visualization_1_files/figure-html/cell-23-output-1.png" alt></p><h1 id="5-KDE-Kernel-Density-Estimation">5. KDE (Kernel Density Estimation)</h1><ul><li><p><em>A kernel density estimate (KDE) is a smooth, continuous function that <strong>approximates a curve</strong>.</em></p></li><li><p><em>More formally, a KDE attempts to <strong>approximate the underlying probability distribution</strong> from which our dataset was drawn.</em></p></li></ul><p><img src="https://ds100.org/course-notes/visualization_2/visualization_2_files/figure-html/cell-3-output-2.png" alt=" "></p><h2 id="5-1-Constructing-KDE">5.1 Constructing KDE</h2><ol><li><p>Place a kernel at each datapoint.</p></li><li><p>Normalize the kernels to have a total area of 1 (across all kernels).</p></li><li><p>Sum the normalized kernels.</p></li></ol><p>Assume we want KDE this dataset: <strong>[ 2.2, 2.8, 3.7, 5.3, 5.7 ]</strong></p><p><img src="https://ds100.org/course-notes/visualization_2/visualization_2_files/figure-html/cell-4-output-1.png" alt></p><p><em><strong>Step 1: Place a kernel at each datapoint.</strong></em></p><p><img src="https://ds100.org/course-notes/visualization_2/visualization_2_files/figure-html/cell-6-output-1.png" alt></p><p><img src="https://ds100.org/course-notes/visualization_2/visualization_2_files/figure-html/cell-7-output-1.png" alt></p><p><em><strong>Step 2: Normalize the kernels to have a total area of 1.</strong></em></p><p><img src="https://ds100.org/course-notes/visualization_2/visualization_2_files/figure-html/cell-8-output-1.png" alt></p><p><em><strong>Step 3: Sum the normalized kernels.</strong></em></p><p><img src="https://ds100.org/course-notes/visualization_2/visualization_2_files/figure-html/cell-9-output-1.png" alt></p><h2 id="5-2-Kernel-Functions-and-Bandwidths">5.2 Kernel Functions and Bandwidths</h2><p>A general “KDE formula” function is given bello</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>f</mi><mi>α</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>K</mi><mi>α</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f_{\alpha}(x) = \frac{1}{n} \sum_{i=1}^{n} K_{\alpha}(x, x_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>, which is pretty much like the <em><strong>convolution</strong></em>.</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>f</mi><mi>α</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>K</mi><mi>α</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f_{\alpha}(x) = \frac{1}{n} \sum_{i=1}^{n} K_{\alpha}(x, x_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><ol><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mi>α</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">K_{\alpha}(x - x_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> is the kernel centered on the observation <code>i</code>.</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> is the number of observed datapoints that we have.</p></li><li><p>Each <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>∈</mo><mo stretchy="false">{</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">x_i \in \{x_1, x_2,\dots, x_n \}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span> represents an observed datapoint.</p></li></ol><p><em>The most common kernel is the <strong>Gaussian kernel</strong>.</em></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>K</mi><mi>α</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><msqrt><mrow><mn>2</mn><mi>π</mi><msup><mi>α</mi><mn>2</mn></msup></mrow></msqrt></mfrac><msup><mi>e</mi><mrow><mo>−</mo><mfrac><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><msub><mi>x</mi><mi>i</mi></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><mn>2</mn></mfrac></mrow></msup></mrow><annotation encoding="application/x-tex">K_{\alpha}(x, x_i) = \frac{1}{\sqrt{2\pi\alpha^2}} e^{-\frac{(x-x_i)^2}{2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2514em;vertical-align:-0.93em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.1549em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9551em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.9151em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.0849em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.321em;"><span style="top:-3.413em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2972em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.5483em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3448em;margin-left:0em;margin-right:0.1em;"><span class="pstrut" style="height:2.6595em;"></span><span class="mord mathnormal mtight">i</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3147em;"><span></span></span></span></span></span></span><span class="mclose mtight"><span class="mclose mtight">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0484em;"><span style="top:-3.0484em;margin-right:0.1em;"><span class="pstrut" style="height:2.6444em;"></span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>K</mi><mi>α</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><msqrt><mrow><mn>2</mn><mi>π</mi><msup><mi>α</mi><mn>2</mn></msup></mrow></msqrt></mfrac><msup><mi>e</mi><mrow><mo>−</mo><mfrac><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><msub><mi>x</mi><mi>i</mi></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><mn>2</mn></mfrac></mrow></msup></mrow><annotation encoding="application/x-tex">K_{\alpha}(x, x_i) = \frac{1}{\sqrt{2\pi\alpha^2}} e^{-\frac{(x-x_i)^2}{2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2514em;vertical-align:-0.93em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.1549em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9551em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.9151em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.0849em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.321em;"><span style="top:-3.413em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2972em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.5483em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3448em;margin-left:0em;margin-right:0.1em;"><span class="pstrut" style="height:2.6595em;"></span><span class="mord mathnormal mtight">i</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3147em;"><span></span></span></span></span></span></span><span class="mclose mtight"><span class="mclose mtight">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0484em;"><span style="top:-3.0484em;margin-right:0.1em;"><span class="pstrut" style="height:2.6444em;"></span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ol><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span> is the bandwidth of the kernel, which is the <em><strong>standard deviation</strong></em>.</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> is the center of the kernel, which is the <em><strong>mean</strong></em>.</p></li></ol><p><em><strong>Gaussian kernel KDE with bandwiths: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0.1</mn></mrow><annotation encoding="application/x-tex">0.1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.1</span></span></span></span>; <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1.0</mn></mrow><annotation encoding="application/x-tex">1.0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1.0</span></span></span></span>; <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2.0</mn></mrow><annotation encoding="application/x-tex">2.0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2.0</span></span></span></span>; <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10.0</mn></mrow><annotation encoding="application/x-tex">10.0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10.0</span></span></span></span>:</strong></em></p><p><img src="https://ds100.org/course-notes/visualization_2/images/gaussian_0.1.png" alt></p><p><img src="https://ds100.org/course-notes/visualization_2/images/gaussian_1.png" alt></p><p><img src="https://ds100.org/course-notes/visualization_2/images/gaussian_2.png" alt></p><p><img src="https://ds100.org/course-notes/visualization_2/images/gaussian_10.png" alt></p><h1 id="6-Multi-Quantitative-Variables">6. Multi Quantitative Variables</h1><ul><li><p>Up until now, we’ve discussed how to visualize single-variable distributions.</p></li><li><p>Going beyond this, we want to understand <strong>the relationship between pairs of numerical variables</strong>.</p></li></ul><h2 id="6-1-Scatter-Plots">6.1 Scatter Plots</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(wb[<span class="string">&quot;per c...&quot;</span>], wb[<span class="string">&#x27;Adult l...&#x27;</span>])</span><br></pre></td></tr></table></figure><p><img src="https://ds100.org/course-notes/visualization_2/visualization_2_files/figure-html/cell-14-output-1.png" alt></p><h2 id="6-1-Scatter-Plots-2">6.1 Scatter Plots</h2><p><em>But this seems overplotting...</em></p><p><img src="https://ds100.org/course-notes/visualization_2/visualization_2_files/figure-html/cell-14-output-1.png" alt></p><h2 id="6-1-Scatter-Plots-3">6.1 Scatter Plots</h2><p>We can <em><strong>shrink the marks</strong></em> and <em><strong>add random shifting noise</strong></em>.</p><p><img src="https://ds100.org/course-notes/visualization_2/visualization_2_files/figure-html/cell-16-output-1.png" alt></p><h2 id="6-2-Linear-Plots">6.2 Linear Plots</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.lmplot(data = wb, x = <span class="string">&quot;per c...&quot;</span>, y = <span class="string">&quot;Adult l...&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://ds100.org/course-notes/visualization_2/visualization_2_files/figure-html/cell-17-output-2.png" alt=" "></p><h2 id="6-3-Joint-Plots">6.3 Joint Plots</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.jointplot(data = wb, x = <span class="string">&quot;per c...&quot;</span>, y = <span class="string">&quot;Adult l...&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://ds100.org/course-notes/visualization_2/visualization_2_files/figure-html/cell-18-output-1.png" alt=" "></p><h2 id="6-4-Hex-Plots">6.4 Hex Plots</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.jointplot(data = wb, x = <span class="string">&quot;per c...&quot;</span>, y = <span class="string">&quot;Adult l...&quot;</span>, kind = <span class="string">&quot;hex&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://ds100.org/course-notes/visualization_2/visualization_2_files/figure-html/cell-19-output-1.png" alt=" "></p><h2 id="6-4-Hex-Plots-2">6.4 Hex Plots</h2><p>Hex plots can be thought of as <em><strong>two-dimensional histograms</strong></em> !</p><p><img src="https://ds100.org/course-notes/visualization_2/visualization_2_files/figure-html/cell-19-output-1.png" alt=" "></p><h2 id="6-5-Contour-Plots">6.5 Contour Plots</h2><p>Contour plots can be thought of as <em><strong>two-dimensional KDE</strong></em> !</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.kdeplot(data = wb, x = <span class="string">&quot;per c...&quot;</span>, y = <span class="string">&quot;Adult l...&quot;</span>, fill = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><img src="https://ds100.org/course-notes/visualization_2/visualization_2_files/figure-html/cell-20-output-1.png" alt></p><h1 id="7-Transformation">7. Transformation</h1><p>As said before, we want to <em><strong>reveal the relationships</strong></em>.</p><p>However, relying on plotting directly alone is limiting, <em><strong>not all plots show association</strong></em>.</p><p><em>Consider the following plot.</em></p><p><img src="https://ds100.org/course-notes/visualization_2/visualization_2_files/figure-html/cell-21-output-1.png" alt></p><p>We can try applying transformation !</p><p><img src="https://ds100.org/course-notes/visualization_2/images/linearize.png" alt></p><h2 id="7-1-Making-Transformation">7.1 Making Transformation</h2><p><em>Step 1: Observe the plot</em></p><p><img src="https://ds100.org/course-notes/visualization_2/images/horizontal.png" alt=" "></p><p><em>Step 2: Transform on X axis</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(np.log(df[<span class="string">&quot;inc&quot;</span>]), df[<span class="string">&quot;lit&quot;</span>])</span><br></pre></td></tr></table></figure><p><img src="https://ds100.org/course-notes/visualization_2/visualization_2_files/figure-html/cell-22-output-1.png" alt></p><p><em>Step 3: Transform on Y axis</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(np.log(df[<span class="string">&quot;inc&quot;</span>]), df[<span class="string">&quot;lit&quot;</span>]**<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p><img src="https://ds100.org/course-notes/visualization_2/visualization_2_files/figure-html/cell-23-output-1.png" alt></p><p><em>Step 4: Linear regression</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression <span class="comment"># Discuss in the future</span></span><br></pre></td></tr></table></figure><p><img src="https://ds100.org/course-notes/visualization_2/visualization_2_files/figure-html/cell-24-output-2.png" alt></p><h2 id="7-2-Inference-reversely">7.2 Inference reversely</h2><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>y</mi><mn>4</mn></msup><mo>=</mo><mi>m</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>x</mi><mo stretchy="false">)</mo><mo>+</mo><mi>b</mi><mspace width="1em"><mo>→</mo><mspace width="1em"><mi>y</mi><mo>=</mo><mo stretchy="false">[</mo><mi>m</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>x</mi><mo stretchy="false">)</mo><mo>+</mo><mi>b</mi><msup><mo stretchy="false">]</mo><mfrac><mn>1</mn><mn>4</mn></mfrac></msup></mspace></mspace></mrow><annotation encoding="application/x-tex">y^4 = m(\log{x}) + b \quad \to \quad y = [m(\log{x}) + b]^{\frac{1}{4}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0585em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">m</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.254em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.004em;"><span style="top:-3.413em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><img src="https://ds100.org/course-notes/visualization_2/visualization_2_files/figure-html/cell-24-output-2.png" alt></p><p><img src="https://ds100.org/course-notes/visualization_2/visualization_2_files/figure-html/cell-25-output-1.png" alt></p><h2 id="7-3-Tukey-Mosteller-Bulge-Diagram">7.3 Tukey-Mosteller Bulge Diagram</h2><p>This diagram is a good guide when determining possible transformations.</p><p><img src="https://ds100.org/course-notes/visualization_2/images/tukey_mosteller.png" alt></p><p><img src="https://ds100.org/course-notes/visualization_2/images/bulge.png" alt></p><h1 id="8-Visualization-Theory">8. Visualization Theory</h1><p>Remember, we had two goals for visualizing data. <em>Visualization Theory</em> is particularly important in:</p><ul><li>Helping us understand the data and results,</li><li>Communicating our results and conclusions with others.</li></ul><h2 id="8-1-Information-Channels">8.1 Information Channels</h2><p>Visualizations are able to convey information through various encodings.</p><p><em>Except things in the image, <strong>marks' relative position</strong> is also a important channel.</em></p><p><img src="https://ds100.org/course-notes/visualization_2/images/markings_viz.png" alt="bg left:40%"></p><p>Each visulization should <strong>at least contains one accurate channel</strong>.</p><p><em>Thus don't use pie chart any more!</em></p><h2 id="8-2-What-is-Good-Encoding">8.2 What is Good Encoding?</h2><ul><li><em>No wrong information encoded</em><ul><li>Example: Are abortion and cancer related?</li></ul></li></ul><p><img src="https://ds100.org/course-notes/visualization_2/images/wrong_scale_viz.png" alt="❌"></p><p><img src="https://ds100.org/course-notes/visualization_2/images/good_viz_scale_1.png" alt="✔️"></p><ul><li><em>No redundent infomation encoded</em><ul><li>Example: How cases changed during Mar, 21,2020 to May, 6, 2020?</li></ul></li></ul><p><img src="https://ds100.org/course-notes/visualization_2/images/unrevealed_viz.png" alt="❌"></p><p><img src="https://ds100.org/course-notes/visualization_2/images/revealed_viz.png" alt="✔️"></p><ul><li><em>Encode information linearly</em><ul><li>Example: Shows the numerical strength distribution in 2D.</li></ul></li></ul><p><img src="https://ds100.org/course-notes/visualization_2/images/jet_colormap.png" alt="❌"></p><p><img src="https://ds100.org/course-notes/visualization_2/images/viridis_colormap.png" alt="✔️"></p><ul><li><em>Encode information linearly</em><ul><li>Larger number show be mapped to higher gray scale color.</li></ul></li></ul><p><img src="https://ds100.org/course-notes/visualization_2/images/jet_perceptually_uniform.png" alt="❌"></p><p><img src="https://ds100.org/course-notes/visualization_2/images/viridis_perceptually_uniform.png" alt="✔️"></p><h1 id="9-Summary">9. Summary</h1><p>Good visualizations are always made by <em><strong>Intuitive  and Empathetic Person</strong></em></p>]]></content>
    
    
    <summary type="html">Introduction to Visualization.</summary>
    
    
    
    <category term="学习" scheme="https://zivmax.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机科学" scheme="https://zivmax.top/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
    <category term="笔记" scheme="https://zivmax.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Unfinished" scheme="https://zivmax.top/tags/Unfinished/"/>
    
    <category term="DATA100" scheme="https://zivmax.top/tags/DATA100/"/>
    
    <category term="数据科学" scheme="https://zivmax.top/tags/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>CS110 Project 1.2</title>
    <link href="https://zivmax.top/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/04/02/CS110/CS110-Project-1-2/"/>
    <id>https://zivmax.top/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/04/02/CS110/CS110-Project-1-2/</id>
    <published>2024-04-02T03:26:20.000Z</published>
    <updated>2024-04-08T11:38:29.615Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Project-1-2-2D-Convolution-in-C-and-RISC-V-Individual-Project">Project 1.2: 2D-Convolution in C and RISC-V (Individual Project)</h1><p><a href="https://robotics.shanghaitech.edu.cn/courses/ca/22s/">Computer Architecture I</a> <a href="http://www.shanghaitech.edu.cn/">ShanghaiTech University</a></p><a href="/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/03/26/CS110/CS110-Project-1-1/" title="CS110 Project 1.1">Project 1.1</a> Project 1.2<h2 id="IMPORTANT-INFO-PLEASE-READ">IMPORTANT INFO - PLEASE READ</h2><p>The projects are part of your design project worth 2 credit points. As such they run in parallel to the actual course. So be aware that the due date for project and homework might be very close to each other! Start early and do not procrastinate.</p><h2 id="Introduction">Introduction</h2><p>In project 1.2, you will implement a simple 2D-Convolution algorithm in C and RISC-V and a padded 2D-Convolution in RISC-V. You can get the template code <a href="https://classroom.github.com/a/cQZ__Y51">here</a></p><h2 id="Background">Background</h2><h3 id="2D-Convolution">2D-Convolution</h3><p>2D-Convolution is the convolution applied using two matrices, image and kernel. The progress of applying 2D-Convolution is shown below.</p><p><img src="https://toast-lab.sist.shanghaitech.edu.cn/courses/CS110@ShanghaiTech/Spring-2024/project/p1.2-web/2D-Convolution.gif" alt></p><p>The left most matrix is the image matrix and the middle matrix is the kernel matrix. Each step is a product-and-sum. We need to product the corresponding elements and sum the result up. Or you can refer to the mathematical representation below, where K_w and K_l represents width and length of the kernel matrix, respectively.</p><p><img src="https://toast-lab.sist.shanghaitech.edu.cn/courses/CS110@ShanghaiTech/Spring-2024/project/p1.2-web/convolution-math.png" alt></p><h3 id="Zero-Padding-2D-Convolution">Zero Padding 2D-Convolution</h3><p>As shown in the above animation, the result matrix is not the same size with the image matrix. To make them the same size, we can add a circle of zero around the image matrix, as shown below. Then we can get a same size result matrix. This is called Zero Padding Convolution.</p><p><img src="https://toast-lab.sist.shanghaitech.edu.cn/courses/CS110@ShanghaiTech/Spring-2024/project/p1.2-web/Zero-Padding.gif" alt></p><p>The number of zero to add at right and left of the image matrix is (kernel_length-1)/2. The number of zero to add at top and buttom of the image matrix is (kernel_width-1)/2.</p><h2 id="Implementation">Implementation</h2><h3 id="Part1-2D-Convolution-in-C">Part1: 2D-Convolution in C</h3><p>In part1, you are required to implement a 2D-Convolution using C.</p><h4 id="Input">Input</h4><p>A reference input is already provided in the <code>input.txt</code> file. The first line indicates the length and width of image matrix. The following lines are the image matrix. After the image matrix, there will be the length and width of the kernel matrix, followed by the kernel matrix. Each line will end with a \n</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">5 3</span><br><span class="line">4 -13 -6 -24 11 </span><br><span class="line">12 -22 -13 21 -27 </span><br><span class="line">-21 0 -28 11 -30 </span><br><span class="line">3 2</span><br><span class="line">5 6 4 </span><br><span class="line">-2 9 -3 </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Output">Output</h4><p>You need to output the result matrix. The output format looks like below. There should be a \n at the end of each line and a space after each element (the last element in a line also needs to be followed by a space)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-265 -333 166 </span><br><span class="line">2 -389 198 </span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="Part2-2D-Convolution-in-RISC-V">Part2: 2D-Convolution in RISC-V</h3><p>In part2, you are required to implement a 2D-Convolution using RISC-V. To do mulitiplication in RISC-V, you could use mul rd rs1 rs2 instruction to store rs1 * rs2 into rd. See more in the green card.</p><h4 id="Input-2">Input</h4><p>A reference input is already provided to you in the <code>input.S</code> file. The input for final tests will be the same format as the provided input except the matrix value.</p><p>In this part, we only promise that the length and width of kernel matrix will not be larger than that of image matrix. The image and kernel may not be a square and the length and width of the kernel may not be odd.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.data</span><br><span class="line"># length of image matrix</span><br><span class="line">.globl image_length</span><br><span class="line">image_length:</span><br><span class="line">    .word 5</span><br><span class="line"># width of image matrix</span><br><span class="line">.globl image_width</span><br><span class="line">image_width:</span><br><span class="line">    .word 5</span><br><span class="line"># image matrix</span><br><span class="line"># -2    12   14   28   -13</span><br><span class="line">#  1    11   3   -26    20</span><br><span class="line"># -8    30   5    29   -24</span><br><span class="line">#  27   4   -29   25   -13</span><br><span class="line"># -27  -1   -21   17    5</span><br><span class="line">.globl image</span><br><span class="line">image:</span><br><span class="line">    .word -2 12 14 28 -13 1 11 3 -26 20 -8 30 5 29 -24 27 4 -29 25 -13 -27 -1 -21 17 5 </span><br><span class="line"># length of kernel matrix</span><br><span class="line">.globl kernel_length</span><br><span class="line">kernel_length:</span><br><span class="line">    .word 2</span><br><span class="line"># width of kernel matrix</span><br><span class="line">.globl kernel_width</span><br><span class="line">kernel_width:</span><br><span class="line">    .word 2</span><br><span class="line"># kernel matrix</span><br><span class="line"># 0 3</span><br><span class="line"># 0 6</span><br><span class="line">.globl kernel</span><br><span class="line">kernel:</span><br><span class="line">    .word 0 3 0 6 </span><br></pre></td></tr></table></figure><h4 id="Output-2">Output</h4><p>You need to output the result matrix. The output format is the same with part1</p><p>It's usually the duty of the supervisor (operating system) to deal with input/output and halting program execution. Venus, being a simple emulator, does not offer us such luxury, but supports a list of primitive <a href="https://github.com/ThaumicMekanism/venus/wiki/Environmental-Calls">environmental calls</a>. You could use ecall to ask Venus for some specific functions. The following functions could be helpful.</p><table><thead><tr><th>ID (<code>A0</code>)</th><th>NAME</th><th>DESCRIPTION</th></tr></thead><tbody><tr><td>1</td><td>print_int</td><td>prints integer in <code>a1</code></td></tr><tr><td>10</td><td>exit</td><td>ends the program with return code 0</td></tr><tr><td>11</td><td>print_character</td><td>prints ASCII character in <code>a1</code></td></tr></tbody></table><ul><li>Each element in the result matrix ends with a space (ASCII: 32).</li><li>Each row of the result matrix ends with a <code>\n</code> (ASCII: 10).</li></ul><h3 id="Part3-Padded-2D-Convolution-in-RISC-V">Part3: Padded 2D-Convolution in RISC-V</h3><p>In part3, you are required to implement Zero-Padding Convolution using RISC-V.</p><h4 id="Input-3">Input</h4><p>The input format will be the same with part2. In part3, to simplify the progress, we promise that the kernel matrix will be a square and the length of it will be odd.</p><h4 id="Output-3">Output</h4><p>The output format should be the same with part1.</p><h2 id="Test">Test</h2><p>The command that we use to test your program's correctness is</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diff &lt;your_transformed_output&gt; &lt;reference_output&gt;</span><br></pre></td></tr></table></figure><p>You can also test your result using this command.</p><h2 id="Execution">Execution</h2><h3 id="Build-Execute-C-Program">Build &amp; Execute C Program</h3><ol><li>Run make to compile the code and the executable file will be main. The Makefile compile all C source files together, so you can add any source files you want</li><li>To run your code, type ./main input_file output_file . input_file contains the image and kernel matrix. output_file is where you output your results to.</li><li>Run make test to test your codes with input.txt and your output file will be C_program.out</li></ol><h3 id="Run-RISC-V-Program">Run RISC-V Program</h3><p>You need java to run the venus in terminal. Try to run sudo apt install openjdk-17-jre to download java-17.</p><p>Make sure that <code>venus-jvm-latest.jar</code>, <code>Convolution.S/Padding-Convolution.S</code> and <code>input.S</code> reside in the same directory. To run your program locally and write the output to <code>RISCV_result.txt</code>, use the following command. (Note that this command will overwrite the result file even if there's something there)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar venus-jvm-latest.jar Convolution.S &gt; RISCV_result.txt</span><br></pre></td></tr></table></figure><p>To debug your program online, you might want to replace <code>.import input.S</code> in <code>Convolution.S</code> with the content of <code>input.S</code>.</p><h2 id="Tips">Tips</h2><ul><li>In all the tests, you don't need to consider the mulitiplication or addition overflow.</li><li>You can use any risc-v instructions as long as the venus can recognize them.</li><li>Handwritten assembly are postfixed with extension <code>.S</code> to distinguish from compiler generated assembly <code>.s</code></li><li>You can learn more about how to use ecall from <a href="https://github.com/61c-teach/venus/wiki/Environmental-Calls">here</a>.</li><li>We will test your program using RISC-V emulator <a href="http://autolab.sist.shanghaitech.edu.cn/venus/">venus</a>. Actually almost all things you need can be learnt from <a href="https://github.com/ThaumicMekanism/venus/wiki">venus Wiki</a>.</li><li>Learn save and load from memory using RISC-V.</li><li>Be careful about the calling convention, it will make life easier.</li><li>Write comments.</li><li>The test cases are very friendly! Don't focus too much on the edge cases, focus on the correctness on the common cases.</li></ul><h2 id="Submission">Submission</h2><p>You should submit your code via Github. Please follow the guidance in Gradescope to submit your codes on Github. Please make sure you do not replace .import input.S with something else.</p><hr><p>In Project 1.2 are,</p><p>Chundong Wang &lt;<code>wangchd</code> AT <code>shanghaitech.edu.cn</code>&gt;<br>Siting Liu &lt;<code>liust</code> AT <code>shanghaitech.edu.cn</code>&gt;</p><p>and,</p><p>Linjie Ma &lt;<code>malj</code> AT <code>shanghaitech.edu.cn</code>&gt;<br>Xinxin Yu &lt;<code>yuxx</code> AT <code>shanghaitech.edu.cn</code>&gt;</p><p>Last modified: 2024-04-01</p>]]></content>
    
    
    <summary type="html">A simple 2D-Convolution algorithm in C and RISC-V and a padded 2D-Convolution in RISC-V.  (Individual Project)</summary>
    
    
    
    <category term="学习" scheme="https://zivmax.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机科学" scheme="https://zivmax.top/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
    <category term="CS110" scheme="https://zivmax.top/tags/CS110/"/>
    
    <category term="作业" scheme="https://zivmax.top/tags/%E4%BD%9C%E4%B8%9A/"/>
    
    <category term="上科大" scheme="https://zivmax.top/tags/%E4%B8%8A%E7%A7%91%E5%A4%A7/"/>
    
    <category term="计算机体系架构" scheme="https://zivmax.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>CS110 Homework [3]</title>
    <link href="https://zivmax.top/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/04/01/CS110/CS110-Homework-3/"/>
    <id>https://zivmax.top/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/04/01/CS110/CS110-Homework-3/</id>
    <published>2024-04-01T03:21:15.000Z</published>
    <updated>2024-04-03T10:45:10.378Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Fetch the homework <a href="https://classroom.github.com/a/MjRAMeln">here</a> on Github classroom, you will use Github for version control and Gradescope for submission.</p><span id="more"></span><h1 id="Homework-3">Homework 3</h1><p><a href="https://toast-lab.sist.shanghaitech.edu.cn/courses/CS110@ShanghaiTech/Spring-2024/index.html">Computer Architecture I</a> @ <a href="https://www.shanghaitech.edu.cn/">ShanghaiTech University</a></p><h1 id="FKS-Perfect-Hash">FKS Perfect Hash</h1><p>In this homework, you are going to implement a FKS perfect hash.</p><h2 id="Task1-Chained-Hash-Table">Task1: Chained Hash Table</h2><p>To begin, you need to build a hash table that resolves collisions with chaining in the <code>hash_chaining.c</code> file.</p><p>The <code>hash_chaining</code> struct requires the <code>hash_parameters</code> member, which should be generated by calling the <code>generate_hash_parameters()</code> function from the <code>hash_parameters.c</code> file.</p><p>Additionally, you should use the <code>hash_func</code> function defined in the <code>hash_func.c</code> file as your hash function. This function takes a key, hash parameters, and the size of the hash table (m) as input, and returns an integer x between 0 and m-1. The key should then be placed in the corresponding slot at index x in the hash table.</p><h2 id="Task2-FKS-Perfect-Hash">Task2: FKS Perfect Hash</h2><p>You are suggested to read <a href="https://www.cs.otago.ac.nz/cosc242/pdf/L11.pdf">https://www.cs.otago.ac.nz/cosc242/pdf/L11.pdf</a> page 25-40 before you continue.</p><p>After building the chained hash table, you need to complete the FKS (Fredman, Komlós and Szemerédi) perfect hash (fks_level1.c fks_level2.c).</p><p>Instead of resolving collisions with linked lists, the perfect hash use small secondary hash tables that map each key in the hash table to a unique index in an array.<br>The FKS perfect hash function guarantees that there are no collisions among the keys, resulting in constant-time lookups.</p><p>When implementing the <code>fks_level1_build()</code> function to build the Level 1 hash table for the FKS perfect hash, you should follow these steps:</p><ul><li><p>Use the same hash parameters and table size as the chained hash table: Since you're leveraging the existing chained hash table as the Level 1 hash table for the FKS perfect hash, you should use the same hash function parameters and table size as the chained hash table.</p></li><li><p>Create Level 2 hash tables for non-empty slots: Iterate through each slot (linked lists) in the chained hash table. For non-empty slots, create a small secondary hash table (<code>fks_level2</code>) to handle the collisions within that slot. Assume there are <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> keys in that slot, its size should be <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>. For empty slots in <code>fks_level2</code>, their values should be <code>FKS_LEVEL2_EMPTY</code>.  Its hash parameters should also be generated by calling the <code>generate_hash_parameters()</code> function. When there are collisions in Level 2 hash table, regenerate hash parameters and try again. For empty slots in the Level 1 hash table, its corresponding <code>level2_tables[i]</code> should be <code>NULL</code>.</p></li></ul><h2 id="Task3-Creating-and-linking-with-static-shared-libraries">Task3: Creating and linking with static/shared libraries</h2><h3 id="3-1-Static-Library">3.1 Static Library</h3><p>In the Makefile, complete the rules <code>$(STATIC_LIB): $(STATIC_OBJS)</code>and <code>test_fks_static: test_fks.c $(STATIC_LIB)</code>.</p><p>For <code>$(STATIC_LIB): $(STATIC_OBJS)</code>, a <code>$(STATIC_LIB)</code> (./build/libhash.a) should be created from <code>$(STATIC_OBJS)</code>.</p><p>For <code>test_fks_static: test_fks.c $(STATIC_LIB)</code>, a static linked binary <code>$(STATIC_BIN)</code>(/build/test_fks_static) should be create from <code>test_fks.c</code> and the <code>$(STATIC_LIB)</code></p><p>Make sure that <code>$(STATIC_BIN)</code> does not have any shared objects dependencies. That is, <code>ldd ./build/test_fks_static</code> should return <code>not a dynamic executable</code>.</p><h3 id="3-2-Shared-Library">3.2 Shared Library</h3><p>In the Makefile, complete the rules <code>$(SHARED_LIB): $(SHARED_OBJS)</code>and <code>test_fks_shared: test_fks.c $(SHARED_LIB)</code>.</p><p>For <code>$(SHARED_LIB): $(SHARED_OBJS)</code>, a <code>$(SHARED_LIB)</code> (./build/libhash.so) should be create from <code>$(SHARED_OBJS)</code>.</p><p>For <code>test_fks_shared: test_fks.c $(SHARED_LIB)</code>, a dynamic linked binary <code>$(SHARED_BIN)</code>(/build/test_fks_shared) should be created from <code>test_fks.c</code> and the <code>$(SHARED_LIB)</code></p><p>Make sure that <code>$(SHARED_BIN)</code> have shared object dependency to <code>$(SHARED_LIB)</code>. That is, the output of <code>ldd ./build/test_fks_dynamic</code> should include <code>libhash.so =&gt; ./build/libhash.so</code>.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Fetch the homework &lt;a href=&quot;https://classroom.github.com/a/MjRAMeln&quot;&gt;here&lt;/a&gt; on Github classroom, you will use Github for version control and Gradescope for submission.&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://zivmax.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机科学" scheme="https://zivmax.top/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
    <category term="CS110" scheme="https://zivmax.top/tags/CS110/"/>
    
    <category term="作业" scheme="https://zivmax.top/tags/%E4%BD%9C%E4%B8%9A/"/>
    
    <category term="上科大" scheme="https://zivmax.top/tags/%E4%B8%8A%E7%A7%91%E5%A4%A7/"/>
    
    <category term="计算机体系架构" scheme="https://zivmax.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>CS110 Lab [5]</title>
    <link href="https://zivmax.top/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/03/29/CS110/CS110-Lab-5/"/>
    <id>https://zivmax.top/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/03/29/CS110/CS110-Lab-5/</id>
    <published>2024-03-29T03:18:08.000Z</published>
    <updated>2024-04-03T06:31:56.505Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><strong>Goals</strong></p><ul><li>Acquire hands-on practice in designing and debugging fundamental digital logic circuits using Logisim.</li><li>Accumulate proficiency through experience in designing and troubleshooting circuits with both combinational logic gates and memory-based state elements.</li><li>Cultivate expertise in designing Finite State Machines (FSMs) and effectively realizing them as digital logic implementations.</li></ul><span id="more"></span><h1 id="Lab-5">Lab 5</h1><p><a href="https://toast-lab.sist.shanghaitech.edu.cn/courses/CS110@ShanghaiTech/Spring-2024/index.html">Computer Architecture I</a> @ <a href="https://www.shanghaitech.edu.cn/">ShanghaiTech University</a></p><h2 id="Exercises">Exercises</h2><p>Download the <a href="https://toast-lab.sist.shanghaitech.edu.cn/courses/CS110@ShanghaiTech/Spring-2024/labs/Lab5/lab5_starter.zip">files</a> for Lab 5 first.</p><p>Something you must know before you start:</p><ul><li>Logisim is a program with a GUI interface and please run it in your local environment. The local Python version should be greater than 3.6, and the Java version should be higher than 16.</li><li>Please use the <code>.jar</code> file we have provided (<code>Version 3.8.0</code>) to avoid compatibility issues. Windows, Ubuntu and macOS systems can all run it.</li><li>Logicsim does not save your work as you go along. Remember to save when you start, and save frequently as you work. The <code>Command/Control + S</code> shortcut key allows for quick saving.</li></ul><h3 id="Exercise-1-Hello-World-in-Logisim">Exercise 1: Hello World in Logisim</h3><p>You can launch Logicsim by running the following command in the terminal. If your environment is configured correctly, the program interface should appear after a few seconds. In the Windows OS, you can also open the program by double-clicking the <code>.jar</code> file with the left mouse button. If you launched Logisim from the command line, please keep the terminal open while it is running, otherwise the program will immediately exit.</p><p>$ java -jar logisim-evolution.jar</p><p>In this part of the lab, we will create an <code>AND</code> gate circuit together to help us get started quickly. Please pay attention to the zoom and grid functions located at the bottom left corner of the program, which will facilitate your wiring process during larger circuit designs.</p><p><img src="https://toast-lab.sist.shanghaitech.edu.cn/courses/CS110@ShanghaiTech/Spring-2024/labs/Lab5/welcome.png" alt></p><ol><li><p><img src="https://toast-lab.sist.shanghaitech.edu.cn/courses/CS110@ShanghaiTech/Spring-2024/labs/Lab5/and.png" alt> Start by clicking the <code>AND</code> gate button. This will cause the shadow of an <code>AND</code> gate to follow your cursor around. Click once within the main schematic window to place an <code>AND</code> gate.</p></li><li><p><img src="https://toast-lab.sist.shanghaitech.edu.cn/courses/CS110@ShanghaiTech/Spring-2024/labs/Lab5/inp.png" alt> Click the <code>Input Pin</code> button. Now, place two input pins somewhere to the left of your <code>AND</code> gate.</p></li><li><p><img src="https://toast-lab.sist.shanghaitech.edu.cn/courses/CS110@ShanghaiTech/Spring-2024/labs/Lab5/outp.png" alt> Click the <code>Output Pin</code> button. Then place an output pin somewhere to the right of your <code>AND</code> gate. Your schematic should look something like this at this point:</p><p><img src="https://toast-lab.sist.shanghaitech.edu.cn/courses/CS110@ShanghaiTech/Spring-2024/labs/Lab5/and1.png" alt></p></li><li><p><img src="https://toast-lab.sist.shanghaitech.edu.cn/courses/CS110@ShanghaiTech/Spring-2024/labs/Lab5/sel.png" alt> Click the <code>Select</code> tool button. Click and drag to connect the input pins to the left side of the <code>AND</code> gate. This will take several steps, as you can only draw vertical and horizontal wires. Just draw a wire horizontally, release the mouse button, then click and drag starting from the end of the wire to continue vertically. You can attach the wire to any pin on the <code>AND</code> gate on the left side. Repeat the same procedure to connect the output of the <code>AND</code> Gate (right side) to the output pin. Double-click these three pins to name them labels. After completing these steps your schematic should look roughly like this:</p><p><img src="https://toast-lab.sist.shanghaitech.edu.cn/courses/CS110@ShanghaiTech/Spring-2024/labs/Lab5/and2.png" alt></p></li><li><p><img src="https://toast-lab.sist.shanghaitech.edu.cn/courses/CS110@ShanghaiTech/Spring-2024/labs/Lab5/poke.png" alt> Click the <code>Poke</code> tool and try clicking on the input pins in your schematic. Observe what happens. Does this match with what you think an <code>AND</code> Gate should do? Note that poking the wires themselves tells you the current value on that wire; this will be very useful later when you build more complex circuits.</p></li><li><p>Save your circuit named as <code>ex1.circ</code>. Click <code>Simulate -&gt; Test Vector...</code> and load vector selecting the <code>testvector_ex1.txt</code> file from the <code>lab5_starter</code> folder. If everything goes well, you should see that all four test vectors passed.</p><p><img src="https://toast-lab.sist.shanghaitech.edu.cn/courses/CS110@ShanghaiTech/Spring-2024/labs/Lab5/testvector.png" alt></p></li></ol><p>Show your test vector result to your TA.</p><h3 id="Exercise-2-Build-Sub-circuits">Exercise 2: Build Sub-circuits</h3><p>Just as C programs can contain helper functions, a schematic can contain subcircuits. In this part of the lab, we will create several subcircuits to demonstrate their use.</p><p><strong>IMPORTANT NOTE</strong>: Logisim Evolution guidlines say you cannot name a subcircuit after a keyword (e.g. <code>NAND</code>), also circuit names must start with &quot;A-Za-z&quot;, so no numbers.</p><h4 id="ACTION-ITEM">ACTION ITEM:</h4><p>Follow the steps below and show your final circuit to your TA at checkoff (remember to save!).</p><ol><li><p>Open up the Exercise 2 schematic (<code>File -&gt; Open -&gt; ex2.circ</code>).</p></li><li><p>Open up the <code>NAND1</code> empty subcircuit by double clicking on the name <code>NAND1</code> in the circuit selector in the left menu. (note the <code>1</code> at the end; because there is a component called <code>NAND</code>, we cannot call it <code>NAND</code>).</p></li><li><p>In the new schematic window that you see create a simple <code>NAND</code> circuit with the 2 input pins on the left side and the output pin on the right side. Do this without using the built-in <code>NAND</code> gate from the Gates folder (i.e. only use the <code>AND</code>, <code>OR</code>, and <code>NOT</code> gates provided next to the selection tool icon). You can change the labels for the inputs and output by selecting the input/output using the select tool and changing the property <code>Label</code> in the bottom left of the window.</p></li><li><p>Repeat these steps to create several more subcircuits: <code>NOR</code>, <code>XOR</code>, <code>2-to-1 MUX</code>, <code>4-to-1 MUX</code> and <code>HALF ADDER</code> in the given skeletons. Please do not change the names of the subcircuits or create new ones; do you work in the respectively named circuit or else the autograder will not work properly. Do not use any built-in gates other than <code>AND</code>, <code>OR</code>, and <code>NOT</code>. Once you've built a subcircuit, you may (<strong>and are encouraged to</strong>) use it to build others. You can do this by clicking and placing your created subcircuit like you would any other component. Note: for the <code>4-to-1 MUX</code>, <code>Sel1</code> and <code>Sel2</code> correspond to the 1st and 2nd bits of the 2-bit selector, respectively.</p><p>Build your <code>4-to-1 MUX</code> according to the following rule in this lab:<br><code>Sel1</code>: 0, <code>Sel2</code>: 0 -&gt; Select <code>A</code><br><code>Sel1</code>: 1, <code>Sel2</code>: 0 -&gt; Select <code>B</code><br><code>Sel1</code>: 0, <code>Sel2</code>: 1 -&gt; Select <code>C</code><br><code>Sel1</code>: 1, <code>Sel2</code>: 1 -&gt; Select <code>D</code></p><p>Hint: Try writing a truth table. You might also find the lecture slides useful for a refresher on how to build these. <em>You may want to consider using some of your custom subcircuits when designing the others.</em></p></li></ol><p>Show your five circuits (<code>NAND</code>, <code>NOR</code>, <code>XOR</code>, <code>2-to-1 MUX</code>, <code>4-to-1 MUX</code> and <code>HALF ADDER</code>) to your TA.</p><h3 id="Exercise-3-Storing-State">Exercise 3: Storing State</h3><p>Let's implement a circuit that increments a value ad infinitum. The difference between this circuit and the circuits you've built for lab so far is that it will <strong>store</strong> this value in the <strong>state</strong> of a <strong>register</strong>.</p><h4 id="ACTION-ITEM-2">ACTION ITEM:</h4><p>The following steps will show you how to add registers to your circuit. Complete the steps and show the final circuit to your TA (remember to save!):</p><ol><li><p>Open up the Exercise 3 schematic (<code>File -&gt; Open -&gt; ex3.circ</code>) and go to the empty <code>AddMachine</code> circuit.</p></li><li><p>Select the <code>Adder</code> subcircuit from the <code>Arithmetic</code> library and place the <code>Adder</code> into your <code>AddMachine</code> subcircuit.</p></li><li><p>Select the register from the <code>Memory</code> folder and place one register into your subcircuit. Below is an image diagraming the parts of a register.</p><p><img src="https://toast-lab.sist.shanghaitech.edu.cn/courses/CS110@ShanghaiTech/Spring-2024/labs/Lab5/register.gif.png" alt></p></li><li><p>Connect a <code>clock</code> to your register. You can find the clock circuit element in the <code>Wiring</code> folder in the circuit browser.</p></li><li><p>Connect the output of the <code>Adder</code> to the input of the register, and the output of the register to the input of the <code>Adder</code>.</p><ul><li>You may get a &quot;Incompatible widths&quot; error when you try to connect components. This means that your wire is trying to connect two pins together with different bit widths. If you click on the <code>Adder</code> with the <code>Selection</code> tool, you will notice that there is a <code>Data Bit Width</code> property in the bottom left field of the window. This value determines the number of bits each input and output the <code>Adder</code> has. Change this field to <code>8</code> and the &quot;Incompatible widths&quot; error should be resolved.</li></ul></li><li><p>Wire an 8-bit constant <code>1</code> to the second input of the <code>Adder</code>. You can find the <code>Constant</code> circuit element in the <code>Wiring</code> library.</p></li><li><p>Connect the two output pins to your circuit so that you may monitor what comes out of the <code>Adder</code> and the register. The output of the <code>Adder</code> should be connected to <code>ADD_OUT</code> and the output of the register to <code>REG_OUT</code>.</p></li><li><p>Select the <code>Comparator</code> subcircuit from the <code>Arithmetic</code> library and place the <code>Comparator</code> into your <code>AddMachine</code> subcircuit. The first input of the <code>Comparator</code> should be connected to <code>REG_OUT</code>. Wire an 8-bit constant <code>255</code> to the second input of the <code>Comparator</code>.</p></li><li><p>Create an output pin at the right of the <code>Comparator</code> and name its label as <code>halt</code>. Connect the second output of the <code>Comparator</code> to the <code>halt</code>. It is used as a flag indicating the end of the simulation. Thus, by the end, your circuit should look like as follows:</p><p><img src="https://toast-lab.sist.shanghaitech.edu.cn/courses/CS110@ShanghaiTech/Spring-2024/labs/Lab5/AddMachine.png" alt></p></li><li><p>Now start running your circuit by going to <code>Simulate-&gt;Ticks Enabled</code> (or <code>Command/Control + K</code>). Your circuit should now be outputting a counter in binary form.</p></li><li><p>If you want to run your circuit faster, you can change the tick frequency in <code>Simulate-&gt;Tick Frequency</code>.</p></li></ol><p>Show your <code>AddMachine</code> circuit to your TA.</p><h3 id="Exercise-4-FSMs-to-Digital-Logic">Exercise 4: FSMs to Digital Logic</h3><p>In this part of lab, we're ready to do something really cool: translate a FSM into a digital logic circuit. FSM's keep track of inputs given, moves between states based on these inputs, and outputs something everytime something is input. We use a register to store the state of the FSM we're currently in, and combinational logic to map FSM input &amp; current register state to FSM output &amp; next register state.</p><h4 id="ACTION-ITEM-3">ACTION ITEM:</h4><p>Load the given starter file <code>ex4.circ</code> into Logisim. Modify this circuit's subcircuits <code>StateBitZero</code> and <code>StateBitOne</code> to implement this Moore FSM: Detecting <code>010</code> pattern in a bit sequence(use overlapping). Show this completed circuit to your TA (remember to save!)</p><ol><li><p>Note that the FSM is implemented by the following diagram (the four state names <code>00</code>, <code>01</code>, <code>10</code>, <code>11</code> are just names written in binary - they have no direct relationship with the actual zeros and ones of the FSM input/output). Take some time to understand how this diagram implements the FSM:</p><p><img src="https://toast-lab.sist.shanghaitech.edu.cn/courses/CS110@ShanghaiTech/Spring-2024/labs/Lab5/FSM.png" alt></p></li><li><p>Observe that the following is a truth table for the FSM (convince yourself of this):</p><table><thead><tr><th>st1</th><th>st0</th><th>input</th><th>next st1</th><th>next st0</th><th>output</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td></tr><tr><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td></tr><tr><td>0</td><td>1</td><td>1</td><td>1</td><td>0</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td><td>1</td></tr></tbody></table></li><li><p>We've provided you with a starter Logisim circuit to start out in <code>ex4.circ</code>.</p></li><li><p>Note that the top level of the circuit looks almost exactly the same as our previous adder circuit, but now there's a <code>FSMLogic</code> block instead of an adder block. <code>FSMLogic</code> is the combinational logic block for this FSM. We have handled the output bit for you. You should complete the circuit by completing the <code>StateBitOne</code> and <code>StateBitZero</code> subcircuits, which produces the next state bits.</p></li></ol><p>Show your <code>StateBitZero</code> circuit &amp; <code>StateBitOne</code> circuit to your TA and demonstrate that they behave correctly.</p><h3 id="Testing">Testing</h3><p>To test, run the testing script <code>test.sh</code>. Since Logisim will be running in one terminal window already, make sure to open up a new window to run the testing script. This script will copy your circuits into a testing harness, run your circuits on different inputs, and compare your results to ours. Therefore, please do not touch anything in the <code>testing</code> folder unless a TA instructs you to do so. However, you are more than welcome to check out the circuitry involved in testing your code as you will encounter it again when working on Project 2.</p><hr><p>The following TA(s) are responsible for this lab:</p><p>Zhaojun Ni <nizhj2022 at shanghaitech.edu.cn></nizhj2022></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Goals&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Acquire hands-on practice in designing and debugging fundamental digital logic circuits using Logisim.&lt;/li&gt;
&lt;li&gt;Accumulate proficiency through experience in designing and troubleshooting circuits with both combinational logic gates and memory-based state elements.&lt;/li&gt;
&lt;li&gt;Cultivate expertise in designing Finite State Machines (FSMs) and effectively realizing them as digital logic implementations.&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="学习" scheme="https://zivmax.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机科学" scheme="https://zivmax.top/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
    <category term="CS110" scheme="https://zivmax.top/tags/CS110/"/>
    
    <category term="作业" scheme="https://zivmax.top/tags/%E4%BD%9C%E4%B8%9A/"/>
    
    <category term="上科大" scheme="https://zivmax.top/tags/%E4%B8%8A%E7%A7%91%E5%A4%A7/"/>
    
    <category term="计算机体系架构" scheme="https://zivmax.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>DATA100 Note [3]</title>
    <link href="https://zivmax.top/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/03/26/DATA100/DATA100-Note-3/"/>
    <id>https://zivmax.top/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/03/26/DATA100/DATA100-Note-3/</id>
    <published>2024-03-26T10:31:28.000Z</published>
    <updated>2024-04-06T06:56:32.502Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="EDA-and-Data-Wrangling"><strong>EDA and Data Wrangling</strong></h1><p>Unboxing of New Data Set</p><h1 id="1-Unboxing-of-New-Phone">1. Unboxing of New Phone</h1><p>想象刚刚到货了一个新的手机，一种可能的流程是：</p><p><em>开机 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 随便试试 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 发现某个设置不顺手 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 调整设置 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 重新试试 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 发现某个设置不顺手 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 调整设置 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> ......</em></p><p><img src="https://qnam.smzdm.com/202010/23/5f92537c5b6b1461.jpg_e1080.jpg" alt="bg left:33%"></p><h1 id="2-Unboxing-of-New-Data-Set">2. Unboxing of New Data Set</h1><p>刚刚得到了一个新的数据集:</p><p><img src="https://img1.baidu.com/it/u=501391342,1436836699&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG" alt="bg left:33%"></p><p><em>Load Data <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> EDA <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 发现不对劲 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> Wrangling <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> EDA <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> 发现不对劲 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> Wrangling <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span> ......</em></p><h1 id="3-EDA-Exploratory-Data-Analysis-and-Wrangling">3. EDA (Exploratory Data Analysis) and Wrangling</h1><p>It is an open-ended, informal analysis paradigm.</p><p>It majorly focuses on:</p><div style="margin-left:100px"><ol><li><p><em><strong>Structure</strong></em></p></li><li><p><em><strong>Granularity, Scope, and Temporality</strong></em></p></li><li><p><em><strong>Faithfulness</strong></em></p></li></ol></div><h1 id="3-1-Data-s-Structure">3.1 Data's Structure</h1><br><div style="display: flex; justify-content: space-around; margin-left: -200px;"><div style="margin-right: -300px;"><ul><li><p><strong>Format:</strong></p><ul><li><em>CSV</em></li><li><em>TSV</em></li><li><em>Json</em></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mrow><annotation encoding="application/x-tex">\vdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.03em;"></span><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span></span></li></ul></li></ul></div><div><ul><li><p><strong>Variable Type:</strong></p><ul><li><em>Quantitative</em><ul><li><em>Continuous</em></li><li><em>Discrete</em></li></ul></li><li><em>Qualitative</em><ul><li><em>Ordinal</em></li><li><em>Nominal</em></li></ul></li></ul></li></ul></div></div><h1 id="4-Data-s-Structure">4. Data's Structure</h1><h2 id="4-1-File-Format-csv-tsv-json">4.1 File Format: csv, tsv, json ...</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x27;Year,Candidate,Party,Popular vote,Result,%\n&#x27;</span><br><span class="line">&#x27;1824,Andrew Jackson,Democratic-Republican,151271,loss,57.21012204\n&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x27;\ufeffYear\tCandidate\tParty\tPopular vote\tResult\t%\n&#x27;</span><br><span class="line">&#x27;1824\tAndrew Jackson\tDemocratic-Republican\t151271\tloss\t57.21012204\n&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line"> <span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;Candidate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Andrew Jackson&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;Party&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Democratic-Republican&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;Popular vote&quot;</span><span class="punctuation">:</span> <span class="number">151271</span><span class="punctuation">,</span></span><br><span class="line"> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h2 id="4-2-Metadata">4.2 Metadata</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Meta&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;Size&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.2MB&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2021-10-01&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Candidate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Andrew Jackson&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Popular vote&quot;</span><span class="punctuation">:</span> <span class="number">151271</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="comment">// ... more data section</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h2 id="4-3-Variable-Type">4.3 Variable Type</h2><p><img src="https://ds100.org/course-notes/eda/images/variable.png" alt></p><h1 id="5-Data-s-Granularity-Scope-and-Temporality">5. Data's Granularity, Scope, and Temporality</h1><ul><li><p><strong>Granularity:</strong> How detialed is the data about an indivisual?</p></li><li><p><strong>Scope:</strong> How well the samples cover the target population?</p></li><li><p><strong>Temporality:</strong> How timely is the data?</p></li></ul><h1 id="6-Data-s-Faithfulness">6. Data's Faithfulness</h1><h2 id="6-1-Signs-that-data-may-not-be-faithful">6.1 Signs that data may not be faithful</h2><ul><li><strong>Unrealistic or “incorrect” values</strong></li><li><strong>Violations of obvious dependencies</strong></li><li><strong>Clear signs that data was entered by hand</strong></li><li><strong>Signs of data falsification</strong></li><li><strong>Duplicated</strong></li><li><strong>Truncated data</strong></li></ul><h2 id="6-2-Missing-Values-Abnormal-Values">6.2 Missing Values (Abnormal Values)</h2><ul><li>Many abnormal values are actually just missing values.</li></ul><div style="margin-left:200px"><p><img src="https://ds100.org/course-notes/eda/eda_files/figure-html/cell-62-output-1.png" alt="h:400 "></p></div><h2 id="6-2-Missing-Values-Abnormal-Values-2">6.2 Missing Values (Abnormal Values)</h2><p>Three typical ways to deal with missing values: <em><strong>Drop</strong></em>, <em><strong>NaN</strong></em>, and <em><strong>Impute</strong></em>.</p><p><img src="https://ds100.org/course-notes/eda/eda_files/figure-html/cell-75-output-1.png" alt></p><h1 id="7-Summary">7. Summary</h1><ul><li><p><strong>Data Overview</strong>: Assess data's date, size, organization, and structure.</p></li><li><p><strong>Individual Analysis</strong>: Investigate each field/attribute/dimension.</p></li><li><p><strong>Pairwise Analysis</strong>: Explore relationships between dimensions.</p></li><li><p><strong>Along the way, we can:</strong></p><ul><li><strong>Visualize</strong></li><li><strong>Validate assumptions</strong></li><li><strong>Address anomalies</strong></li><li><strong>Document everything</strong> (<em>Ideally using Jupyter Notebook</em>)</li></ul></li></ul>]]></content>
    
    
    <summary type="html">Introduction to EDA and Data Wrangling.</summary>
    
    
    
    <category term="学习" scheme="https://zivmax.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机科学" scheme="https://zivmax.top/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
    <category term="笔记" scheme="https://zivmax.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Unfinished" scheme="https://zivmax.top/tags/Unfinished/"/>
    
    <category term="DATA100" scheme="https://zivmax.top/tags/DATA100/"/>
    
    <category term="数据科学" scheme="https://zivmax.top/tags/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>DATA100 Note [2]</title>
    <link href="https://zivmax.top/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/03/26/DATA100/DATA100-Note-2/"/>
    <id>https://zivmax.top/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/03/26/DATA100/DATA100-Note-2/</id>
    <published>2024-03-26T10:19:11.000Z</published>
    <updated>2024-03-26T10:31:50.248Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>转写自组会上讲解使用的 Slides，高度凝练了 DATA100 中 Pandas 的教学内容。</p><span id="more"></span><h1 id="1-Pandas-简介">1. Pandas 简介</h1><ul><li><p><strong>什么是 Pandas ？</strong></p><ul><li>一个开源的数据分析和处理 Python 库，基于 NumPy。</li><li>Like a Python module version of SQL</li></ul></li><li><p><strong>为什么 Pandas ？</strong></p><ul><li>提供了快速、灵活和表达式丰富的数据结构，使 “关系” 和 “标签” 数据的处理既简单又直观。</li><li>Highly compatible wito NumPy</li><li>Popular</li></ul></li></ul><h1 id="2-Pandas-使用的基础数据结构">2. Pandas 使用的基础数据结构</h1><ul><li><p>Pandas 处理的基本数据类型：Tabular Data</p></li><li><p>基本数据结构</p><ul><li><p><strong><code>Series</code></strong>：1D tagged data structure，类似于 Python 中的 <code>dict</code> 。</p></li><li><p><strong><code>DataFrame</code></strong>：2D tagged data structure，以 Series 为列构成的 2D table 。</p></li><li><p><strong><code>DataFrameGroupBy</code></strong>：<code>DataFrame.groupby</code> 的产物，是多组有共同特征的 DataFrames 集合。</p></li></ul></li></ul><h1 id="3-数据处理的基本操作">3. 数据处理的基本操作</h1><ol><li><p><strong>Read Data:</strong></p><ul><li>Create a DataFrame from a file or from a Python object.</li></ul></li><li><p><strong>Select Data:</strong></p><ul><li>Select rows, columns, or cells from a DataFrame.</li></ul></li><li><p><strong>Filter Data:</strong></p><ul><li>Define conditions, generate boolean masks, and filter data.</li></ul></li><li><p><strong>Sort Data:</strong></p><ul><li>Sort data by the index we specify.</li></ul></li><li><p><strong>Aggregating Data:</strong></p><ul><li>Group data by some criteria and apply functions to the groups.</li></ul></li><li><p><strong>Join Data:</strong></p><ul><li>Combine DataFrames based the key columns we specify.</li></ul></li><li><p><strong>Modify Data</strong></p></li><li><p><strong>Delete Data</strong></p></li></ol><h2 id="3-1-Read-Data">3.1 Read Data</h2><p>From <code>csv</code> file or <code>dict</code>, <code>list</code>, <code>tuple</code>, <code>ndarray</code>, <code>Series</code> objects in Python.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># Read from csv file</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;data.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create DataFrame from Python objects</span></span><br><span class="line">df_dict = pd.DataFrame(&#123;<span class="string">&#x27;Name&#x27;</span>: [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Jerry&#x27;</span>], <span class="string">&#x27;Age&#x27;</span>: [<span class="number">20</span>, <span class="number">21</span>]&#125;) </span><br><span class="line">df_list = pd.DataFrame([[<span class="string">&#x27;Tom&#x27;</span>, <span class="number">20</span>], [<span class="string">&#x27;Jerry&#x27;</span>, <span class="number">21</span>]], columns=[<span class="string">&#x27;Name&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>])</span><br><span class="line">df_tuple = pd.DataFrame(((<span class="string">&#x27;Tom&#x27;</span>, <span class="number">20</span>), (<span class="string">&#x27;Jerry&#x27;</span>, <span class="number">21</span>)), columns=[<span class="string">&#x27;Name&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment"># ndarray example</span></span><br><span class="line">data = np.array([[<span class="string">&#x27;Tom&#x27;</span>, <span class="number">20</span>], [<span class="string">&#x27;Jerry&#x27;</span>, <span class="number">21</span>]])</span><br><span class="line">df_ndarray = pd.DataFrame(data, columns=[<span class="string">&#x27;Name&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-2-Select-Data">3.2 Select Data</h2><ul><li><p><strong>Select Columns:</strong> Use column names directly or <code>df[['col1', 'col2']]</code>.</p></li><li><p><strong>Select Rows:</strong> Use slicing or conditions, e.g., <code>df[1:3]</code> or <code>df[df['Age'] &gt; 20]</code>.</p></li><li><p><strong>Select Cells:</strong> Combine row and column selection, e.g., <code>df.loc[rows, cols]</code> or <code>df.iloc[row_indices, col_indices]</code>.</p></li></ul><h2 id="3-2-Select-Data-2">3.2 Select Data</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Select a single column</span></span><br><span class="line">names = df[<span class="string">&#x27;Name&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Select multiple columns</span></span><br><span class="line">subset = df[[<span class="string">&#x27;Name&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Select rows by slicing</span></span><br><span class="line">rows_slice = df[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Select rows by condition</span></span><br><span class="line">adults = df[df[<span class="string">&#x27;Age&#x27;</span>] &gt;= <span class="number">18</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Select specific cells</span></span><br><span class="line">cell_value = df.loc[<span class="number">1</span>, <span class="string">&#x27;Name&#x27;</span>]  <span class="comment"># Second row, Name column</span></span><br></pre></td></tr></table></figure><h2 id="3-3-Filter-Data">3.3 Filter Data</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Simple condition</span></span><br><span class="line">adults = df[df[<span class="string">&#x27;Age&#x27;</span>] &gt;= <span class="number">18</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Multiple conditions</span></span><br><span class="line">young_adults = df[(df[<span class="string">&#x27;Age&#x27;</span>] &gt;= <span class="number">18</span>) &amp; (df[<span class="string">&#x27;Age&#x27;</span>] &lt;= <span class="number">30</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Using query method</span></span><br><span class="line">seniors = df.query(<span class="string">&#x27;Age &gt; 60&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Filtering with isin method for categorical data</span></span><br><span class="line">students = df[df[<span class="string">&#x27;Occupation&#x27;</span>].isin([<span class="string">&#x27;Student&#x27;</span>])]</span><br></pre></td></tr></table></figure><h2 id="3-4-Sort-Data">3.4 Sort Data</h2><p>Sorting data is crucial for analyzing datasets where the order of rows is significant.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sort DataFrame by a single column</span></span><br><span class="line">df_sorted = df.sort_values(by=<span class="string">&#x27;Age&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sort DataFrame by multiple columns</span></span><br><span class="line">df_sorted_multi = df.sort_values(by=[<span class="string">&#x27;LastName&#x27;</span>, <span class="string">&#x27;FirstName&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sort in descending order</span></span><br><span class="line">df_sorted_desc = df.sort_values(by=<span class="string">&#x27;Age&#x27;</span>, ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h2 id="3-5-Aggregating-Data">3.5 Aggregating Data</h2><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>G</mi><mi>r</mi><mi>o</mi><mi>u</mi><mi>p</mi><mi>i</mi><mi>n</mi><mi>g</mi><mo>→</mo><mi>A</mi><mi>p</mi><mi>p</mi><mi>l</mi><mi>y</mi><mi>i</mi><mi>n</mi><mi>g</mi><mtext> </mtext><mi>F</mi><mi>u</mi><mi>n</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>→</mo><mi>A</mi><mi>g</mi><mi>g</mi><mi>r</mi><mi>e</mi><mi>g</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">Grouping \to Applying\ Function \to Aggregated</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">G</span><span class="mord mathnormal">ro</span><span class="mord mathnormal">u</span><span class="mord mathnormal">p</span><span class="mord mathnormal">in</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.01968em;">ppl</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal">in</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.03588em;">gg</span><span class="mord mathnormal">re</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span></span></span></span></span></p><p><img src="https://s2.loli.net/2024/03/26/8fwPShTguRoLFtU.png" alt="aggregation"></p><h3 id="3-5-1-Aggregating-Data">3.5.1 Aggregating Data</h3><p>Aggregating data involves combining multiple pieces of data into a summary form.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Group by a single column and calculate mean</span></span><br><span class="line">grouped_single = df.groupby(<span class="string">&#x27;Department&#x27;</span>).mean()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Group by multiple columns</span></span><br><span class="line">grouped_multi = df.groupby([<span class="string">&#x27;Department&#x27;</span>, <span class="string">&#x27;Position&#x27;</span>]).<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Applying multiple aggregation functions at once</span></span><br><span class="line">grouped_agg = df.groupby(<span class="string">&#x27;Department&#x27;</span>).agg(&#123;<span class="string">&#x27;Salary&#x27;</span>: [<span class="string">&#x27;mean&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;max&#x27;</span>]&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-5-2-Aggregating-Data-with-Pivot-Tables">3.5.2 Aggregating Data with Pivot Tables</h3><p><img src="https://s2.loli.net/2024/03/26/BowDGQmYnrv6O5J.png" alt="pivot"></p><h2 id="3-5-2-Aggregating-Data-with-Pivot-Tables-2">3.5.2 Aggregating Data with Pivot Tables</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The `pivot_table` method is used to generate a Pandas pivot table</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">babynames.pivot_table(</span><br><span class="line">    index = <span class="string">&quot;Year&quot;</span>,</span><br><span class="line">    columns = <span class="string">&quot;Sex&quot;</span>,    </span><br><span class="line">    values = <span class="string">&quot;Count&quot;</span>, </span><br><span class="line">    aggfunc = np.<span class="built_in">sum</span>, </span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="3-6-Join-Data">3.6 Join Data</h2><ul><li><code>left</code> and <code>right</code> parameters are used to specify the DataFrames to be joined.</li><li><code>left_on</code> and <code>right_on</code> parameters are for aligning the key columns.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Merge two DataFrames on a key</span></span><br><span class="line">merged_df = pd.merge(df1, df2, on=<span class="string">&#x27;EmployeeID&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Merge using different keys for each DataFrame</span></span><br><span class="line">merged_diff_keys = pd.merge(</span><br><span class="line">    df1, </span><br><span class="line">    df2, </span><br><span class="line">    left_on=<span class="string">&#x27;EmployeeID_df1&#x27;</span>,</span><br><span class="line">    right_on=<span class="string">&#x27;EmployeeID_df2&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="3-7-Modify-Data">3.7 Modify Data</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Change a value directly</span></span><br><span class="line">df.loc[<span class="number">0</span>, <span class="string">&#x27;Age&#x27;</span>] = <span class="number">22</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add a new column</span></span><br><span class="line">df[<span class="string">&#x27;Country&#x27;</span>] = <span class="string">&#x27;Unknown&#x27;</span>  <span class="comment"># Adds a new column with all values set to &#x27;Unknown&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Apply a function to transform data</span></span><br><span class="line">df[<span class="string">&#x27;Age in 5 Years&#x27;</span>] = df[<span class="string">&#x27;Age&#x27;</span>] + <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Using apply() to apply a custom function to each row</span></span><br><span class="line">df[<span class="string">&#x27;Name Length&#x27;</span>] = df[<span class="string">&#x27;Name&#x27;</span>].apply(<span class="built_in">len</span>)</span><br></pre></td></tr></table></figure><h2 id="3-8-Delete-Data">3.8 Delete Data</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Drop a column</span></span><br><span class="line">df.drop(<span class="string">&#x27;Age in 5 Years&#x27;</span>, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Drop a row</span></span><br><span class="line">df.drop(index=<span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Drop rows based on condition</span></span><br><span class="line">df = df[df[<span class="string">&#x27;Age&#x27;</span>] &gt;= <span class="number">18</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set a cell value to NaN</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">df.loc[df[<span class="string">&#x27;Age&#x27;</span>] &lt; <span class="number">18</span>, <span class="string">&#x27;Age&#x27;</span>] = np.nan</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;转写自组会上讲解使用的 Slides，高度凝练了 DATA100 中 Pandas 的教学内容。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://zivmax.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机科学" scheme="https://zivmax.top/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
    <category term="笔记" scheme="https://zivmax.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="DATA100" scheme="https://zivmax.top/tags/DATA100/"/>
    
    <category term="数据科学" scheme="https://zivmax.top/tags/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>DATA100 Note [1]</title>
    <link href="https://zivmax.top/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/03/26/DATA100/DATA100-Note-1/"/>
    <id>https://zivmax.top/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/03/26/DATA100/DATA100-Note-1/</id>
    <published>2024-03-26T10:07:36.000Z</published>
    <updated>2024-03-26T10:31:53.525Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="1-Introduction">1  Introduction</h1><p>Data science is an interdisciplinary field with a variety of applications and offers great potential to address challenging societal issues. By building data science skills, you can empower yourself to participate in and drive conversations that shape your life and society as a whole, whether that be fighting against climate change, launching diversity initiatives, or more.</p><p>Data science is fundamentally human-centered and facilitates decision-making by quantitatively balancing tradeoffs. To quantify things reliably, we must use and analyze data appropriately, apply critical thinking and skepticism at every step of the way, and consider how our decisions affect others.</p><p>Ultimately, data science is the application of data-centric, computational, and inferential thinking to:</p><ul><li>Understand the world (science).</li><li>Solve problems (engineering).</li></ul><p><img src="https://s2.loli.net/2024/03/26/UI6HBXPRgD9bVMv.png" alt="venn"></p><h2 id="1-1-Data-Science-Lifecycle">1.1 Data Science Lifecycle</h2><p>The data science lifecycle is a <em>high-level overview</em> of the data science workflow. It’s a cycle of stages that a data scientist should explore as they conduct a thorough analysis of a data-driven problem.</p><p>There are many variations of the key ideas present in the data science lifecycle. In Data 100, we visualize the stages of the lifecycle using a flow diagram. Notice how there are two entry points.</p><p><img src="https://s2.loli.net/2024/03/26/vFTy3lWRoD596MS.png" alt="data_life_cycle"></p><h3 id="1-1-1-Ask-a-Question">1.1.1 Ask a Question</h3><p>Whether by curiosity or necessity, data scientists constantly ask questions. For example, in the business world, data scientists may be interested in predicting the profit generated by a certain investment. In the field of medicine, they may ask whether some patients are more likely than others to benefit from a treatment.</p><p>Posing questions is one of the primary ways the data science lifecycle begins. It helps to fully define the question. Here are some things you should ask yourself before framing a question.</p><ul><li>What do we want to know?<ul><li>A question that is too ambiguous may lead to confusion.</li></ul></li><li>What problems are we trying to solve?<ul><li>The goal of asking a question should be clear in order to justify your efforts to stakeholders.</li></ul></li><li>What are the hypotheses we want to test?<ul><li>This gives a clear perspective from which to analyze final results.</li></ul></li><li>What are the metrics for our success?<ul><li>This establishes a clear point to know when to conclude the project.</li></ul></li></ul><p><img src="https://s2.loli.net/2024/03/26/J2Fo84n1GwBSuQm.png" alt="ask_question"></p><h3 id="1-1-2-Obtain-Data">1.1.2 Obtain Data</h3><p>The second entry point to the lifecycle is by obtaining data. A careful analysis of any problem requires the use of data. Data may be readily available to us, or we may have to embark on a process to collect it. When doing so, it is crucial to ask the following:</p><ul><li>What data do we have, and what data do we need?<ul><li>Define the units of the data (people, cities, points in time, etc.) and what features to measure.</li></ul></li><li>How will we sample more data?<ul><li>Scrape the web, collect manually, run experiments, etc.</li></ul></li><li>Is our data representative of the population we want to study?<ul><li>If our data is not representative of our population of interest, then we can come to incorrect conclusions.</li></ul></li></ul><p>Key procedures: <em>data acquisition</em>, <em>data cleaning</em></p><p><img src="https://s2.loli.net/2024/03/26/Exah5CluBqdizkJ.png" alt="data_acquisition"></p><h3 id="1-1-3-Understand-the-Data">1.1.3 Understand the Data</h3><p>Raw data itself is not inherently useful. It’s impossible to discern all the patterns and relationships between variables without carefully investigating them. Therefore, translating pure data into actionable insights is a key job of a data scientist. For example, we may choose to ask:</p><ul><li>How is our data organized, and what does it contain?<ul><li>Knowing what the data says about the world helps us better understand the world.</li></ul></li><li>Do we have relevant data?<ul><li>If the data we have collected is not useful to the question at hand, then we must collect more data.</li></ul></li><li>What are the biases, anomalies, or other issues with the data?<ul><li>These can lead to many false conclusions if ignored, so data scientists must always be aware of these issues.</li></ul></li><li>How do we transform the data to enable effective analysis?<ul><li>Data is not always easy to interpret at first glance, so a data scientist should strive to reveal the hidden insights.</li></ul></li></ul><p>Key procedures: <em>exploratory data analysis</em>, <em>data visualization</em>.</p><p><img src="https://s2.loli.net/2024/03/26/VxPbzan8w1KNvqZ.png" alt="understanding_data"></p><h3 id="1-1-4-Understand-the-World">1.1.4 Understand the World</h3><p>After observing the patterns in our data, we can begin answering our questions. This may require that we predict a quantity (machine learning) or measure the effect of some treatment (inference).</p><p>From here, we may choose to report our results, or possibly conduct more analysis. We may not be satisfied with our findings, or our initial exploration may have brought up new questions that require new data.</p><ul><li><p>What does the data say about the world?</p><ul><li>Given our models, the data will lead us to certain conclusions about the real world.</li></ul></li><li><p>Does it answer our questions or accurately solve the problem?</p><ul><li>If our model and data can not accomplish our goals, then we must reform our question, model, or both.</li></ul></li><li><p>How robust are our conclusions and can we trust the predictions?</p><ul><li>Inaccurate models can lead to false conclusions.</li></ul></li></ul><p>Key procedures: <em>model creation</em>, <em>prediction</em>, <em>inference</em>.</p><p><img src="https://s2.loli.net/2024/03/26/hFsV4c5xtpLj2XP.png" alt="understand_world"></p><h2 id="1-2-Conclusion">1.2 Conclusion</h2><p>The data science lifecycle is meant to be a set of general guidelines rather than a hard set of requirements. In our journey exploring the lifecycle, we’ll cover both the underlying theory and technologies used in data science. By the end of the course, we hope that you start to see yourself as a data scientist.</p><p>With that, we’ll begin by introducing one of the most important tools in exploratory data analysis: <code>pandas</code>.</p>]]></content>
    
    
    <summary type="html">Breif introduction to Data Science</summary>
    
    
    
    <category term="学习" scheme="https://zivmax.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机科学" scheme="https://zivmax.top/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
    <category term="笔记" scheme="https://zivmax.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="DATA100" scheme="https://zivmax.top/tags/DATA100/"/>
    
    <category term="数据科学" scheme="https://zivmax.top/tags/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>CS110 Project 1.1</title>
    <link href="https://zivmax.top/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/03/26/CS110/CS110-Project-1-1/"/>
    <id>https://zivmax.top/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/03/26/CS110/CS110-Project-1-1/</id>
    <published>2024-03-26T03:26:20.000Z</published>
    <updated>2024-04-08T11:38:35.221Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Project-1-1-A-RISC-V-Assembler-Individual-Project">Project 1.1: A RISC-V Assembler (Individual Project)</h1><p><a href="https://toast-lab.sist.shanghaitech.edu.cn/courses/CS110@ShanghaiTech/Spring-2024/index.html">Computer Architecture I</a> <a href="https://www.shanghaitech.edu.cn/">ShanghaiTech University</a></p><h2 id="IMPORTANT-INFO-PLEASE-READ">IMPORTANT INFO - PLEASE READ</h2><p>The projects are part of your design project worth 2 credit points. As such they run in parallel to the actual course. So be aware that the due date for project and homework might be very close to each other! Start early and do not procrastinate.</p><hr><h2 id="Introduction-to-Project-1-1">Introduction to Project 1.1</h2><p>In Project 1.1, you are going to make a simple one-pass RISC-V assembler. The assembler takes RISC-V codes which contain no labels and symbols as input and outputs corresponding machine codes. You also need to implement basic error handling to detect invaild instructions. You can fetch the framework for Project 1.1 <a href="https://classroom.github.com/a/ga24pVYj">here</a> on Github classroom, try to use git and Github for version control.</p><h2 id="Background-of-The-Instruction-Set">Background of The Instruction Set</h2><h3 id="Registers">Registers</h3><p>Please consult the <a href="https://toast-lab.sist.shanghaitech.edu.cn/courses/CS110@ShanghaiTech/Spring-2023/lecture_notes/riscvcard.pdf">RISC-V Green Sheet (PDF)</a> for register numbers, instruction opcodes, and bitwise formats. Our asembler will support all 32 registers: <strong>zero</strong>, <strong>ra</strong>, <strong>sp</strong>, <strong>gp</strong>, <strong>tp</strong>, <strong>t0-t6</strong>, <strong>s0 - s11</strong>, <strong>a0 - a7</strong>. Other register numbers (eg. x0, x1, x2 etc.) shall be also supported. Note that floating point registers are not included in this project.</p><h3 id="Instructions">Instructions</h3><p>We will have 42 instructions and 6 pseudo-instructions to assemble. The instructions are:</p><table>  <thead>      <tr>          <td>Instruction</td>          <td>Type</td>          <td>Opcode</td>          <td>Funct3</td>          <td>Funct7/IMM</td>          <td>Operation</td>      </tr>  </thead>  <tbody>      <tr>          <td><span class="inst">add</span> <span class="rgtr">rd</span>, <span class="rgtr">rs1</span>, <span class="rgtr">rs2</span></td>          <td rowspan="14">R</td>          <td rowspan="14"><span>0x33</span></td>          <td>0x0</td>          <td>0x00</td>          <td><span class="vars">R</span>[<span class="rgtr">rd</span>] ← <span class="vars">R</span>[<span class="rgtr">rs1</span>] + <span class="vars">R</span>[<span class="rgtr">rs2</span>]</td>      </tr>      <tr>          <td><span class="inst">mul</span> <span class="rgtr">rd</span>, <span class="rgtr">rs1</span>, <span class="rgtr">rs2</span></td>          <td>0x0</td>          <td>0x01</td>          <td><span class="vars">R</span>[<span class="rgtr">rd</span>] ← (<span class="vars">R</span>[<span class="rgtr">rs1</span>] * <span class="vars">R</span>[<span class="rgtr">rs2</span>])[31:0]</td>      </tr>      <tr>          <td><span class="inst">sub</span> <span class="rgtr">rd</span>, <span class="rgtr">rs1</span>, <span class="rgtr">rs2</span></td>          <td>0x0</td>          <td>0x20</td>          <td><span class="vars">R</span>[<span class="rgtr">rd</span>] ← <span class="vars">R</span>[<span class="rgtr">rs1</span>] - <span class="vars">R</span>[<span class="rgtr">rs2</span>]</td>      </tr>      <tr>          <td><span class="inst">sll</span> <span class="rgtr">rd</span>, <span class="rgtr">rs1</span>, <span class="rgtr">rs2</span></td>          <td>0x1</td>          <td>0x00</td>          <td><span class="vars">R</span>[<span class="rgtr">rd</span>] ← <span class="vars">R</span>[<span class="rgtr">rs1</span>] &lt;&lt; <span class="vars">R</span>[<span>rs2</span>]</td>      </tr>      <tr>          <td><span class="inst">mulh</span> <span class="rgtr">rd</span>, <span class="rgtr">rs1</span>, <span class="rgtr">rs2</span></td>          <td>0x1</td>          <td>0x01</td>          <td><span class="vars">R</span>[<span class="rgtr">rd</span>] ← (<span class="vars">R</span>[<span class="rgtr">rs1</span>] * <span class="vars">R</span>[<span class="rgtr">rs2</span>])[63:32]</td>      </tr>      <tr>          <td><span class="inst">slt</span> <span class="rgtr">rd</span>, <span class="rgtr">rs1</span>, <span class="rgtr">rs2</span></td>          <td>0x2</td>          <td>0x00</td>          <td><span class="vars">R</span>[<span class="rgtr">rd</span>] ← (<span class="vars">R</span>[<span class="rgtr">rs1</span>] &lt; <span class="vars">R</span>[<span class="rgtr">rs2</span>]) ? 1 : 0</td>      </tr>      <tr>          <td><span class="inst">sltu</span> <span class="rgtr">rd</span>, <span class="rgtr">rs1</span>, <span class="rgtr">rs2</span></td>          <td>0x3</td>          <td>0x00</td>          <td><span class="vars">R</span>[<span class="rgtr">rd</span>] ← (<span class="func">U</span>(<span class="vars">R</span>[<span class="rgtr">rs1</span>]) &lt; <span class="func">U</span>(<span class="vars">R</span>[<span class="rgtr">rs2</span>])) ? 1 : 0</td>      </tr>      <tr>          <td><span class="inst">xor</span> <span class="rgtr">rd</span>, <span class="rgtr">rs1</span>, <span class="rgtr">rs2</span></td>          <td>0x4</td>          <td>0x00</td>          <td><span class="vars">R</span>[<span class="rgtr">rd</span>] ← <span class="vars">R</span>[<span class="rgtr">rs1</span>] ^ <span class="vars">R</span>[<span class="rgtr">rs2</span>]</td>      </tr>      <tr>          <td><span class="inst">div</span> <span class="rgtr">rd</span>, <span class="rgtr">rs1</span>, <span class="rgtr">rs2</span></td>          <td>0x4</td>          <td>0x01</td>          <td><span class="vars">R</span>[<span class="rgtr">rd</span>] ← <span class="vars">R</span>[<span class="rgtr">rs1</span>] / <span class="vars">R</span>[<span class="rgtr">rs2</span>]</td>      </tr>      <tr>          <td><span class="inst">srl</span> <span class="rgtr">rd</span>, <span class="rgtr">rs1</span>, <span class="rgtr">rs2</span></td>          <td>0x5</td>          <td>0x00</td>          <td><span class="vars">R</span>[<span class="rgtr">rd</span>] ← <span class="vars">R</span>[<span class="rgtr">rs1</span>] &gt;&gt; <span class="vars">R</span>[<span class="rgtr">rs2</span>]</td>      </tr>      <tr>          <td><span class="inst">sra</span> <span class="rgtr">rd</span>, <span class="rgtr">rs1</span>, <span class="rgtr">rs2</span></td>          <td>0x5</td>          <td>0x20</td>          <td><span class="vars">R</span>[<span class="rgtr">rd</span>] ← <span class="vars">R</span>[<span class="rgtr">rs1</span>] &gt;&gt; <span class="vars">R</span>[<span class="rgtr">rs2</span>]</td>      </tr>      <tr>          <td><span class="inst">or</span> <span class="rgtr">rd</span>, <span class="rgtr">rs1</span>, <span class="rgtr">rs2</span></td>          <td>0x6</td>          <td>0x00</td>          <td><span class="vars">R</span>[<span class="rgtr">rd</span>] ← <span class="vars">R</span>[<span class="rgtr">rs1</span>] | <span class="vars">R</span>[<span class="rgtr">rs2</span>]</td>      </tr>      <tr>          <td><span class="inst">rem</span> <span class="rgtr">rd</span>, <span class="rgtr">rs1</span>, <span class="rgtr">rs2</span></td>          <td>0x6</td>          <td>0x01</td>          <td><span class="vars">R</span>[<span class="rgtr">rd</span>] ← (<span class="vars">R</span>[<span class="rgtr">rs1</span>] % <span class="vars">R</span>[<span class="rgtr">rs2</span>]</td>      </tr>      <tr>          <td><span class="inst">and</span> <span class="rgtr">rd</span>, <span class="rgtr">rs1</span>, <span class="rgtr">rs2</span></td>          <td>0x7</td>          <td>0x00</td>          <td><span class="vars">R</span>[<span class="rgtr">rd</span>] ← <span class="vars">R</span>[<span class="rgtr">rs1</span>] &amp; <span class="vars">R</span>[<span class="rgtr">rs2</span>]</td>      </tr>      <tr>          <td><span class="inst">lb</span> <span class="rgtr">rd</span>, <span class="immd">offset</span>(<span class="rgtr">rs1</span>)</td>          <td rowspan="16">I</td>          <td rowspan="5"><span>0x03</span></td>          <td>0x0</td>          <td></td>          <td><span class="vars">R</span>[<span class="rgtr">rd</span>] ← <span class="func">SignExt</span>(<span class="func">Mem</span>(<span class="vars">R</span>[<span class="rgtr">rs1</span>] + <span class="immd">offset</span>, <span class="lite">byte</span>))</td>      </tr>      <tr>          <td><span class="inst">lh</span> <span class="rgtr">rd</span>, <span class="immd">offset</span>(<span class="rgtr">rs1</span>)</td>          <td>0x1</td>          <td></td>          <td><span class="vars">R</span>[<span class="rgtr">rd</span>] ← <span class="func">SignExt</span>(<span class="func">Mem</span>(<span class="vars">R</span>[<span class="rgtr">rs1</span>] + <span class="immd">offset</span>, <span class="lite">half</span>))</td>      </tr>      <tr>          <td><span class="inst">lw</span> <span class="rgtr">rd</span>, <span class="immd">offset</span>(<span class="rgtr">rs1</span>)</td>          <td>0x2</td>          <td></td>          <td><span class="vars">R</span>[<span class="rgtr">rd</span>] ← <span class="func">Mem</span>(<span class="vars">R</span>[<span class="rgtr">rs1</span>] + <span class="immd">offset</span>, <span class="lite">word</span>)</td>      </tr>      <tr>          <td><span class="inst">lbu</span> <span class="rgtr">rd</span>, <span class="immd">offset</span>(<span class="rgtr">rs1</span>)</td>          <td>0x4</td>          <td></td>          <td><span class="vars">R</span>[<span class="rgtr">rd</span>] ← <span class="func">U</span>(<span class="func">Mem</span>(<span class="vars">R</span>[<span class="rgtr">rs1</span>] + <span class="immd">offset</span>, <span class="lite">byte</span>))</td>      </tr>      <tr>          <td><span class="inst">lhu</span> <span class="rgtr">rd</span>, <span class="immd">offset</span>(<span class="rgtr">rs1</span>)</td>          <td>0x5</td>          <td></td>          <td><span class="vars">R</span>[<span class="rgtr">rd</span>] ← <span class="func">U</span>(<span class="func">Mem</span>(<span class="vars">R</span>[<span class="rgtr">rs1</span>] + <span class="immd">offset</span>, <span class="lite">half</span>))</td>      </tr>      <tr>          <td><span class="inst">addi</span> <span class="rgtr">rd</span>, <span class="rgtr">rs1</span>, <span class="immd">imm</span></td>          <td rowspan="9">0x13</td>          <td>0x0</td>          <td></td>          <td><span class="vars">R</span>[<span class="rgtr">rd</span>] ← <span class="vars">R</span>[<span class="rgtr">rs1</span>] + <span class="immd">imm</span></td>      </tr>      <tr>          <td><span class="inst">slli</span> <span class="rgtr">rd</span>, <span class="rgtr">rs1</span>, <span class="immd">imm</span></td>          <td>0x1</td>          <td>0x00</td>          <td><span class="vars">R</span>[<span class="rgtr">rd</span>] ← <span class="vars">R</span>[<span class="rgtr">rs1</span>] &lt;&lt; <span class="immd">imm</span></td>      </tr>      <tr>          <td><span class="inst">slti</span> <span class="rgtr">rd</span>, <span class="rgtr">rs1</span>, <span class="immd">imm</span></td>          <td>0x2</td>          <td></td>          <td><span class="vars">R</span>[<span class="rgtr">rd</span>] ← (<span class="vars">R</span>[<span class="rgtr">rs1</span>] &lt; <span class="immd">imm</span>) ? 1 : 0</td>      </tr>      <tr>          <td><span class="inst">sltiu</span> <span class="rgtr">rd</span>, <span class="rgtr">rs1</span>, <span class="immd">imm</span></td>          <td>0x3</td>          <td></td>          <td><span class="vars">R</span>[<span class="rgtr">rd</span>] ← (<span class="func">U</span>(<span class="vars">R</span>[<span class="rgtr">rs1</span>]) &lt; <span class="func">U</span>(<span class="immd">imm</span>)) ? 1 : 0 </td>      </tr>      <tr>          <td><span class="inst">xori</span> <span class="rgtr">rd</span>, <span class="rgtr">rs1</span>, <span class="immd">imm</span></td>          <td>0x4</td>          <td></td>          <td><span class="vars">R</span>[<span class="rgtr">rd</span>] ← <span class="vars">R</span>[<span class="rgtr">rs1</span>] ^ <span class="immd">imm</span></td>      </tr>      <tr>          <td><span class="inst">srli</span> <span class="rgtr">rd</span>, <span class="rgtr">rs1</span>, <span class="immd">imm</span></td>          <td>0x5</td>          <td>0x00</td>          <td><span class="vars">R</span>[<span class="rgtr">rd</span>] ← <span class="vars">R</span>[<span class="rgtr">rs1</span>] &gt;&gt; <span class="immd">imm</span></td>      </tr>      <tr>          <td><span class="inst">srai</span> <span class="rgtr">rd</span>, <span class="rgtr">rs1</span>, <span class="immd">imm</span></td>          <td>0x5</td>          <td>0x20</td>          <td><span class="vars">R</span>[<span class="rgtr">rd</span>] ← <span class="vars">R</span>[<span class="rgtr">rs1</span>] &gt;&gt; <span class="immd">imm</span></td>      </tr>      <tr>          <td><span class="inst">ori</span> <span class="rgtr">rd</span>, <span class="rgtr">rs1</span>, <span class="immd">imm</span></td>          <td>0x6</td>          <td></td>          <td><span class="vars">R</span>[<span class="rgtr">rd</span>] ← <span class="vars">R</span>[<span class="rgtr">rs1</span>] | <span class="immd">imm</span></td>      </tr>      <tr>          <td><span class="inst">andi</span> <span class="rgtr">rd</span>, <span class="rgtr">rs1</span>, <span class="immd">imm</span></td>          <td>0x7</td>          <td></td>          <td><span class="vars">R</span>[<span class="rgtr">rd</span>] ← <span class="vars">R</span>[<span class="rgtr">rs1</span>] &amp; <span class="immd">imm</span></td>      </tr>      <tr>          <td><span class="inst">jalr</span> <span class="rgtr">rd</span>, <span class="rgtr">rs1</span>, <span class="immd">imm</span></td>          <td>0x67</td>          <td>0x0</td>          <td></td>          <td class="c8">              <span class="vars">R</span>[<span class="rgtr">rd</span>] ← <span class="vars">PC</span>  +  <span class="lite">4</span>              <br>              <span class="vars">PC</span> ← <span class="vars">R</span>[<span class="rgtr">rs1</span>] + <span class="immd">imm</span>          </td>      </tr>      <tr>          <td><span class="inst">ecall</span>          </td><td>0x73</td>          <td>0x0</td>          <td>0x000</td>          <td class="c8">              <span>(Transfers control to operating system)</span>              <br>              <span class="rgtr">a0</span> = <span class="immd">1</span> is print value of <span class="rgtr">a1</span> as an integer.              <br>              <span class="rgtr">a0</span> = <span class="immd">4</span> is print the string at address <span class="rgtr">a1</span>.              <br>              <span class="rgtr">a0</span> = <span class="immd">10</span> is exit or end of code indicator.              <br>              <span class="rgtr">a0</span> = <span class="immd">11</span> is print value of <span class="rgtr">a1</span> as a character.          </td>      </tr>      <tr>          <td><span class="inst">sb</span> <span class="rgtr">rs2</span>, <span class="immd">offset</span>(<span class="rgtr">rs1</span>)</td>          <td rowspan="3">S</td>          <td rowspan="3">0x23</td>          <td>0x0</td>          <td></td>          <td><span class="func">Mem</span>(<span class="vars">R</span>[<span class="rgtr">rs1</span>] + <span class="immd">offset</span>) ← <span class="vars">R</span>[<span class="rgtr">rs2</span>][7:0]</td>      </tr>      <tr>          <td><span class="inst">sh</span> <span class="rgtr">rs2</span>, <span class="immd">offset</span>(<span class="rgtr">rs1</span>)</td>          <td>0x1</td>          <td></td>          <td><span class="func">Mem</span>(<span class="vars">R</span>[<span class="rgtr">rs1</span>] + <span class="immd">offset</span>) ← <span class="vars">R</span>[<span class="rgtr">rs2</span>][15:0]</td>      </tr>      <tr>          <td><span class="inst">sw</span> <span class="rgtr">rs2</span>, <span class="immd">offset</span>(<span class="rgtr">rs1</span>)</td>          <td>0x2</td>          <td></td>          <td><span class="func">Mem</span>(<span class="vars">R</span>[<span class="rgtr">rs1</span>] + <span class="immd">offset</span>) ← <span class="vars">R</span>[<span class="rgtr">rs2</span>]</td>      </tr>      <tr>          <td><span class="inst">beq</span> <span class="rgtr">rs1</span>, <span class="rgtr">rs2</span>, <span class="immd">offset</span></td>          <td rowspan="6">SB</td>          <td rowspan="6">0x63</td>          <td>0x0</td>          <td></td>          <td class="c8">              if(<span class="vars">R</span>[<span class="rgtr">rs1</span>] == <span class="vars">R</span>[<span class="rgtr">rs2</span>])               <br>              &nbsp;<span class="vars">PC</span> ← <span class="vars">PC</span> + {<span class="immd">offset</span>, 1b'0}          </td>      </tr>      <tr>          <td><span class="inst">bne</span> <span class="rgtr">rs1</span>, <span class="rgtr">rs2</span>, <span class="immd">offset</span></td>          <td>0x1</td>          <td></td>          <td class="c8">              if(<span class="vars">R</span>[<span class="rgtr">rs1</span>] != <span class="vars">R</span>[<span class="rgtr">rs2</span>])               <br>              &nbsp;<span class="vars">PC</span> ← <span class="vars">PC</span> + {<span class="immd">offset</span>, 1b'0}          </td>      </tr>      <tr>          <td><span class="inst">blt</span> <span class="rgtr">rs1</span>, <span class="rgtr">rs2</span>, <span class="immd">offset</span></td>          <td>0x4</td>          <td></td>          <td class="c8">              if(<span class="vars">R</span>[<span class="rgtr">rs1</span>] &lt; <span class="vars">R</span>[<span class="rgtr">rs2</span>])               <br>              &nbsp;<span class="vars">PC</span> ← <span class="vars">PC</span> + {<span class="immd">offset</span>, 1b'0}          </td>      </tr>      <tr>          <td><span class="inst">bge</span> <span class="rgtr">rs1</span>, <span class="rgtr">rs2</span>, <span class="immd">offset</span></td>          <td>0x5</td>          <td></td>          <td class="c8">              if(<span class="vars">R</span>[<span class="rgtr">rs1</span>] &gt;= <span class="vars">R</span>[<span class="rgtr">rs2</span>])               <br>              &nbsp;<span class="vars">PC</span> ← <span class="vars">PC</span> + {<span class="immd">offset</span>, 1b'0}          </td>      </tr>      <tr>          <td><span class="inst">bltu</span> <span class="rgtr">rs1</span>, <span class="rgtr">rs2</span>, <span class="immd">offset</span></td>          <td>0x6</td>          <td></td>          <td class="c8">              if(<span class="func">U</span>(<span class="vars">R</span>[<span class="rgtr">rs1</span>]) &lt; <span class="func">U</span>(<span class="vars">R</span>[<span class="rgtr">rs2</span>]))               <br>              &nbsp;<span class="vars">PC</span> ← <span class="vars">PC</span> + {<span class="immd">offset</span>, 1b'0}          </td>      </tr>      <tr>          <td><span class="inst">bgeu</span> <span class="rgtr">rs1</span>, <span class="rgtr">rs2</span>, <span class="immd">offset</span></td>          <td>0x7</td>          <td></td>          <td class="c8">              if(<span class="func">U</span>(<span class="vars">R</span>[<span class="rgtr">rs1</span>]) &gt;= <span class="func">U</span>(<span class="vars">R</span>[<span class="rgtr">rs2</span>]))               <br>              &nbsp;<span class="vars">PC</span> ← <span class="vars">PC</span> + {<span class="immd">offset</span>, 1b'0}          </td>      </tr>      <tr>          <td><span class="inst">auipc</span> <span class="rgtr">rd</span>, <span class="immd">offset</span></td>          <td rowspan="2">U</td>          <td>0x17</td>          <td></td>          <td></td>          <td><span class="vars">R</span>[<span class="rgtr">rd</span>] ← PC + {<span class="immd">offset</span>, 12b'0}</td>      </tr>      <tr>          <td><span class="inst">lui</span> <span class="rgtr">rd</span>, <span class="immd">offset</span></td>          <td>0x37</td>          <td></td>          <td></td>          <td><span class="vars">R</span>[<span class="rgtr">rd</span>] ← {<span class="immd">offset</span>, 12b'0}</td>      </tr>      <tr>          <td><span class="inst">jal</span> <span class="rgtr">rd</span>, <span class="immd">offset</span></td>          <td>UJ</td>          <td>0x6f</td>          <td></td>          <td></td>          <td class="c8">              <span class="vars">R</span>[<span class="rgtr">rd</span>] ← <span class="vars">PC</span>  +  <span class="lite">4</span>              <br>              <span class="vars">PC</span> ← <span class="vars">PC</span> + {<span class="immd">imm</span>, 1b'0}          </td>      </tr>  </tbody></table><p><strong>NOTE:</strong> Since our assembler is a one-pass assembler, the <strong>offset</strong> in <strong>SB</strong> and <strong>U</strong> type and <strong>imm</strong> in <strong>UJ</strong> type will be integers.</p><p>The pseudo-instructions are:</p><table><thead><tr><th>PSEUDO-INSTRUCTION</th><th>FORMAT</th><th>USES</th></tr></thead><tbody><tr><td>Branch on Equal to Zero</td><td>beqz rs1, label</td><td>beq</td></tr><tr><td>Branch on not Equal to Zero</td><td>bnez rs1, label</td><td>bne</td></tr><tr><td>Jump</td><td>j label</td><td>jal</td></tr><tr><td>Jump Register</td><td>jr rs1</td><td>jalr</td></tr><tr><td>Load Immediate</td><td>li rd, immediate</td><td>lui, addi</td></tr><tr><td>Move</td><td>mv rd, rs1</td><td>addi</td></tr></tbody></table><p>For further reference, here are the bit lengths of the instruction components.</p><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>R-TYPE</td><td>funct7</td><td>rs2</td><td>rs1</td><td>funct3</td><td>rd</td><td>opcode</td></tr><tr><td>Bits</td><td>7</td><td>5</td><td>5</td><td>3</td><td>5</td><td>7</td></tr></tbody></table><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>I-TYPE</td><td>imm[11:0]</td><td>rs1</td><td>funct3</td><td>rd</td><td>opcode</td></tr><tr><td>Bits</td><td>12</td><td>5</td><td>3</td><td>5</td><td>7</td></tr></tbody></table><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>S-TYPE</td><td>imm[11:5]</td><td>rs2</td><td>rs1</td><td>funct3</td><td>imm[4:0]</td><td>opcode</td></tr><tr><td>Bits</td><td>7</td><td>5</td><td>5</td><td>3</td><td>5</td><td>7</td></tr></tbody></table><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>SB-TYPE</td><td>imm[12]</td><td>imm[10:5]</td><td>rs2</td><td>rs1</td><td>funct3</td><td>imm[4:1]</td><td>imm[11]</td><td>opcode</td></tr><tr><td>Bits</td><td>1</td><td>6</td><td>5</td><td>5</td><td>3</td><td>4</td><td>1</td><td>7</td></tr></tbody></table><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>U-TYPE</td><td>imm[31:12]</td><td>rd</td><td>opcode</td></tr><tr><td>Bits</td><td>20</td><td>5</td><td>7</td></tr></tbody></table><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>UJ-TYPE</td><td>imm[20]</td><td>imm[10:1]</td><td>imm[11]</td><td>imm[19:12]</td><td>rd</td><td>opcode</td></tr><tr><td>Bits</td><td>1</td><td>10</td><td>1</td><td>8</td><td>5</td><td>7</td></tr></tbody></table><h2 id="Getting-Started">Getting Started</h2><h3 id="File-Structure-and-Usage">File Structure and Usage</h3><p>The directory tree of the framework should like the following:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.</span><br><span class="line">├── inc</span><br><span class="line">│   ├── assembler.h</span><br><span class="line">│   └── util.h</span><br><span class="line">├── Makefile</span><br><span class="line">├── main.c</span><br><span class="line">├── src</span><br><span class="line">│   ├── assembler.c</span><br><span class="line">│   └── util.c</span><br><span class="line">└── test</span><br><span class="line">    ├── test.ref</span><br><span class="line">    └── test.S</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>main.c is the entry of the whole assembler. You should not modify this file.</p><p>assembler.c and assembler.h are where you implement the assembler function.</p><p>util.c and util.h contain some helper functions. You can also add useful functions there.</p><p>test directory contains a basic test and the correspoding result.</p><h3 id="Build-Execute">Build &amp; Execute</h3><ol><li>Run make to compile the code and assembler executable file will be main</li><li>Or you can build the code with CMake. First make a directory build. Then run cmake .. &amp;&amp; make under build. The executable file will be build/main</li><li>To run the assembler, type main input_file output_file . input_file contains RISC-V instructions (see below for detailed description). output_file is where you output your results to.</li><li>Run make test to test your codes with test/test.S and your output file will be test/test.out</li></ol><h3 id="Input-Output">Input &amp; Output</h3><h4 id="Input">Input</h4><p>Input will be a file containing RISC-V instructins. You can assume there are no empty rows and comments and each line ends with a <code>\n</code>. We will use <strong>space</strong> as delimiter instead of comma, e.g. <strong>add x1 x2 x3</strong>.</p><h4 id="Output">Output</h4><p>Output shoud be RISC-V machine codes. You should use function dump_code in src/util.c when outputing machine codes. This function will requrie a file handler and a uint32_t variable as parameters, which should be the output file and code to be dumped. Do not use your own output function, otherwise, there may be format problems. Also, do no change the output format in dump_code since we will use your util.c when grading.</p><h3 id="Error-Handling">Error Handling</h3><p>If the input file contains some illegal instructions, you should find it and output error information to the output file. You should use function dump_error_information in src/util.c for outputing error information. Once an error occurs, you should continue to assemble the rest instructions and keep outputing results and errors. Also, you should not directly finish the whole program using exit. Quiting unexpectedly will be viewed as run time error.</p><p>To simplify the error handling part, we promise that there will only be one space between each string. Also, you do not need to handle cases where there are more or less parameters in an instruction, like addi a0 a1 or addi a0 a0 a0 1. Load/Store instructions will always be the correct format, e.g. lw a0 0(a1). But the correctness of registers and offset is not guaranteed.</p><p>Here are situations you need to consider in this project:</p><ol><li>Non-existent instruction: All supported instructions are listed above and any other instrcutions should be viewed as illegal.</li><li>Bad registers: Wrong names of register or registers which are out of scope should be detected, e.g. rp, x32. You don't need to handle situations like x01 and a-1</li><li>Bad immediate or offset: The imm or offset in instructions may not be a number, e.g. addi a0 a1 a0.</li><li>Immediate out of range: The immediate in some instructions should be limited into some scope, since the number of bits to represent imm is limited. For example, imm in addi should be between -2048 and 2047. You can refer to <a href="https://venus.cs61c.org/">Venus</a> and the <a href="https://toast-lab.sist.shanghaitech.edu.cn/courses/CS110@ShanghaiTech/Spring-2024/project/p1.1/Project%201.1%20-%20Computer%20Architecture%20I%20-%20ShanghaiTech%20University_files/riscv-spec-20191213.pdf">RISC-V manual</a> for more information about the limitation.</li></ol><h2 id="Testing">Testing</h2><h3 id="Diff">Diff</h3><p>Use diff file1 file2 to compare your output with the reference answer. Note that we will use diff to check your answer. To see how to interpret diff results, <a href="https://en.wikipedia.org/wiki/Diff#Usage">click here</a></p><h3 id="Valgrind">Valgrind</h3><p>To check memory leak, you can use Valgrind by running valgrind --tool=memcheck --leak-check=full --track-origin=yes main input_file output_file</p><h3 id="Venus">Venus</h3><p>Venus is a powerful assembler and you can use Venus to test the correctness of your code.</p><p>First type RISC-V instructions at the editor page. Then at the simulator page, you can see the machine code of each instruction. You can also use Dump button to collect all machine codes as a reference.</p><h2 id="Tips">Tips</h2><ol><li>Immediate in auipc and lui should be between 0 and 1048575. Venus views this immediate as an unsigned integer by defulat, while the official manual does not mention this. We choose to follow Venus. For auipc, since the starting address of text is smaller than that of data, PC-relative addresses are always larger than current PC, causing non-negative offset. For lui, it will load upper part of the immediate into the register, which does not care about the sign.</li><li>Immediate in jal should be between -1048576 and 1048575. Venus does not limit this immediate for some reasons, even if immediates out of this range can not be represented. However, we are going to follow the hardware limitation.</li><li>This project needs a lot of spliting operations. You may find strtok useful.</li><li>You need to check whether the immediate in li instruction is between -2048 and 2047. If so, li should be translated into only one addi instruction. Otherwise, it will be translated into lui and addi</li><li>Try to generate your own test cases. Codes need testing.</li><li>Don't forget writing comments frequently.</li></ol><h2 id="Submission">Submission</h2><p>You should submit your code via Github. Please follow the guidance in Gradescope to submit your codes on Github. Note that we will not use your main.c or Makefile for grading. The compilation flag will be <code>-Wpedantic -Wall -Wextra -Wvla -Werror -std=c11</code>.</p><hr><p>In Project 1 are,</p><p>Chundong Wang &lt;<code>wangchd</code> AT <code>shanghaitech.edu.cn</code>&gt;<br>Siting Liu &lt;<code>liust</code> AT <code>shanghaitech.edu.cn</code>&gt;</p><p>and,</p><p>Linjie Ma &lt;<code>malj</code> AT <code>shanghaitech.edu.cn</code>&gt;<br>Suting Chen &lt;<code>chenst</code> AT <code>shanghaitech.edu.cn</code>&gt;<br>Luojia Hu &lt;<code>hulj</code> AT <code>shanghaitech.edu.cn</code>&gt;</p><p>Last modified: 2024-03-19</p>]]></content>
    
    
    <summary type="html">A RISC-V Assembler (Individual Project)</summary>
    
    
    
    <category term="学习" scheme="https://zivmax.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机科学" scheme="https://zivmax.top/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
    <category term="CS110" scheme="https://zivmax.top/tags/CS110/"/>
    
    <category term="作业" scheme="https://zivmax.top/tags/%E4%BD%9C%E4%B8%9A/"/>
    
    <category term="上科大" scheme="https://zivmax.top/tags/%E4%B8%8A%E7%A7%91%E5%A4%A7/"/>
    
    <category term="计算机体系架构" scheme="https://zivmax.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>CS110 Homework [2]</title>
    <link href="https://zivmax.top/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/03/26/CS110/CS110-Homework-2/"/>
    <id>https://zivmax.top/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/03/26/CS110/CS110-Homework-2/</id>
    <published>2024-03-26T03:21:15.000Z</published>
    <updated>2024-04-03T06:30:52.908Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><em><strong>HW 1 on Gradescope!</strong></em></p><p>Fetch the homework <a href="https://classroom.github.com/a/pwC6ijm6">here</a> on Github classroom, you will use Github for version control and Gradescope for submission.</p><span id="more"></span><h1 id="Homework-2-of-CS110-2024-Spring">Homework 2 of CS110 2024 Spring</h1><p><a href="https://toast-lab.sist.shanghaitech.edu.cn/courses/CS110@ShanghaiTech/Spring-2024/index.html">Computer Architecture I</a> @ <a href="https://www.shanghaitech.edu.cn/">ShanghaiTech University</a></p><h2 id="Introduction">Introduction</h2><p>Please write a program that takes 32-bit binary strings as input, simulates the addition operation of IEEE 754 single-precision floating-point numbers, and outputs the binary representation of the sum.<br>Before you begin, make sure that you understand the following concepts:</p><ol><li>Sign bit (1 bit), exponent bits (8 bits), and mantissa bits (23 bits).</li><li>The IEEE 754 standard stores a biased exponent, the bias of normalized numbers is different from that of denormalized numbers.</li><li>There are several possible representations of zero, infinity, and NaN.</li></ol><p>As stated in the lecture slides, the steps of the addition operation are as follows:</p><ol><li>Align the exponents of the two floating-point numbers to make them equal.</li><li>Add the two mantissa to get the result mantissa.</li><li>Normalize the result mantissa to ensure that the number of mantissa bits meets the standard requirements.</li><li>If the result mantissa overflows, perform rounding and adjust the exponent.</li></ol><p>If you have trouble understanding the concepts, you may try <a href="http://weitz.de/ieee/">this</a> tiny calculator.<br>Note that this calculator uses <strong>round to nearest, ties to even</strong> as the rounding method, which is different from the rounding method we use in this assignment.</p><h2 id="Specification">Specification</h2><h3 id="Input">Input</h3><p>We guarantee that the input bitstring shall never be NaN, infinity, or zero.</p><h3 id="Precision">Precision</h3><p>Before calculating the mantissa, we add three extra bits to preserve the precision of the result. The three extra bits are the guard bit, the round bit, and the sticky bit.<br>Here is a brief explanation of these bits:</p><pre><code>Mantissa of the number (assume normalized): 1.XXXXXXXXXXXXXXXXXXXXXXX   0   0   0 ^         ^                 ^   ^   ^ |         |                 |   |   | |         |                 |   |   -  sticky bit (s) |         |                 |   -  round bit (r) |         |                 -  guard bit (g) |         -  23-bit mantissa from a representation -  hidden bit</code></pre><p>The guard bit and the round bit are the two bits immediately to the right of the least significant bit of the mantissa. They simply give two extra bits of precision. The sticky bit is an indication of whether there are any non-zero bits to the right of the round bit.</p><pre><code>                                          g r sInitial:        1.11000000000000000010100 0 0 0Shift 1 bit:    0.11100000000000000001010 0 0 0Shift 2 bits:   0.01110000000000000000101 0 0 0Shift 3 bits:   0.00111000000000000000010 1 0 0Shift 4 bits:   0.00011100000000000000001 0 1 0Shift 5 bits:   0.00001110000000000000000 1 0 1Shift 6 bits:   0.00000111000000000000000 0 1 1Shift 7 bits:   0.00000011100000000000000 0 0 1Shift 8 bits:   0.00000001110000000000000 0 0 1</code></pre><p>After the mantissa calculation and the normalization, the result mantissa should be rounded to 23 bits.</p><h3 id="Rounding">Rounding</h3><p>In this assignment, we use truncation as the rounding method.<br>Truncation, so-called &quot;round-towards-zero&quot;, is a method of rounding towards the nearest integer by dropping the fractional part of the number.</p><h3 id="Submission">Submission</h3><p>Upload <code>FloatCalculate.c</code> and <code>FloatCalculate.h</code> to Gradescope and wait for the result.</p><h3 id="Notice">Notice</h3><p>We have provided a <code>test.c</code> for you to generate new testcases and find the correct answer. You can use it to test your program.<br>You might notice that a possible trick for bypassing the calculation is to convert the input bitstring to a (builtin) <code>float</code> and then use the <code>float</code> to do the rest of the calculation.<br>However, this is <strong>NOT ALLOWED</strong> in this assignment. We will check the validity of your program both automatically and manually.<br>On the autograder, we had banned those function calls that would change the rounding mode, like <code>fesetround(FE_TOWARDZERO)</code>. We have also banned inline assembly <code>asm</code>, <code>__asm</code>, and <code>__asm__</code> in the autograder.<br>In the template, we have provided <code>CMakeLists.txt</code> and <code>Makefile</code> to help you compile the program. You can choose either of them. They will not be submitted to Gradescope anyway.</p><h2 id="Code-quality">Code quality</h2><ul><li>Your code with be compiled with <code>-Wpedantic -Wall -Wextra -Wvla -Werror -std=c11</code></li><li>No memory leak is allowed, <code>Valgrind</code> will be used to detect memory leaks on runtime.</li></ul><hr><p>The following TA(s) are responsible for this homework:</p><p>Suting Chen <chenst at shanghaitech.edu.cn><br>Li Zhu <zhuli2023 at shanghaitech.edu.cn><br>Letong Han <hanlt at shanghaitech.edu.cn></hanlt></zhuli2023></chenst></p><p>The description of three extra bits is adapted from &quot;Floating Point Representation&quot; by Karen Miller, 2006.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;&lt;strong&gt;HW 1 on Gradescope!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Fetch the homework &lt;a href=&quot;https://classroom.github.com/a/pwC6ijm6&quot;&gt;here&lt;/a&gt; on Github classroom, you will use Github for version control and Gradescope for submission.&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://zivmax.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机科学" scheme="https://zivmax.top/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
    <category term="CS110" scheme="https://zivmax.top/tags/CS110/"/>
    
    <category term="作业" scheme="https://zivmax.top/tags/%E4%BD%9C%E4%B8%9A/"/>
    
    <category term="上科大" scheme="https://zivmax.top/tags/%E4%B8%8A%E7%A7%91%E5%A4%A7/"/>
    
    <category term="计算机体系架构" scheme="https://zivmax.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>CS110 Lab [4]</title>
    <link href="https://zivmax.top/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/03/26/CS110/CS110-Lab-4/"/>
    <id>https://zivmax.top/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/03/26/CS110/CS110-Lab-4/</id>
    <published>2024-03-26T03:18:08.000Z</published>
    <updated>2024-04-03T06:31:57.749Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><strong>Goals</strong></p><ul><li>calling conventions, including prologue and epilogue.</li><li>manipulating stack pointer in RISC-V.</li></ul><span id="more"></span><h1 id="Lab-4">Lab 4</h1><p><a href="https://toast-lab.sist.shanghaitech.edu.cn/courses/CS110@ShanghaiTech/Spring-2024/">Computer Architecture I</a> <a href="http://www.shanghaitech.edu.cn/">ShanghaiTech University</a></p><h2 id="Exercises">Exercises</h2><p>Download source code from <a href="https://toast-lab.sist.shanghaitech.edu.cn/courses/CS110@ShanghaiTech/Spring-2024/labs/Lab4/lab4/lab4.zip">here</a>.</p><h3 id="Exercise-1-calling-convention-checker">Exercise 1: calling convention checker</h3><p>This exercise uses the file <code>ex1.s</code>.</p><p>A quick recap of RISC-V calling conventions: all functions that overwrite registers, which are preserved across function calls by convention must have a prologue. This prologue saves those register values to the stack at the start of the function. Along with the prologue is the epilogue, which restores those values for the function's caller. You can find a more detailed explanation along with some concrete examples in <a href="https://inst.eecs.berkeley.edu/%7Ecs61c/resources/RISCV_Calling_Convention.pdf">these notes</a>.</p><p>Bugs due to calling convention violations can often be difficult to detect manually, so Venus provides a way to automatically report some of these errors at runtime.</p><p>Take a look at the contents of the <code>ex1.s</code> file, particularly at the <code>main</code>, <code>simple_fn</code>, <code>naive_mod</code>, <code>mul_arr</code>, and <code>helper_fn</code> functions. Enable the CC checker in Venus-Settings-Calling Convention, then run the program in the simulator. You should see an output similar to the following:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[CC Violation]: (PC=0x00000080) Usage of unset register t0! editor.S:57 addi a0, t0, 2024</span><br><span class="line">[CC Violation]: (PC=0x0000008C) Setting of a saved register (s0) which has not been saved! editor.S:78 mv s0, a0</span><br><span class="line">[CC Violation]: (PC=0x00000094) Setting of a saved register (s0) which has not been saved! editor.S:81 sub s0, s0, a1</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>Find the source of each of the errors reported by the CC checker and fix it. You can find a list of CC error messages, as well as their meanings, in the <a href="https://inst.eecs.berkeley.edu/%7Ecs61c/su21/resources/venus-reference/#calling-convention-checker">Venus reference</a>.</p><p>Once you've fixed all the violations reported by the CC checker, the code might still fail: this is likely because there's still some remaining calling convention errors that Venus doesn't report. Since function calls in assembly language are basically just jumps, to avoid false positives, Venus can't report these violations without more information. (citation needed)</p><p>The fixes for all of these errors (both the ones reported by the CC checker and the ones it can't find) should be added near the lines marked by the <code>FIXME</code> comments in the starter code.</p><p><strong>Note:</strong> Venus's calling convention checker will not report all calling convention bugs; it is intended to be used as a sanity check. Most importantly, it will only look for bugs in functions that are exported with the <code>.globl</code> directive - the meaning of <code>.globl</code> is explained in more detail in the <a href="https://inst.eecs.berkeley.edu/%7Ecs61c/su21/resources/venus-reference/#working-with-multiple-files">Venus reference</a>.</p><h3 id="Action-Item">Action Item</h3><p>Resolve all the calling convention errors in <code>ex1.s</code>, and answer the following questions:</p><ul><li>What causes the errors in <code>simple_fn</code>, <code>naive_mod</code>, and <code>mul_arr</code> that were reported by the Venus CC checker?</li><li>In RISC-V, we invoke functions by jumping to them and storing the return address in the <code>ra</code> register. Does calling convention apply to the jumps to the <code>naive_mod_loop</code> or <code>naive_mod_end</code> labels?</li><li>Why do we need to store <code>ra</code> in the prologue for <code>mul_arr</code>, but not in any other function?</li><li>Why wasn't the calling convention error in <code>helper_fn</code> reported by the CC checker? (Hint: it's mentioned above in the exercise instructions.)</li></ul><h3 id="Testing">Testing</h3><p>After fixing the errors with <code>FIXME</code> in <code>ex1.s</code>, run Venus locally with the command from the beginning of this exercise to make sure the behavior of the functions hasn't changed and that you've remedied all calling convention violations.</p><p>Once you have fixed everything, running the above Venus command should output the following:</p><p>Sanity checks passed! Make sure there are no CC violations.<br>Found 0 warnings!</p><h4 id="Checkoff">Checkoff</h4><ul><li>Show your TA your code and its test run.</li><li>Provide answers to the questions.</li></ul><h3 id="Exercise-2-RISC-V-recursion-with-hanoi-tower">Exercise 2: RISC-V recursion with <code>hanoi_tower</code></h3><p>This exercise uses the file <code>ex2.s</code>.</p><p>In this exercise, you will complete an implementation of <a href="https://en.wikipedia.org/wiki/Tower_of_Hanoi"><code>hanoi_tower</code></a> with recursion in RISC-V. We will only test some simplest cases just to verify the sanity of your implementation.</p><p>You will find it helpful to refer to the <a href="https://toast-lab.sist.shanghaitech.edu.cn/courses/CS110@ShanghaiTech/Spring-2023/lecture_notes/riscvcard.pdf">RISC-V green card</a> to complete this exercise. If you encounter any instructions or pseudo-instructions you are unfamiliar with, use this as a resource.</p><p>The Hanoi Tower is a very classical question and you might have already met it before. In this exercise, please implement the simplest 3 pegs' Hanoi Tower problem using the following C code:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> total_step = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">hanoi_tower</span><span class="params">(<span class="type">int</span> disk_num)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(disk_num == <span class="number">1</span>) &#123;</span><br><span class="line">    total_step++;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  hanoi_tower(disk_num - <span class="number">1</span>);</span><br><span class="line">  total_step++;</span><br><span class="line">  hanoi_tower(disk_num - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Due to the fact that the samantics of C and RISCV assembly differ, we do not require that your code has the same semantics as the C code, given that your code roughly follows the C code and <strong>you do use recursion</strong>.</p><h3 id="Action-Item-2">Action Item</h3><p>Complete the implementation of <code>hanoi_tower</code> below the annotation <code># YOUR CODE HERE #</code>. When you've finished the implementation, running the code in Venus locally should provide you with the following output:</p><p>Number of disks: 3<br>Total steps used: 7Found 0 warnings!</p><h4 id="Checkoff-2">Checkoff</h4><ul><li>Show your TA your test run.</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Goals&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;calling conventions, including prologue and epilogue.&lt;/li&gt;
&lt;li&gt;manipulating stack pointer in RISC-V.&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="学习" scheme="https://zivmax.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机科学" scheme="https://zivmax.top/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
    <category term="CS110" scheme="https://zivmax.top/tags/CS110/"/>
    
    <category term="作业" scheme="https://zivmax.top/tags/%E4%BD%9C%E4%B8%9A/"/>
    
    <category term="上科大" scheme="https://zivmax.top/tags/%E4%B8%8A%E7%A7%91%E5%A4%A7/"/>
    
    <category term="计算机体系架构" scheme="https://zivmax.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>CS110 Lab [3]</title>
    <link href="https://zivmax.top/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/03/26/CS110/CS110-Lab-3/"/>
    <id>https://zivmax.top/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/03/26/CS110/CS110-Lab-3/</id>
    <published>2024-03-26T03:17:40.000Z</published>
    <updated>2024-04-03T06:31:30.498Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><strong>Goals</strong></p><ul><li>Run and debug RISC-V assembly code.</li><li>Write RISC-V functions using the right calling procedure.</li><li>Get an idea of how to translate C code to RISC-V</li></ul><span id="more"></span><h1 id="Lab-3">Lab 3</h1><p><a href="https://toast-lab.sist.shanghaitech.edu.cn/courses/CS110@ShanghaiTech/Spring-2024/index.html">Computer Architecture I</a> @ <a href="https://www.shanghaitech.edu.cn/">ShanghaiTech University</a></p><h2 id="Exercises">Exercises</h2><p>Download the <a href="https://toast-lab.sist.shanghaitech.edu.cn/courses/CS110@ShanghaiTech/Spring-2024/labs/Lab3/lab3.zip">files</a> for Lab 3 first.</p><h2 id="Intro-to-Assembly-with-RISC-V-Simulator">Intro to Assembly with RISC-V Simulator</h2><p>So far, we have been dealing with C program files (.c file extension), and have been using the gcc compiler to execute these higher-level language programs. Now, we are learning about the RISC-V assembly language, which is a lower-level language much closer to machine code. For context, gcc takes the C code we write, first compiles this down to assembly code (gcc uses a more complex assembly language than RISC-V), and then assembles this down to machine code/binary.</p><p>In this lab, we will deal with several RISC-V assembly program files, each of which have a .s file extension. To run these, we will need to use a RISC-V simulator. The simulator we will use was developed by <a href="https://github.com/kvakil">Keyhan Vakil</a> and improved by <a href="https://github.com/ThaumicMekanism">Stephan Kaminsky</a>. The simulator is called <strong>Venus</strong> and can be found online <a href="https://venus.cs61c.org/">here</a>. We have deployed Venus on our Autolab server (<a href="https://autolab.sist.shanghaitech.edu.cn/venus/">link</a>).</p><h3 id="Assembly-Venus-Basics">Assembly/Venus Basics</h3><ul><li>Enter your RISC-V code in the “Editor” tab</li><li>Programs start at the first line regardless of the label. That means that the main function must be put first.</li><li>Programs end with an ecall with argument value 10. This signals for the program to exit. The ecall instructions are analogous to <a href="https://en.wikipedia.org/wiki/System_call">System Calls</a> and allow us to do things such as print to the console or request chunks of memory from the heap.</li><li>Labels end with a colon (😃.</li><li>Comments start with a pound sign (#).</li><li>You CANNOT put more than one instruction per line.</li><li>When you are done editing, click the “Simulator” tab to prepare for execution.</li></ul><p><strong>For the following exercises, please save your completed code in a file on your local machine. This is crucial for the checkoff portion to work.</strong></p><h2 id="Exercise-1-Familiarizing-yourself-with-Venus">Exercise 1: Familiarizing yourself with Venus</h2><p>Getting started:</p><ol><li>Paste the contents of <code>lab3_ex1.s</code> into the editor.</li><li>Click the “Simulator” tab. This will prepare the code you wrote for execution.</li><li>In the simulator, click “Assemble &amp; Simulate from Editor”</li><li>In the simulator, to execute the next instruction, click the “step” button.</li><li>To undo an instruction, click the “prev” button.</li><li>To run the program to completion, click the “run” button.</li><li>To reset the program from the start, click the “reset” button.</li><li>The contents of all 32 registers are on the right-hand side, and the console output is at the bottom</li><li>To view the contents of memory, click the “Memory” tab on the right. You can navigate to different portions of your memory using the dropdown menu at the bottom.</li></ol><h3 id="Action-Item">Action Item</h3><p>Record your answers to the following questions in a text file. Some of the questions will require you to run the RISC-V code using Venus’ simulator tab.</p><ol><li>What do the .data, .word, .text directives mean (i.e. what do you use them for)? <strong>Hint</strong>: think about the 4 sections of memory.</li><li>Run the program to completion. What number did the program output? What does this number represent?</li><li>At what address is n stored in memory? <strong>Hint</strong>: Look at the contents of the registers.</li><li>Without using the “Edit” tab, have the program calculate the 13th fib number (0-indexed) by <em>manually</em> modifying the value of a register. You may find it helpful to first step through the code. If you prefer to look at decimal values, change the “Display Settings” option at the bottom.</li></ol><h4 id="Check-off">Check-off</h4><p>Show your TA that you are able to run through the above steps and provide answers to the questions.</p><h2 id="Exercise-2-Translating-from-C-to-RISC-V">Exercise 2: Translating from C to RISC-V</h2><p>Open the files <code>lab3_ex2.c</code> and <code>lab3_ex2.s</code>. The assembly code provided (.s file) is a translation of the given C program into RISC-V.</p><h3 id="Action-Item-2">Action Item</h3><p>Find/explain the following components of the assembly file and put your answers in a text file.</p><ul><li>The register representing the variable k.</li><li>The registers acting as pointers to the source and dest arrays.</li><li>The assembly code for the loop found in the C code.</li><li>How the pointers are manipulated in the assembly code.</li></ul><p>After you’ve answered explained the above components, edit lab3_ex2.s so that it dest satisfies the following conditions.</p><ul><li>dest[i] = 2 * source[i] for even i</li><li>dest[i] = 1 for odd i</li></ul><p><strong>Hint</strong>: This can be done by adding one line of code and modifying another (in other words, you only need to make 2 changes). Look at the initial values of dest; how does this help you implement this modification?</p><p>Verify that your changes work for the given source and dest arrays by running your code in a new Venus tab and check that the output looks like:</p><p>3 1 4 1 5 9<br>6 1 8 1 10 1</p><h4 id="Check-off-2">Check-off</h4><p>Show lab3_ex2.s to your TA, and run it in Venus, which should give the correct result.</p><h2 id="Exercise-3-SquareSum">Exercise 3: SquareSum</h2><p>In this exercise, you will be implementing a function squareSum in RISC-V that calculates the summation of squares of integers n and returns ans. A stub of this function can be found in the file <code>lab3_ex3.s</code>. You will only need to add instructions under the squareSum label, and the arguments that are passed into the function are defined at the top of the file. You may solve this problem using either recursion or iteration.</p><p>The formula for the summation is as follows:</p><ul><li>ans = n^2 + (n-1)^2 + (n-2)^2 + ... + 1^2 for n &gt; 0</li><li>ans = 0 for n = 0</li><li>ans = n^2 + (n+1)^2 + (n+2)^2 + ... + (-1)^2 for n &lt; 0</li></ul><h3 id="Action-Item-3">Action Item</h3><p>Implement squareSum and make sure that the program can correctly output the answers when the inputs are -6, -3, 5, and 11.</p><h4 id="Check-off-3">Check-off</h4><p>Show lab3_ex3.s to your TA, and run it in Venus, which should give the correct result.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Goals&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run and debug RISC-V assembly code.&lt;/li&gt;
&lt;li&gt;Write RISC-V functions using the right calling procedure.&lt;/li&gt;
&lt;li&gt;Get an idea of how to translate C code to RISC-V&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="学习" scheme="https://zivmax.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机科学" scheme="https://zivmax.top/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
    <category term="CS110" scheme="https://zivmax.top/tags/CS110/"/>
    
    <category term="作业" scheme="https://zivmax.top/tags/%E4%BD%9C%E4%B8%9A/"/>
    
    <category term="上科大" scheme="https://zivmax.top/tags/%E4%B8%8A%E7%A7%91%E5%A4%A7/"/>
    
    <category term="计算机体系架构" scheme="https://zivmax.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>CS110 Lab 2</title>
    <link href="https://zivmax.top/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/03/26/CS110/CS110-Lab-2/"/>
    <id>https://zivmax.top/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/03/26/CS110/CS110-Lab-2/</id>
    <published>2024-03-26T03:14:52.000Z</published>
    <updated>2024-04-03T06:31:15.974Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><strong>Goals</strong></p><ul><li>Perform specific bit manipulations through compositions of bit operations.</li><li>Introduced to the C debugger and gain practical experience using gdb to debug C programs.</li><li>Identify potential issues with dynamic memory management.</li></ul><span id="more"></span><h1 id="Lab-2">Lab 2</h1><p><a href="https://toast-lab.sist.shanghaitech.edu.cn/courses/CS110@ShanghaiTech/Spring-2024/index.html">Computer Architecture I</a> @ <a href="https://www.shanghaitech.edu.cn/">ShanghaiTech University</a></p><h2 id="Exercises">Exercises</h2><p>Download the <a href="https://toast-lab.sist.shanghaitech.edu.cn/courses/CS110@ShanghaiTech/Spring-2024/labs/Lab2/lab2.tar">files</a> for Lab 2 first.</p><h3 id="Exercise-1-git-init-git-add-git-commit">Exercise 1: git init; git add; git commit</h3><p>After extracting the tar file with <code>tar</code> command, initialize a git repository in the lab2 directory and make your first commit.</p><h3 id="Exercise-2-vector-double">Exercise 2: vector<double></double></h3><p>First read <code>vector.h</code> and <code>vector.c</code><br>The four functions in <code>vector.h</code> are declared as follows:</p><ul><li><code>Vector *vector_create(void);</code></li><li><code>void vector_push(Vector *vector, double element);</code></li><li><code>double vector_get(Vector *vector, int index);</code></li><li><code>void vector_free(Vector *vector);</code></li></ul><p>Make sure you understand what every line of code is doing before moving on.</p><p>Tell the TA what <code>malloc()</code>, <code>realloc()</code>, and <code>free()</code> do.</p><p>This exercise will give some subtasks, you should make a git commit after each subtask to track your changes.</p><ol><li>Consider the cases where <code>malloc()</code> and <code>realloc()</code> fails, do necessary changes to make code work under these circumstances.</li><li>The code never check the <code>Vector *vector</code> passed to it is valid, modify the code to add a null check at the beginning of each function.</li><li>In function <code>vector_get()</code>, it is possible that the user visits a position that is not initialized, you should handle this case.</li><li>Some implementation suggests <code>void another_vector_free(Vector **vector)</code>, add this to your code. Explain why this could be beneficial.</li></ol><p>Show your TA the git commits after each subtask and make necessary explanations. You must compile your code with <code>Makefile</code> we've provided.</p><h3 id="Exercise-3-Catch-those-bugs">Exercise 3: Catch those bugs!</h3><p>A <strong>debugger</strong>, as the name suggests, is a program which is designed specifically to help you find bugs, or logical errors and mistakes in your code (side note: if you want to know why errors are called bugs, look <a href="https://www.quora.com/Why-are-errors-in-software-codes-called-bugs">here</a>). Different debuggers have different features, but it is common for all debuggers to be able to do the following things:</p><ul><li>Set a breakpoint in your program. A breakpoint is a specific line in your code where you would like to stop execution of the program so that you can take a look at what's going on nearby.</li><li>Step line-by-line through the program. Code only ever executes line by line, but it happens too quickly for us to figure out which lines cause mistakes. Being able to step line-by-line through your code allows you to hone in on exactly what is causing a bug in your program.</li></ul><p>For this exercise, you will find the <a href="https://toast-lab.sist.shanghaitech.edu.cn/courses/CS110@ShanghaiTech/Spring-2024/labs/Lab2/gdb5-refcard.pdf">GDB reference card</a> useful. GDB stands for &quot;GNU De-Bugger.&quot; 😃 Use the code you've written in the previous exercise to try the debugger.</p><p>This causes gcc to store information in the executable program for <code>gdb</code> to make sense of it. Now start our debugger, (c)gdb:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cgdb ./lab2</span></span><br></pre></td></tr></table></figure><p><strong>ACTION ITEM:</strong> step through the whole program by doing the following:</p><ol><li>setting a breakpoint at main</li><li>using gdb's run command</li><li>using gdb's single-step command</li></ol><p>Type help from within gdb to find out the commands to do these things, or use the reference card.</p><p><strong>Look here if you see an error message like printf.c: No such file or directory.</strong> You probably stepped into a printf function! If you keep stepping, you'll feel like you're going nowhere! GDB is complaining because you don't have the actual file where printf is defined. This is pretty annoying. To free yourself from this black hole, use the command finish to run the program until the current frame returns (in this case, until printf is finished). And <strong>NEXT</strong> time, use next to skip over the line which used printf.</p><p><strong>ACTION ITEM: Learn MORE gdb commands</strong> Learning these commands will prove useful for the rest of this lab, and your C programming career in general. Create a text file containing answers to the following questions (or write them down on a piece of paper, or just memorize them if you think you want to become a GDB pro).</p><ol><li>How do you <strong>pass command line arguments</strong> to a program when using gdb?</li><li>How do you <strong>set a breakpoint</strong> which only occurs when a <strong>set of conditions is true</strong> (e.g. when certain variables are a certain value)?</li><li>How do you <strong>execute the next line of C code</strong> in the program after stopping at a breakpoint?</li><li>If the next line of code is a function call, you'll execute the whole function call at once if you use your answer to #3. (If not, consider a different command for #3!) How do you tell GDB that you <strong>want to debug the code inside the function</strong> instead? (If you changed your answer to #3, then that answer is most likely now applicable here.)</li><li>How do you <strong>resume the program after stopping</strong> at a breakpoint?</li><li>How can you <strong>see the value of a variable</strong> (or even an expression like 1+2) in gdb?</li><li>How do you configure gdb so it <strong>prints the value of a variable after every step</strong> ?</li><li>How do you <strong>print a list of all variables and their values</strong> in the current function?</li><li>How do you <strong>exit</strong> out of gdb?</li></ol><p>Show your TA that you are able to run through the above steps and provide answers to the questions.</p><h3 id="Exercise-4-Memory-Management">Exercise 4: Memory Management</h3><p><a href="https://valgrind.org/">Valgrind</a> is an open-source framework built for dynamic analysis. In this course, we will use a very popular tool, memcheck, to detect any possible memory-related issue.</p><h4 id="Installation">Installation</h4><p>In linux, we can take advantage of package managers: <code>sudo apt install valgrind</code> (in Ubuntu) for minimal installation.</p><h4 id="Example-usages">Example usages</h4><p><strong>When there are no memleaks</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// File name: main.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">int</span> a = <span class="number">42</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can easily point out that this program with output <code>42</code> is memory safe.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">valgrind --tool=memcheck --leak-check=full --track-origins=<span class="built_in">yes</span> ./main</span></span><br></pre></td></tr></table></figure><p>Here's what <code>Valgrind</code> gives us, which indicate that no memleaks are detected.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">==371318== HEAP SUMMARY:</span><br><span class="line">==371318==     in use at exit: 0 bytes in 0 blocks</span><br><span class="line">==371318==   total heap usage: 1 allocs, 1 frees, 1,024 bytes allocated</span><br><span class="line">==371318==</span><br><span class="line">==371318== All heap blocks were freed -- no leaks are possible</span><br><span class="line">==371318==</span><br><span class="line">==371318== For lists of detected and suppressed errors, rerun with: -s</span><br><span class="line">==371318== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)</span><br></pre></td></tr></table></figure><p><strong>When there are memleaks:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// File name: memleak.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">int</span> a = <span class="number">42</span>;</span><br><span class="line">  <span class="type">char</span> *normal = <span class="built_in">malloc</span>(<span class="number">135</span>);</span><br><span class="line">  <span class="type">char</span> *leak = <span class="built_in">malloc</span>(<span class="number">246</span>);</span><br><span class="line">  leak[<span class="number">0</span>] = <span class="string">&#x27;q&#x27;</span>;  <span class="comment">// Avoid unused variable warning</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line">  <span class="built_in">free</span>(normal);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this example, we allocated memory from heap for variable <code>leak</code> , but the call to <code>free()</code> for the variable is missing, causing us to fail Gradescope test 😦<br>We compile with <code>gcc -Wpedantic -Wall -Wextra -Wvla -Werror memleak.c -o memleak</code> to make sure there are no warnings, which means that compiler (<code>gcc</code>) is unable to find any potential issues.<br>Now we harness the power of <code>Valgrind</code> to detect the issue:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">valgrind --tool=memcheck --leak-check=full --track-origins=<span class="built_in">yes</span> ./memleak</span></span><br><span class="line"></span><br><span class="line">==372058== HEAP SUMMARY:</span><br><span class="line">==372058==     in use at exit: 246 bytes in 1 blocks</span><br><span class="line">==372058==   total heap usage: 3 allocs, 2 frees, 1,405 bytes allocated</span><br><span class="line">==372058==</span><br><span class="line">==372058== 246 bytes in 1 blocks are definitely lost in loss record 1 of 1</span><br><span class="line">==372058==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)</span><br><span class="line">==372058==    by 0x1091B3: main (in /home/caoster/Desktop/temp/memleak)</span><br><span class="line">==372058==</span><br><span class="line">==372058== LEAK SUMMARY:</span><br><span class="line">==372058==    definitely lost: 246 bytes in 1 blocks</span><br><span class="line">==372058==    indirectly lost: 0 bytes in 0 blocks</span><br><span class="line">==372058==      possibly lost: 0 bytes in 0 blocks</span><br><span class="line">==372058==    still reachable: 0 bytes in 0 blocks</span><br><span class="line">==372058==         suppressed: 0 bytes in 0 blocks</span><br><span class="line">==372058==</span><br><span class="line">==372058== For lists of detected and suppressed errors, rerun with: -s</span><br><span class="line">==372058== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)</span><br></pre></td></tr></table></figure><p>We can tell from above that:</p><ol><li>When we exit the program, there are still 246 bytes on the heap that belongs to us.</li><li>The missing 246 bytes were allocated in <code>main</code> with <code>malloc()</code>.</li><li>...</li></ol><p>By adding more options/flags of <code>Valgrind</code>, there are absolutely more messages to reveal. <strong>What's more:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">int</span> a[<span class="number">5</span>] = &#123;<span class="number">13</span>, <span class="number">24</span>, <span class="number">35</span>, <span class="number">46</span>, <span class="number">57</span>&#125;;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a[<span class="number">5</span>]);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>With <code>Valgrind</code>, we can find those uninitialized visits effortlessly (only a fraction of the message is shown here):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">==373455== Conditional jump or move depends on uninitialised value(s)</span><br><span class="line">==373455==    at 0x48EFB56: __vfprintf_internal (vfprintf-internal.c:1516)</span><br><span class="line">==373455==    by 0x48D981E: printf (printf.c:33)</span><br><span class="line">==373455==    by 0x1091BF: main (in /home/caoster/Desktop/temp/main)</span><br><span class="line">==373455==  Uninitialised value was created by a stack allocation</span><br><span class="line">==373455==    at 0x109169: main (in /home/caoster/Desktop/temp/main)</span><br></pre></td></tr></table></figure><p>Time is limited, so we <strong>won't</strong> check upon this part, but please make sure that you understand the usage of <code>Valgrind</code> and the messages it gives you.<br>Throughout the course, you will be asked to submit code with no memory issues.</p><hr><p>The following TA(s) are responsible for this lab:</p><p>Suting Chen &lt;<code>chenst</code> AT <code>shanghaitech.edu.cn</code>&gt;</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Goals&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Perform specific bit manipulations through compositions of bit operations.&lt;/li&gt;
&lt;li&gt;Introduced to the C debugger and gain practical experience using gdb to debug C programs.&lt;/li&gt;
&lt;li&gt;Identify potential issues with dynamic memory management.&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="学习" scheme="https://zivmax.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机科学" scheme="https://zivmax.top/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
    <category term="CS110" scheme="https://zivmax.top/tags/CS110/"/>
    
    <category term="作业" scheme="https://zivmax.top/tags/%E4%BD%9C%E4%B8%9A/"/>
    
    <category term="上科大" scheme="https://zivmax.top/tags/%E4%B8%8A%E7%A7%91%E5%A4%A7/"/>
    
    <category term="计算机体系架构" scheme="https://zivmax.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>CS110 Lab [1]</title>
    <link href="https://zivmax.top/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/03/26/CS110/CS110-Lab-1/"/>
    <id>https://zivmax.top/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/03/26/CS110/CS110-Lab-1/</id>
    <published>2024-03-26T03:13:11.000Z</published>
    <updated>2024-04-03T06:31:12.143Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><strong>Goals</strong></p><ul><li>Setup your Linux.</li><li>Setup Gradescope.</li><li>Learn some simple C programming.</li><li>Learn basic linux commands.</li></ul><span id="more"></span><h1 id="Lab-1">Lab 1</h1><p><a href="https://toast-lab.sist.shanghaitech.edu.cn/courses/CS110@ShanghaiTech/Spring-2024/index.html">Computer Architecture I</a> @ <a href="https://www.shanghaitech.edu.cn/">ShanghaiTech University</a></p><h2 id="How-Checkoffs-Work">How Checkoffs Work</h2><p>You'll notice that at the end of (almost) every exercise, there is a section labelled &quot;Check-off.&quot; The items in this section are what you must successfully demonstrate to your TA in order to receive credit for completing the lab. Once you finish <strong>ALL of the exercises</strong> , you should put your names AND ShanghaiTech email address on the checkoff list on the board, and a TA will come and check you off. Labs are graded out of x points, which will evaluate to 100%. A lab is considered on-time if it is turned in within a week of the lab session in which it is initially assigned to you. For example, the lab assigned to you in this weeks lab is this document, lab 1. Thus, the latest you may get lab 1 checked off is the beginning of your lab next week.</p><h2 id="Exercises">Exercises</h2><h3 id="Exercise-1-Have-a-64bit-Linux-installed">Exercise 1: Have a 64bit Linux installed</h3><p>As CS students you should have a <strong>REAL</strong> Linux (e.g. Ubuntu) installed. In CS110 and CS110P, we recommend you installing Ubuntu 20.04 LTS (64bit) on your computer. If you are using an X86 computer (Intel or AMD), you should install it as dual boot. If you are using an ARM-based computer (e.g. Apple Silicon), contact us immediately. Note that some part of the lab may not work on macOS!</p><p>Show your TA the working Linux with gcc installed.</p><h3 id="Exercise-2-Gradescope">Exercise 2: Gradescope</h3><p>Show the TA your gradescope account and that you finished HW1.</p><h3 id="Exercise-3-Linux-command">Exercise 3: Linux command</h3><p>The following commands/programs are very useful in Linux.</p><ul><li>cd</li><li>ls</li><li>pwd</li><li>mkdir</li><li>rm</li><li>cp</li><li>mv</li><li>cat</li><li>man</li></ul><p>Explain the usage of each command to the TA.</p><h3 id="Exercise-4-Linux-command-cont">Exercise 4: Linux command, cont.</h3><p>In this section, learn a new command/program by reading the manual with command <code>man</code>:</p><ul><li>grep</li></ul><p>Unlike other operating systems, Linux users love package managers for installing and updating software. In Ubuntu, the package manager is called apt.</p><ul><li>Install an interesting package with apt, if you have no idea which to choose, try <code>cowsay</code>.</li><li>Show the manual of <code>grep</code> and explain the usage to the TA.</li></ul><p>At last, we understand that reading a large bunch of plain text in the terminal is not a good experience. However, this is necessary for programmers. Here we recommend you installing <code>tldr</code> to make your life easier.</p><h3 id="Exercise-5-Sizes">Exercise 5: Sizes</h3><p>Write a C program that displays the sizes (in byte) of different data types. You are only allowed to have one <code>printf</code> in the program - it has to be used inside a precompiler macro. This macro can only have one argument. Each type should be output in a new line similar to this (with correct values of course):<br><code>Size of short: 3   Size of int: 5   </code>The sizes of the following types should be printed:</p><ul><li>char</li><li>short</li><li>short int</li><li>int</li><li>long int</li><li>unsigned int</li><li>void *</li><li>size_t</li><li>float</li><li>double</li><li>int8_t</li><li>int16_t</li><li>int32_t</li><li>int64_t</li><li>time_t</li><li>clock_t</li><li>struct tm</li><li>NULL</li></ul><p>Compile using:<br><code>gcc -Wpedantic -Wall -Wextra -Wvla -Werror -std=c11</code><br>Use <code>-m32</code> to compile it for 32bit and <code>-m64</code> to compile it for 64bit. Note that you may need to install a package named <code>gcc-multilib</code> to compile with <code>-m32</code>.</p><h4 id="Checkoff">Checkoff:</h4><ul><li>Explain what <code>-Wpedantic</code>, <code>-Wall</code>, <code>-Wextra</code>, <code>-Wvla</code>, <code>-Werror</code> and <code>-std=c11</code> do.</li><li>Show and explain your source code to the TA.</li><li>Show the compilation of the 32bit and 64bit version to the TA.</li><li>Run both programs and explain the sizes and differences.</li></ul><hr><p>The following TA(s) are responsible for this lab:</p><p>Suting Chen &lt;<code>chenst</code> AT <code>shanghaitech.edu.cn</code>&gt;</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Goals&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Setup your Linux.&lt;/li&gt;
&lt;li&gt;Setup Gradescope.&lt;/li&gt;
&lt;li&gt;Learn some simple C programming.&lt;/li&gt;
&lt;li&gt;Learn basic linux commands.&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="学习" scheme="https://zivmax.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机科学" scheme="https://zivmax.top/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
    <category term="CS110" scheme="https://zivmax.top/tags/CS110/"/>
    
    <category term="作业" scheme="https://zivmax.top/tags/%E4%BD%9C%E4%B8%9A/"/>
    
    <category term="上科大" scheme="https://zivmax.top/tags/%E4%B8%8A%E7%A7%91%E5%A4%A7/"/>
    
    <category term="计算机体系架构" scheme="https://zivmax.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Neovim Installation</title>
    <link href="https://zivmax.top/%E7%BB%8F%E9%AA%8C/2024/03/24/Refs/Neovim-Installation/"/>
    <id>https://zivmax.top/%E7%BB%8F%E9%AA%8C/2024/03/24/Refs/Neovim-Installation/</id>
    <published>2024-03-24T03:46:59.000Z</published>
    <updated>2024-03-24T08:46:37.380Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>从这篇开始，以后还是尽可能用英文记录。</p><p>This post is to teach you how to install Neovim on your Linux machine.</p><p>Especially without package manager like <code>apt</code> or <code>yum</code>.</p><span id="more"></span><h1 id="Background">Background</h1><p>I recently set up a new Docker container for development, and I want to install Neovim on it.</p><p>The problem is the base image I used is <code>node:latest</code>, which is actually not for development but for running Node.js apps. Thus it literally has nothing but Node.js installed. And many pacakges cannot be installed via <code>apt</code>.</p><p>Thus I have to install Neovim without package manager.</p><h1 id="Pre-knowledge">Pre-knowledge</h1><h2 id="What-is-FUSE-Filesystem-in-Userspace">What is <code>FUSE</code> (Filesystem in Userspace)</h2><p>FUSE is a userspace filesystem framework. It consists of a kernel module (fuse.ko), a userspace library (libfuse.*) and a mount utility (fusermount).</p><p>One of the most important features of FUSE is allowing secure, non-privileged mounts. This opens up new possibilities for the use of filesystems. A good example is sshfs: a secure network filesystem using the sftp protocol.</p><p>More about <code>FUSE</code> can be found on the <a href="https://www.kernel.org/doc/html/next/filesystems/fuse.html">Linux Kernel documentation</a></p><h2 id="What-is-AppImage">What is AppImage</h2><p>The AppImage format is a format for packaging applications in a way that allows them to run on a variety of different target systems (base operating systems, distributions) without further modification.</p><p>With AppImage, <strong>applications are packaged with all their dependencies into a single file</strong>. This file can be executed on any Linux distribution without installation. Users just need to make the AppImage file executable and then run it.</p><p>More about <code>AppImage</code> can be found on the <a href="https://appimage.org/">official website</a>.</p><h2 id="Their-Relationship">Their Relationship</h2><p>While FUSE and AppImage serve different purposes, they can be related in the context of how applications access and manage files:</p><ul><li><p><strong>Integration and Portability</strong>: AppImage can use FUSE to mount or access certain types of file systems in a way that is transparent to the user. For example, an application distributed as an AppImage could interact with a custom or special-purpose file system provided through FUSE. This could be useful for applications that need to deal with non-standard data sources.</p></li><li><p><strong>Sandboxing and Security</strong>: Some applications packaged as AppImages might use FUSE to sandbox themselves or to provide a virtualized view of the filesystem to the application, enhancing security or isolating the application from the rest of the system.</p></li></ul><h1 id="Steps">Steps</h1><h2 id="1-Download-Neovim-package">1. Download Neovim package</h2><p>Since 8.3, Neovim don't provide <code>deb</code> package any more. And it seems that <code>AppImage</code> is recommended.</p><p>So we'll install Neovim via <code>AppImage</code>.</p><p>First we need to download the <code>AppImage</code> package from <a href="https://github.com/neovim/neovim/releases">Neovim's GitHub release page</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/neovim/neovim/releases/download/v0.9.5/nvim.appimage</span><br></pre></td></tr></table></figure><h2 id="2-Make-it-executable">2. Make it executable</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u+x nvim.appimage</span><br></pre></td></tr></table></figure><h2 id="3-Unpack-it">3. Unpack it</h2><h3 id="No-FUSE">No FUSE</h3><p>If your system doesn't support <code>FUSE</code>, you can unpack it to get the executable.</p><p>In my case, my base image cannot support <code>FUSE</code>, so I have to unpack it.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nvim.appimage --appimage-extract</span><br></pre></td></tr></table></figure><h3 id="With-FUSE">With FUSE</h3><p>If your system supports <code>FUSE</code>, you can directly run the <code>AppImage</code> file.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nvim.appimage</span><br></pre></td></tr></table></figure><h2 id="4-Install-it">4. Install it</h2><h3 id="No-FUSE-2">No FUSE</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mv squashfs-root/usr/bin/nvim /usr/local/bin/nvim</span><br><span class="line">sudo mv squashfs-root/usr/share/nvim /usr/local/share/nvim</span><br></pre></td></tr></table></figure><p>Add the following line to your <code>.bashrc</code> or <code>.zshrc</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export VIMRUNTIME=/usr/local/share/nvim/runtime</span><br></pre></td></tr></table></figure><h3 id="With-FUSE-2">With FUSE</h3><p>You just need to move the <code>AppImage</code> file to <code>/usr/local/bin</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv nvim.appimage /usr/local/bin/nvim</span><br></pre></td></tr></table></figure><h2 id="5-Test-it">5. Test it</h2><p>Just run <code>nvim</code> anywhere in your terminal to check if it works.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvim</span><br></pre></td></tr></table></figure><h2 id="Uninstall">* Uninstall</h2><h3 id="With-FUSE-3">With FUSE</h3><p>If you want to uninstall Neovim, just remove the files you moved to <code>/usr/local/bin</code> and <code>/usr/local/share/nvim</code>.</p><p>Like this:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -R /usr/local/bin/nvim</span><br><span class="line">sudo rm -R /usr/local/share/nvim</span><br></pre></td></tr></table></figure><p>And remove the line you added to <code>.bashrc</code> or <code>.zshrc</code>.</p><h3 id="No-FUSE-3">No FUSE</h3><p>Same logic, just remove the files you moved.</p><p>No need to remove the line in <code>.bashrc</code> or <code>.zshrc</code> if you don't add it manually.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -R /usr/local/bin/nvim</span><br></pre></td></tr></table></figure><h1 id="Insights">Insights</h1><p>How does the above steps work? With the pre-knowledge we have learned, we can understand it better.</p><p>The process of installing Neovim on a Linux system without a package manager, as described above, leverages the unique capabilities of AppImage and FUSE to provide a seamless and flexible installation method. Here's a deeper insight into how these technologies work together to facilitate this process.</p><h2 id="The-Role-of-AppImage">The Role of AppImage</h2><p>AppImage is a universal software package format for Linux systems. The key feature of AppImage is <strong>its ability to bundle applications along with all their dependencies into a single executable file.</strong> This approach eliminates the need for traditional installation processes, where dependencies must be individually installed and managed. Instead, users can simply download, make executable, and run an AppImage, thereby significantly simplifying application deployment and usage on Linux.</p><p>When you download the Neovim AppImage and make it executable, <strong>you're essentially preparing a self-contained version of Neovim</strong> that can run independently of the system's package management and without the need to resolve dependencies manually. This is particularly advantageous in environments like Docker containers, where minimizing the footprint and complexity of installations is crucial.</p><h2 id="The-Effect-of-FUSE">The Effect of FUSE</h2><p>FUSE (Filesystem in Userspace) further complements the portability and ease of use offered by AppImage. By allowing userland applications to create their own file systems without altering kernel code, FUSE provides a mechanism for AppImages to mount themselves as virtual file systems. <strong>This capability is critical when the AppImage needs to unpack or access its contents transparently, as if it were installed in the traditional sense.</strong></p><p>For systems with FUSE enabled, running an AppImage is as straightforward as executing any binary file. <strong>The AppImage mounts itself using FUSE, providing the application with access to its bundled dependencies as if they were part of the host system's file system.</strong> This seamless integration simplifies application execution and removes the need for manual unpacking in most cases.</p><p>However, in environments where FUSE is not available or practical, AppImages offer an alternative method to extract their contents manually. This flexibility ensures that applications packaged as AppImages can still be utilized in restricted or minimal environments, such as certain Docker containers or systems with strict security policies that disallow kernel modules like FUSE.</p><p>That's why if we don't have <code>FUSE</code> not only we need to move files to <code>/usr/local/bin</code>, but also move files to <code>/usr/local/share</code> which contians the dependencies.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;从这篇开始，以后还是尽可能用英文记录。&lt;/p&gt;
&lt;p&gt;This post is to teach you how to install Neovim on your Linux machine.&lt;/p&gt;
&lt;p&gt;Especially without package manager like &lt;code&gt;apt&lt;/code&gt; or &lt;code&gt;yum&lt;/code&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="经验" scheme="https://zivmax.top/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
    <category term="Neovim" scheme="https://zivmax.top/tags/Neovim/"/>
    
    <category term="Linux" scheme="https://zivmax.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Docker Engine Proxy Set up</title>
    <link href="https://zivmax.top/%E7%BB%8F%E9%AA%8C/2024/03/24/Refs/Docker-Engine-Proxy-Set-up/"/>
    <id>https://zivmax.top/%E7%BB%8F%E9%AA%8C/2024/03/24/Refs/Docker-Engine-Proxy-Set-up/</id>
    <published>2024-03-24T01:54:14.000Z</published>
    <updated>2024-03-25T07:40:28.802Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>再不记一些解决问题的方法，就有太多东西遗落在我的记忆中了。。。</p><p>这个 Post 是关于 Docker Engine 的代理设置，尤其是在 Build Docker Image 的时候。</p><span id="more"></span><h1 id="问题">问题</h1><p>昨天在使用 Docker Engine<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="相较于 Docker Desktop，Docker Engine 是一个更加轻量级的 Docker 环境，它不包含 GUI 界面，只有 CLI，适合在 Linux 环境下使用。">[1]</span></a></sup> 来 Build 一个部署 React app 的 Image 的时候， <code>npm install</code> 非常不稳定，大部分时候会 Time out。我原先以为 Docker 是直接使用 Host 的网络，所以不需要设置代理，后来我在 Dockerfile 中加入了 <code>curl Google.com</code> 的命令，发现 Docker 是无法访问外网的。</p><h1 id="解决">解决</h1><h2 id="桥接模式的代理">桥接模式的代理</h2><h3 id="解决思路">解决思路</h3><p>如果说 Docker 不直接使用 Host 的网络，那就说明它使用桥接网络（Bridged Network）</p><blockquote><p>Basically, <strong>bridged networking is a type of network where each container gets its own IP address and is connected to the host machine via a virtual network interface.</strong> The Docker daemon acts as a DHCP server and assigns a dynamic IP address to each container.</p></blockquote><p>因此如果我们在不改变网络模式的情况下，需要打开 Host 代理的 <code>allow LAN</code> 选项，然后设置 Image 中的代理环境变量为 Host 的代理地址。</p><h3 id="修改-Clash-配置以及确认-Proxy-Port">修改 Clash 配置以及确认 Proxy Port</h3><p>我使用的 Proxy Client 是 <a href="https://github.com/Elegycloud/clash-for-linux-backup"><code>clash-for-linux-backup</code></a>, 其配置文件为 <code>./conf/config.yaml</code>。</p><p>在这份配置文件中，注意开头几行：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># HTTP 代理端口</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">7890</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SOCKS5 代理端口</span></span><br><span class="line"><span class="attr">socks-port:</span> <span class="number">7891</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Linux 和 macOS 的 redir 代理端口</span></span><br><span class="line"><span class="attr">redir-port:</span> <span class="number">7892</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许局域网的连接</span></span><br><span class="line"><span class="attr">allow-lan:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>首先确认 <code>allow-lan</code> 选项为 <code>true</code>，然后确认 <code>port</code> 和 <code>socks-port</code> 的值，这两个端口号是我们需要设置的代理端口。</p><h3 id="设置-Docker-Image-的代理环境变量">设置 Docker Image 的代理环境变量</h3><p>在 Dockerfile 中加入以下命令：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> http_proxy http://<span class="number">172.17</span>.<span class="number">0.1</span>:<span class="number">7890</span></span><br><span class="line"><span class="keyword">ENV</span> https_proxy http://<span class="number">172.17</span>.<span class="number">0.1</span>:<span class="number">7890</span></span><br><span class="line"><span class="keyword">ENV</span> all_proxy=socks5://<span class="number">172.17</span>.<span class="number">0.1</span>:<span class="number">7891</span></span><br><span class="line"><span class="keyword">ENV</span> no_proxy localhost, <span class="comment"># 这里可以接着加入其他地址，用逗号隔开即可</span></span><br><span class="line"><span class="keyword">ENV</span> HTTP_PROXY http://<span class="number">172.17</span>.<span class="number">0.1</span>:<span class="number">7890</span></span><br><span class="line"><span class="keyword">ENV</span> HTTPS_PROXY http://<span class="number">172.17</span>.<span class="number">0.1</span>:<span class="number">7890</span></span><br><span class="line"><span class="keyword">ENV</span> ALL_PROXY=socks5://<span class="number">172.17</span>.<span class="number">0.1</span>:<span class="number">7891</span></span><br><span class="line"><span class="keyword">ENV</span> NO_PROXY localhost, <span class="comment"># 这里可以接着加入其他地址，用逗号隔开即可</span></span><br></pre></td></tr></table></figure><p>这里面的地址 <code>172.17.0.1</code> 是 Docker Engine 的默认网关地址，我们可以通过 <code>docker network inspect bridge</code> ，或者 <code>ip -4 addr show docker0 | grep -Po 'inet \K[\d.]+'</code> 来查看。</p><p>现在在 Build 的过程中，Docker 就能够使用 Host 的代理服务了。</p><p>如果一些包管理器不会直接使用环境变量设置的代理地址，就需要我们在 Dockerfile 中手动设置代理地址，比如 <code>npm</code>：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm config <span class="built_in">set</span> proxy <span class="variable">$HTTP_PROXY</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm config <span class="built_in">set</span> https-proxy <span class="variable">$HTTPS_PROXY</span></span></span><br></pre></td></tr></table></figure><h3 id="自动化进阶处理">自动化进阶处理</h3><p>以上的手动配置讲解已经大致解释了设置代理的基本原理。根据这个基本原理我们可以通过 Dockerfile 的 <code>ARG</code> 来设置自动化的代理设置。便与快速在不同的 Host 上部署。</p><p>添加以下代码到未配置代理的 Dockerfile 中：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ARG</span> HOST_IP</span><br><span class="line"><span class="keyword">ARG</span> HTTP_PORT</span><br><span class="line"><span class="keyword">ARG</span> SOCKS_PORT</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> http_proxy http://$&#123;HOST_IP&#125;:$&#123;HTTP_PORT&#125;</span><br><span class="line"><span class="keyword">ENV</span> https_proxy http://$&#123;HOST_IP&#125;:$&#123;HTTP_PORT&#125;</span><br><span class="line"><span class="keyword">ENV</span> all_proxy=http://$&#123;HOST_IP&#125;:$&#123;SOCKS_PORT&#125;</span><br><span class="line"><span class="keyword">ENV</span> no_proxy localhost, </span><br><span class="line"><span class="keyword">ENV</span> HTTP_PROXY http://$&#123;HOST_IP&#125;:$&#123;HTTP_PORT&#125;</span><br><span class="line"><span class="keyword">ENV</span> HTTPS_PROXY http://$&#123;HOST_IP&#125;:$&#123;HTTP_PORT&#125;</span><br><span class="line"><span class="keyword">ENV</span> ALL_PROXY=http://$&#123;HOST_IP&#125;:$&#123;SOCKS_PORT&#125;</span><br><span class="line"><span class="keyword">ENV</span> NO_PROXY localhost, </span><br></pre></td></tr></table></figure><p>在 Biuld 的时候使用以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build --build-arg HOST_IP=$(ip -4 addr show docker0 | grep -Po &#x27;inet \K[\d.]+&#x27;) --build-arg HTTP_PORT=$(echo $http_proxy | sed -n &#x27;s/.*:\([0-9]\+\).*/\1/p&#x27;) --build-arg SOCKS_PORT=$(echo $all_proxy | sed -n &#x27;s/.*:\([0-9]\+\).*/\1/p&#x27;) -t your-image-name .</span><br></pre></td></tr></table></figure><p>其中 <code>ip -4 addr show docker0 | grep -Po 'inet \K[\d.]+'</code> 帮我们获取了 Docker Engine 的网关地址，<code>echo $http_proxy | sed -n 's/.*:\([0-9]\+\).*/\1/p'</code> 从 Host 的 <code>http_proxy</code> 环境变量中提取出 HTTP 代理端口，<code>echo $all_proxy | sed -n 's/.*:\([0-9]\+\).*/\1/p'</code> 从 Host 的 <code>all_proxy</code> 环境变量中提取出 SOCKS 代理端口。</p><p><strong>请注意，命令的具体写法取决于 Host 代理配置的具体情况。例如你的 all-proxy 使用的是 HTTP 代理，或 FTP 代理。请理解命令的原理再决定在你的环境上要怎么写。</strong></p><h2 id="Host-模式的代理">Host 模式的代理</h2><h3 id="解决思路-2">解决思路</h3><p>事实上 Docker 只是默认使用桥接网络，它还有别的网络模式。</p><p>我们可以通过 <code>-network host</code> 参数来使用让 Docker 直接使用 Host 的网络。</p><p>因此只需要配置好 Host 的代理服务之后，进行 Build 的时候添加 <code>-network host</code> 参数即可。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t my-image --network host .</span><br></pre></td></tr></table></figure><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">相较于 Docker Desktop，Docker Engine 是一个更加轻量级的 Docker 环境，它不包含 GUI 界面，只有 CLI，适合在 Linux 环境下使用。<a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;再不记一些解决问题的方法，就有太多东西遗落在我的记忆中了。。。&lt;/p&gt;
&lt;p&gt;这个 Post 是关于 Docker Engine 的代理设置，尤其是在 Build Docker Image 的时候。&lt;/p&gt;</summary>
    
    
    
    <category term="经验" scheme="https://zivmax.top/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
    <category term="Docker" scheme="https://zivmax.top/tags/Docker/"/>
    
    <category term="代理" scheme="https://zivmax.top/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>CS110 Note [3]</title>
    <link href="https://zivmax.top/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/02/24/CS110/CS110-Note-3/"/>
    <id>https://zivmax.top/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/02/24/CS110/CS110-Note-3/</id>
    <published>2024-02-24T08:32:40.000Z</published>
    <updated>2024-04-08T07:25:35.467Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Operations-of-the-Computer-Hardware">Operations of the Computer Hardware</h1><h2 id="Instruction-set">Instruction set</h2><p>In the introduction, we have learned that the CPU have the basic instructions to perform, like <code>add</code>, <code>subtract</code>, <code>load</code>, <code>store</code>, <code>branch</code>, <code>jump</code>, etc. These instructions are the basic operations of the computer hardware.</p><p>By combining these basic operations, we can perform more complex operations, like <code>multiplication</code>, <code>division</code>, <code>array access</code>, <code>function call</code>, etc.</p><p>However, how to define the most basic operations of the computer hardware? Actually there's no standard answer to this question. We have many different designs which all ahiceve the same goal: using the basic operations to perform complex operations.</p><p>Different CPU using different instruction set have different basic operations could be performed. In my notes, I will always use the RISC-V instruction set as the example.</p><h2 id="Assembly-Language">Assembly Language</h2><p>In the introduction, we also learned that the programming language to directly describe these operations is called <em>assembly language</em>.</p><blockquote><p>Here's a example of the RISC-V assembly language:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;add x1, x2, x3</span><br></pre></td></tr></table></figure><p>This instruction means that the value of <code>x2</code> and <code>x3</code> will be added together, and the result will be stored in <code>x1</code>.</p></blockquote><p>Each instruction set have its own assembly language. Below is the little more detailed introduction of the RISC-V instruction set.</p><p>The table shows the <strong>basic operations</strong> of the RISC-V assembly language:</p><table><thead><tr><th style="text-align:center">Operation</th><th style="text-align:center">Name</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td style="text-align:center"><code>add</code></td><td style="text-align:center">Add</td><td><code>add x1, x2, x3</code></td><td><code>x1 = x2 + x3</code></td></tr><tr><td style="text-align:center"><code>sub</code></td><td style="text-align:center">Subtract</td><td><code>sub x1, x2, x3</code></td><td><code>x1 = x2 - x3</code></td></tr><tr><td style="text-align:center"><code>addi</code></td><td style="text-align:center">Add immediate</td><td><code>addi x1, x2, 100</code></td><td><code>x1 = x2 + 100</code></td></tr><tr><td style="text-align:center"><code>ld</code></td><td style="text-align:center">Load doubleword</td><td><code>lw x1, 100(x2)</code></td><td><code>x1 = Memory[x2+100]</code></td></tr><tr><td style="text-align:center"><code>sd</code></td><td style="text-align:center">Store doubleword</td><td><code>sw x1, 100(x2)</code></td><td><code>Memory[x2+100] = x1</code></td></tr><tr><td style="text-align:center"><code>beq</code></td><td style="text-align:center">Branch if equal</td><td><code>beq x1, x2, 100</code></td><td><code>if (x1 == x2) go to PC += 100</code></td></tr><tr><td style="text-align:center"><code>jal</code></td><td style="text-align:center">Jump and link</td><td><code>jal x1, 100</code></td><td><code>x1 = PC+4; go to PC += 100</code></td></tr></tbody></table><p>Clearly the tables are not complete, for the full list of the RISC-V assembly language, go check the <a href="https://msyksphinz-self.github.io/riscv-isadoc/html/">RISC-V is a Doc</a>.</p><blockquote><p><em><strong>Tips:</strong></em> <em>(useful for reading Doc)</em></p><p>The base of RISC-V ISA is defined by the integer instruction set, which can be either 32-bit, 64-bit. This is indicated by the number following &quot;RISC-V&quot;. For example:</p><ul><li><strong>RISC-V32:</strong> This specifies the 32-bit integer instruction set.</li><li><strong>RISC-V64:</strong> This specifies the 64-bit integer instruction set.</li></ul><p>RISC-V is designed to be modular, allowing for various standard extensions that provide additional functionality beyond the base integer instruction set. These extensions are indicated by letters following the base designation. Some of the standard extensions include:</p><ul><li><p><strong>I:</strong> Integer. This is the base integer instruction set and is always present. It includes instructions for arithmetic, logical operations, and control flow.</p></li><li><p><strong>M:</strong> Multiply and Divide. This extension adds instructions for multiplication and division.</p></li><li><p><strong>A:</strong> Atomic. This extension adds instructions for atomic memory operations, which are crucial for multi-threading and concurrency.</p></li><li><p><strong>F:</strong> Single-Precision Floating-Point. This extension adds instructions for single-precision (32-bit) floating-point arithmetic.</p></li><li><p><strong>D:</strong> Double-Precision Floating-Point. This extension adds instructions for double-precision (64-bit) floating-point arithmetic.</p></li><li><p><strong>C:</strong> Compressed. This extension adds compressed instructions that are shorter than the standard instructions, allowing for more compact code. These instructions are also called psuedo-instructions.</p></li></ul></blockquote><h1 id="Operands-of-the-Computer-Hardware">Operands of the Computer Hardware</h1><p>The table shows the <strong>operands</strong> of the RISC-V instruction set:</p><table><thead><tr><th style="text-align:center">Operand</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center"><code>x1</code> to <code>x31</code></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>32</mn></mrow><annotation encoding="application/x-tex">32</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">32</span></span></span></span> Registers</td></tr><tr><td style="text-align:center"><code>(0)</code> to <code>(2^61)</code></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>61</mn></msup></mrow><annotation encoding="application/x-tex">2^{61}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">61</span></span></span></span></span></span></span></span></span></span></span></span> Memory words</td></tr></tbody></table><h2 id="Register-Operands">Register Operands</h2><p>Registers are the smallest and fastest memory, and they are used to store the intermediate results of the computation or the most frequent accessed data.</p><p>Programs often have more variables than a computer's registers can hold. To manage this, compilers prioritize keeping frequently used variables in registers, relegating others to memory. This involves transferring variables between registers and memory as needed. The act of moving less frequently used variables to memory is known as <em>spilling registers</em>.</p><p>Because registers are embeded in the CPU, so the CPU can access the registers directly. Thus the access time is very short (faster than 0.25ns). Each register can store 64 bits of data. Since 64 bits is so often used, this size is called a <em>doubleword</em>. (while 32 bits is called a <em>word</em>.)</p><p>As the CPU can directly access the registers, we can surely use the registers in out assmebly code. The RISC-V instruction set have 32 registers, and they are named from <code>x1</code> to <code>x31</code>. So when we use those variables in the assembly code, we are using the register.</p><p>The follwing C code:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = (g + h) - (i + j);</span><br></pre></td></tr></table></figure><p>should be compiled to the following RISC-V assembly code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add x1, x2, x3</span><br><span class="line">add x4, x5, x6</span><br><span class="line">sub x7, x1, x4</span><br></pre></td></tr></table></figure><p>If <code>f</code>, <code>g</code>, <code>h</code>, <code>i</code>, <code>j</code> are assigned to <code>x7</code>, <code>x2</code>, <code>x3</code>, <code>x5</code>, <code>x6</code> respectively. And <code>x1</code>, <code>x4</code> are used as the temporary registers.</p><p>An important thing to notice is that, <strong>only on registers can arithmetic operations be performed</strong>.</p><h2 id="Memory-Operands">Memory Operands</h2><p>Limited amount of registers can not be used to construct the essential data structure, which sotres most of the data that programmer handles. But computer's main memory contains billions of <em>bytes</em>. Hence many of the data are kept in the main memory.</p><p>Since 8 bits is so often used, this size is called a <em>byte</em>. And the memory is organized as a sequence of bytes. Each byte has a unique address, and the address is used to locate the data in the memory.</p><p>As we mentioned before, only registers can be used to perform arithmetic operations. So when we want to perform arithmetic operations on the data in the memory, we have to load the data from the memory to the registers, perform the operations, and then store the result back to the memory. Such instructions are called <em>data transfer instructions.</em></p><p>To access the memory, we have to use the memory address. The memory address is a 64-bit number, and it is used to locate the data in the memory. The memory address is also called <em>pointer</em>. We can abstractly think of the memory as an one dimensional array, and the memory address is the index of the array. (Under the hood, the memory is actually a 2D matrix, the address contains the row and column info.)</p><p>The following C code:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A[<span class="number">12</span>] = h + A[<span class="number">8</span>];</span><br></pre></td></tr></table></figure><p>should be compiled to the following RISC-V assembly code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ld x1, 64(x2)  // Temporarily store A[8] in reg x1</span><br><span class="line">add x1, x1, x3  // Temporarily store h + A[8] in reg x1</span><br><span class="line">sd x1, 96(x2)  // Store the result in A[12]</span><br></pre></td></tr></table></figure><p>If variable <code>h</code> is assigned to <code>x3</code>, and the <em>base address</em> of the array <code>A</code> is assigned to <code>x2</code>.</p><p>The register <code>x2</code> is used to store the base address of an array, so it is called the <em>base register</em>. And the number <code>64</code> is called the <em>offset</em>. The offset is used to locate the specific element in the array.</p><p>The offset in the assembly code of <code>A[8]</code> is <code>64</code> because the size of a doubleword is 8 bytes and one unique address corresponds to one byte, so the offset is <code>8 * 8 = 64</code>. The offset of <code>A[12]</code> is <code>12 * 8 = 96</code>.</p><h2 id="Constant-or-Imemdiate-Operands">Constant or Imemdiate Operands</h2><p>Many times we need to perform arithmetic operations with a constant. To utilize the constant in the assembly code, a primitive way is to load the constant to a register, and then perform the operations.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ld x1, Addr4(x3) // Load the constant 4 to x1</span><br><span class="line">add x2, x1, x4 // x2 = x1 + x4 (where x1 == 4)</span><br></pre></td></tr></table></figure><p>However, the RISC-V instruction set provides a more convenient way to perform the operations with a constant. The <code>addi</code> instruction can be used to add a constant to a register directly.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addi x2, x3, 4 // x2 = x3 + 4</span><br></pre></td></tr></table></figure><p>The constant <code>0</code> plays a special role in RISC-V. We can negate the value of a register by using the <code>x0</code> register and the <code>sub</code> instruction.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sub x2, x0, x3 // x2 = 0 - x3 = -x3</span><br></pre></td></tr></table></figure><p>We could use the <code>x0</code> register as the constant <code>0</code> because the <code>x0</code> is hardwired to the value <code>0</code> in the RISC-V instruction set.</p><h1 id="Representing-Instructions-in-the-Computer">Representing Instructions in the Computer</h1><h2 id="Machine-Language">Machine Language</h2><p>Although assembly language is already the lowest level of the programming language, but computer still can not understand the assembly language directly. The computer can only understand the binary code. So the assembly language has to be translated to the binary code before the computer can execute it.</p><p>These numeric version of instruction is called the <em>machine language</em>. And the sequence of the machine language is called the <em>machine code</em>.</p><p>Infact the assembly language is close to a human readable form of the binary code, so it is easy to translate the assembly language to the binary code. The following is the translation of the <code>add x1, x2, x3</code> instruction to the binary code:</p><ul><li><p>Assembly language:</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add x1, x2, x3</span><br></pre></td></tr></table></figure></li><li><p>Binary code:</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0000000 00011 00010 000 00001 0110011</span><br></pre></td></tr></table></figure></li><li><p>Writing the binary code in the decimal form:</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 3 2 0 1 51</span><br></pre></td></tr></table></figure></li></ul><p>Each of the segments of the binary code has a specific meaning. We call those segments of the binary code the <em>fields</em> of the instruction. The fields of the instruction are used to specify the operation to be performed, the operands of the operation, and the result of the operation.</p><p>Here a table shows the fields layout of <code>add</code> instruction:</p><table><thead><tr><th style="text-align:center">funct7</th><th style="text-align:center">rs2</th><th style="text-align:center">rs1</th><th style="text-align:center">funct3</th><th style="text-align:center">rd</th><th style="text-align:center">opcode</th></tr></thead><tbody><tr><td style="text-align:center">7bit</td><td style="text-align:center">5bit</td><td style="text-align:center">5bit</td><td style="text-align:center">3bit</td><td style="text-align:center">5bit</td><td style="text-align:center">7bit</td></tr></tbody></table><p>The <code>opcode</code> field is used to specify the operation to be performed. The <code>rd</code>, <code>rs1</code>, <code>rs2</code> fields are used to specify the operands of the operation. The <code>funct3</code> and <code>funct7</code> fields are used to specify the result of the operation.</p><p>And the layout of the fields of the instruction is called the <em>instruction format</em>. The RISC-V instruction set have three instruction formats: <em>R-type</em>, <em>I-type</em>, and <em>S-type</em>. The <code>add</code> instruction is a R-type instruction.</p><h2 id="Instruction-Formats">Instruction Formats</h2><p><code>addi</code> instruction is a I-type instruction example, and <code>ld</code> instruction is a S-type instruction example. The following table shows the fields layout of I-type and S-typeinstruction:</p><ul><li><p>I-type instruction format:</p><table><thead><tr><th style="text-align:center">imm[11:0]</th><th style="text-align:center">rs1</th><th style="text-align:center">funct3</th><th style="text-align:center">rd</th><th style="text-align:center">opcode</th></tr></thead><tbody><tr><td style="text-align:center">12bit</td><td style="text-align:center">5bit</td><td style="text-align:center">3bit</td><td style="text-align:center">5bit</td><td style="text-align:center">7bit</td></tr></tbody></table></li><li><p>S-type instruction format:</p><table><thead><tr><th style="text-align:center">imm[11:5]</th><th style="text-align:center">rs2</th><th style="text-align:center">rs1</th><th style="text-align:center">funct3</th><th style="text-align:center">imm[4:0]</th><th style="text-align:center">opcode</th></tr></thead><tbody><tr><td style="text-align:center">7bit</td><td style="text-align:center">5bit</td><td style="text-align:center">5bit</td><td style="text-align:center">3bit</td><td style="text-align:center">5bit</td><td style="text-align:center">7bit</td></tr></tbody></table></li></ul><p>And then we repeat the layout of R-type for a clear view:</p><ul><li>R-type instruction format:<table><thead><tr><th style="text-align:center">funct7</th><th style="text-align:center">rs2</th><th style="text-align:center">rs1</th><th style="text-align:center">funct3</th><th style="text-align:center">rd</th><th style="text-align:center">opcode</th></tr></thead><tbody><tr><td style="text-align:center">7bit</td><td style="text-align:center">5bit</td><td style="text-align:center">5bit</td><td style="text-align:center">3bit</td><td style="text-align:center">5bit</td><td style="text-align:center">7bit</td></tr></tbody></table></li></ul><p>There are different instruction formats because different instructions have different number of operands. And the operands of the different instructions have different size. We have to choose whether to use longer and more uniform length or shorter and more varied length of instructions. The RISC-V instruction set choose the latter.</p><p>Two thing to notice:</p><ol><li><p><strong>The <code>opcode</code> field is the first field</strong> of the instruction format, we read the fields from right to left. And in the field, we read the bits from left to right.</p></li><li><p>In the S-type instruction, the immediate value is divided, with the higher order bits (imm[11:5]) placed at the left of the instruction and the lower order bits (imm[4:0]) positioned at the right. i.e. <strong>we read the immediate parts from left to right.</strong></p></li></ol><h2 id="The-Big-Picture">The Big Picture</h2><p>Today’s computers are built on two key principles:</p><ol><li>Instructions are represented as numbers.</li><li>Programs are stored in memory to be read or written, just like data.</li></ol><p>These principles lead to the stored-program concept; its invention let the computing genie out of its bottle. Figure 2.7 shows the power of the concept; specifically, memory can contain the source code for an editor program, the corresponding compiled machine code, the text that the compiled program is using, and even the compiler that generated the machine code.</p><p>One consequence of instructions as numbers is that programs are often shipped as files of binary numbers. The commercial implication is that computers can inherit ready-made software provided they are compatible with an existing instruction set. Such “binary compatibility” often leads industry to align around a small number of instruction set architectures.</p><h1 id="Logical-Operations">Logical Operations</h1><h2 id="Bitwise-Operations">Bitwise Operations</h2><p>During the development of the computer, it soon became clear that it was useful to perform operations on the individual bits of the data instead of a bundle of bits at once. The operations that perform on the individual bits of the data are called the <em>bitwise operations</em>.</p><p>Here's a table shows the bitwise operations of the RISC-V instruction set:</p><table><thead><tr><th style="text-align:center">Operation</th><th style="text-align:center">Instruction</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td style="text-align:center">Shift left logical</td><td style="text-align:center"><code>sll</code>, <code>srli</code></td><td><code>slli x1, x2, 3</code></td><td><code>x1 = x2 &lt;&lt; 3</code></td></tr><tr><td style="text-align:center">Shift right logical</td><td style="text-align:center"><code>srl</code>, <code>srli</code></td><td><code>srli x1, x2, 3</code></td><td><code>x1 = x2 &gt;&gt; 3</code></td></tr><tr><td style="text-align:center">Shift right arithmetic</td><td style="text-align:center"><code>sra</code>, <code>srai</code></td><td><code>srai x1, x2, 3</code></td><td><code>x1 = x2 &gt;&gt; 3</code></td></tr><tr><td style="text-align:center">Bitwise AND</td><td style="text-align:center"><code>and</code>, <code>andi</code></td><td><code>and x1, x2, x3</code></td><td><code>x1 = x2 &amp; x3</code></td></tr><tr><td style="text-align:center">Bitwise OR</td><td style="text-align:center"><code>or</code>, <code>ori</code></td><td><code>or x1, x2, x3</code></td><td><code>x1 = x2 | x3</code></td></tr><tr><td style="text-align:center">Bitwise XOR</td><td style="text-align:center"><code>xor</code>, <code>xori</code></td><td><code>xor x1, x2, x3</code></td><td><code>x1 = x2 ^ x3</code></td></tr><tr><td style="text-align:center">Bitwise NOT</td><td style="text-align:center"><code>xori</code></td><td><code>not x1, x2</code></td><td><code>x1 = ~x2</code></td></tr></tbody></table><h2 id="Shift-Operations">Shift Operations</h2><p>The shift operations are used to move the bits of the data to the left or to the right. The <code>sll</code> instruction is used to shift the bits of the data to the left, and the <code>srl</code> instruction is used to shift the bits of the data to the right. The <code>sra</code> instruction is used to shift the bits of the data to the right, and the most sign bit of the old data will be filled with the original value of the sign bit.</p><p>If we use constant to determine the number of bits to be shifted, we can use the <code>slli</code>, <code>srli</code>, and <code>srai</code> instructions, where the <code>i</code> in the instruction name stands for <em>immediate</em>.</p><p>Here's some examples of the shift operations:</p><ul><li><p>Shift left 3 bits:</p><p><code>00000101</code> to <code>00101000</code></p></li><li><p>Shift right 3 bits:</p><p><code>10100000</code> to <code>00010100</code></p></li><li><p>Shift right arithmetic 3 bits:</p><p><code>10100000</code> to <code>11110100</code></p><p><code>01100000</code> to <code>00001100</code></p></li></ul><h2 id="AND-OR-NOT-XOR">AND, OR, NOT, XOR</h2><p>The previous operations are more like a whole operation on all the bits of the data. The AND, OR, NOT, XOR operations are more like the operations on the individual bits of the data. Because each result bit is determined by the corresponding bits of the operands, won't affect the bits on the other positions.</p><p>Here's some examples of the bitwise operations:</p><ul><li><p>Bitwise AND:</p><p><code>10101010</code> and <code>11001100</code> to <code>10001000</code></p></li><li><p>Bitwise OR:</p><p><code>10101010</code> and <code>11001100</code> to <code>11101110</code></p></li><li><p>Bitwise XOR:</p><p><code>10101010</code> and <code>11001100</code> to <code>01100110</code></p></li><li><p>Bitwise NOT:</p><p><code>10101010</code> to <code>01010101</code></p></li></ul><p>Here's the truth table of the bitwise operations:</p><table><thead><tr><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">a AND b</th><th style="text-align:center">a OR b</th><th style="text-align:center">a XOR b</th><th style="text-align:center">NOT a</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr></tbody></table><h1 id="Instructions-of-Making-Decisions">Instructions of Making Decisions</h1><h2 id="Conditional">Conditional</h2><p>What distinguishes a computer from a simple calculator is its ability to make decisions according to the result of the computation.</p><p>RISC-V instruction set provides two instructions to make decisions: <code>beq</code> and <code>bne</code>, which represent the <em>branch if equal</em> and <em>branch if not equal</em> respectively. These two instructions are traditionally called the <em>conditional branches</em>.</p><p>The first instruction <code>beq</code> used like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">beq x1, x2, L1</span><br></pre></td></tr></table></figure><p>This instruction means that if the value of <code>x1</code> is equal to the value of <code>x2</code>, then the program will jump to the statement labeled <code>L1</code>.</p><p><code>bne</code> instruction simply means jump when not equal.</p><p>Here's a compiling example of the C code:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (i == j)</span><br><span class="line">    f = g + h;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    f = g - h;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">beq x1, x2, Else       // If i == j, go to Else</span><br><span class="line">add x3, x4, x5         // f = g + h</span><br><span class="line">beq x0, x0, Exit       // Go to Exit</span><br><span class="line">Else: sub x3, x4, x5   // f = g - h</span><br><span class="line">Exit:</span><br></pre></td></tr></table></figure><h2 id="Loops">Loops</h2><p>RISC-V instruction set don't have a specific instruction to perform the loops. But we can use the conditional branches to perform the loops, since loop is just keep jumping back to the same statement.</p><p>Here's two compiling example of the C code:</p><ul><li><p>While loop:</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (i &lt; j)</span><br><span class="line">    f = f + g;</span><br></pre></td></tr></table></figure>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Loop: blt x1, x2, Exit   // If i &lt; j, go to Exit</span><br><span class="line">add x3, x3, x4           // f = f + g</span><br><span class="line">beq x0, x0, Loop         // Go to Loop</span><br><span class="line">Exit:</span><br></pre></td></tr></table></figure></li><li><p>For loop:</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    f = f + g;</span><br></pre></td></tr></table></figure>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">li x1, 0                  // i = 0</span><br><span class="line">Loop: bge x1, 10, Exit    // If i &gt;= 10, go to Exit</span><br><span class="line">add x3, x3, x4            // f = f + g</span><br><span class="line">addi x1, x1, 1            // i = i + 1</span><br><span class="line">beq x0, x0, Loop          // Go to Loop</span><br><span class="line">Exit:</span><br></pre></td></tr></table></figure></li></ul><p>Such sequences of instructions that end in a conditional branch are called <em>basic blocks</em>. The basic blocks are the building blocks of the control flow of the program. One of the first early phases of compilation is to identify the basic blocks of the program.</p><h2 id="Boundary-Checking-Shortcut">Boundary Checking Shortcut</h2><p>The RISC-V instruction set also provides more conditional branches to make decisions. The <code>blt</code>, <code>bge</code>, <code>bltu</code>, <code>bgeu</code> instructions represent the <em>branch if less than</em>, <em>branch if greater than or equal</em>, <em>branch if less than unsigned</em>, and <em>branch if greater than or equal unsigned</em> respectively.</p><p>Since we already know the number representaion of the signed and unsigned numbers, we can image tha the way to compare the signed and unsigned numbers are different. However, this dosen't means that we can not use unsigned comparison to compare the signed numbers. And this actually offers a shortcut for boundary checking.</p><p>For a unsigned comparison, it's clear that we just need to compare the two numbers' binary code directly, like whose leftmost <code>1</code> is more left. As the signed number use the leftmost bit to represent the sign, which means negative numbers will always lager than any non-negative numbers if we use the unsigned comparison. And for a Boundary checking, we happens to need to check if a number is non-negative and less than a specific positive number. So we can use the unsigned comparison to perform the boundary checking.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bgeu x20, x11, IndexOutOfBounds // If x20 &gt;= x11 or x20 &lt; 0, go to IndexOutOfBounds</span><br></pre></td></tr></table></figure><h2 id="Case-Switch-Statement">Case/Switch Statement</h2><p>Most programming languages provide a <code>case</code> or <code>switch</code> statement that allows the programmer to select one of many branches based on the value of an expression. A simple way to implement this feature in is to turn the <code>case</code> statement into a series of <code>if</code> statements.</p><p>But the alternative way may be more efficient. The RISC-V instruction set provides the <code>jalr</code> instruction (<em>jump and link register</em>), which is used to jump to a specific statement with no condition. By encoding the selectable branches' addresses into a table and load the address we want into a register, we can use the <code>jalr</code> instruction to jump to that specific address. The table is called a <em>branch address table</em> or <em>branch table</em>.</p><h1 id="Supporting-Procedures-in-Computer-Hardware">Supporting Procedures in Computer Hardware</h1><p>A <em>procedure</em> is a sequence of instructions that can solve a specific problem, which is suitable for reuse. In programming languages, a procedure has a more familiar name: <em>function</em>.</p><h2 id="What-will-a-Procedure-Do">What will a Procedure Do?</h2><p>RISC-V don't have specific instructions to support the procedures, but the reason it doesn't have is that the procedures are supported by the combination of the basic operations and the conditional branches. <strong>We can implement the concept of procedure abstractly</strong>.</p><p>All of us are very skilled at high-level programming using functions. Since procedure are just an alias of the function, we can directly describe some features of the procedure:</p><ul><li><p>Taking parameters as input.</p></li><li><p>Returning a result as output.</p></li><li><p>The procedure can be called in the main program.</p></li><li><p>The procedure can call other procedures.</p></li></ul><p>Now, as we've known the basics of assembly language, how we exactly do to implement the procedures using the assembly language? Well, in the execution of a procedure, the assembly program must follow these six steps:</p><ol><li><p>Put parameters in a place where the procedure can access them.</p><ul><li>Using <code>add</code>, <code>mv</code> ...</li></ul></li><li><p>Transfer control to the procedure.</p><ul><li>Using <code>jalr</code>, <code>jal</code> ...</li></ul></li><li><p>Acquire the storage resources needed for the procedure.</p><ul><li>Using <code>sd</code>, <code>sw</code> ...</li></ul></li><li><p>Perform the desired task.</p></li><li><p>Put the result value in a place where the calling program can access it.</p><ul><li>Using <code>add</code>, <code>mv</code> ...</li></ul></li><li><p>Return control to the point of origin, since a procedure can be called from several points in a program.</p><ul><li>Using <code>ret</code>/<code>jal</code>, <code>ld</code>, <code>lw</code> ...</li></ul></li></ol><h2 id="How-procedure-abstractly-implemented">How procedure abstractly implemented?</h2><h3 id="Sharing-the-Registers">Sharing the Registers</h3><p>Recall that, we implement procedures in an abstract way. Why we call it abstract?</p><p>In the high-level programming, we consider the procedure has its own memory space. we call functions in high-level programming, except we passed pointers as the parameters, we won't worry about the function changes the things &quot;outside&quot; the function. This is because the main memory is big enough to sperate the memory spaces.</p><p>But in RISC-V, we are persuing using registers as much as possible, and the registers are very limited, just exactly 32 registers in total and 64bits large per register.</p><p>Thus, when the <em>caller</em> calls a procedure, the caller will lose the control of the registers. After the calling, all the registers turn to serve the <em>callee</em>.</p><h3 id="Communicating-between-the-Caller-and-the-Callee">Communicating between the Caller and the Callee</h3><p>Then how caller and callee communicate? In the high-level programming, the caller and callee communicate through the parameters and the return value.</p><p>In RISC-V, we follow a convention, or could be called a protocol, to let the caller and callee communicate. Just as the six steps we mentioned above, before the caller calls the callee, the caller will put the parameters in the specific registers, and after the callee returns, the callee will put the return value in the specific registers.</p><p>By convention, we use:</p><ul><li><code>x10</code> to <code>x17</code> as the parameter registers.</li><li><code>x1</code> to store the address of the next instruction after the jump instruction (for calling procedure) made by the caller.</li></ul><h3 id="Saving-and-Restoring-the-States-of-the-Registers">Saving and Restoring the States of the Registers</h3><p>Communicating issue solved, but not only caller need the return value, after the control back, we need to restore states of the registers for the continuation of the caller's execution. So the callee should also save the states of the registers before it uses the registers, and restore the states of the registers before return.</p><p>But now we have a new problem, to store the states of the registers, we need to transfer them into main memory and tansferring data between the memory and the registers is very slow. If this transfer happens frequently, the performance of the program will be very low. How to solve this problem? We can add some new rules to the protocol, like the callee can use some specific registers without saving the states, while some other registers must be saved before use and restored before return.</p><p>By convention, we use:</p><ul><li><code>x5</code> to <code>x7</code> and <code>x28</code> to <code>x31</code> as temporary registers that are not preserved by the callee on a procedure call.</li><li><code>x8</code> to <code>x9</code> and <code>x18</code> to <code>x27</code> as saved registers that must be preserved on a procedure call.</li></ul><h3 id="Return">Return</h3><p>In the previous content, we only know we need to go back to the <em>call site</em> (the position where the caller calls), and focus on how caller and callee communicating with eachother. Yet we don't know how to make sure that we could go back to the call site.</p><p>Recall when we use jump instruction to call callees, like <code>jal</code> or <code>jalr</code>, they have an additional step before jumping: linking.</p><p>The linking means to put <code>PC + 4</code> into the <code>x1</code> (we store the return address here). <code>PC</code> stands for <em>Program Counter</em>, which is special register not involved in the 32 normal register. Its value is the address of current executing instruction in the program.</p><p>Since each instruction is 4-byte and each address mapped to one byte of momery, the address of the instruction next the jump instruction is the jump instruction's address plus <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4</mn></mrow><annotation encoding="application/x-tex">4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">4</span></span></span></span>, i.e. <code>PC + 4</code> when executing the jump instruction.</p><p>Thus when callee finished his job and ready to go back, callee could directly jump to the address stored in <code>x1</code> and start executing immediately.</p><h2 id="Datas-in-the-main-memory">Datas in the main memory</h2><p>As said above, we need to store some data in the main memory. If all the procedures won't call another procedure, which we call a <em>leaf procedure</em>, life will be much easier.</p><p>But it turns out that even the simplest program that print out <code>&quot;Hello, World!&quot;</code> coded in C will call tons of procedures. This leads to so many data transfer between the memory and the registers, and the data we stored in main memory contains the varibles of many different precedures.</p><p>Now the question is, how we determine the address of the data stored in or loaded from the main memory? Besides, we also need a way to distinguish the data of different procedures in the main memory.</p><p>Recall that in C, one function could only access the variables in the function itself except the global variables. These variables are called the <em>local variables</em>. The local variables were wrapped up by a concept called <em>frame</em>. One frame contains the local variables of a called function. As one function calls another function, new frames are generated. We put these frames in the main memory together, and call these bunch of frames the <em>stack</em>.</p><p>To effectively manage data in main memory when using assembly language, <strong>especially when dealing with nested or recursive procedure calls</strong>, the concepts of the stack and frame are crucial. These concepts not only help in distinguishing the data of different procedures but also streamline the process of storing and retrieving procedure-specific data.</p><h3 id="The-Stack">The Stack</h3><p>The stack is a structured portion of the computer's main memory used for storing temporary data such as procedure parameters, return addresses, and local variables. It operates on a Last In, First Out (LIFO) principle, meaning that the last piece of data pushed onto the stack will be the first one to be popped off. This structure is particularly useful for managing data in nested procedure calls, as it ensures that each procedure call has access to its own set of data without interfering with others.</p><p>When a procedure is called, a new block of memory on the stack, <strong>known as a stack frame or activation record</strong>, is allocated for that procedure. This stack frame contains all the necessary information for the procedure, including its parameters, local variables, and the return address. Once the procedure completes its execution and returns, its stack frame is deallocated, and control is handed back to the calling procedure, which resumes execution right where it left off.</p><h3 id="The-Frame">The Frame</h3><p>A frame, or an activation record, is a specific section of the stack allocated for a single execution of a procedure. The frame includes several key components:</p><ul><li><strong>Parameters</strong>: The values passed to the procedure upon calling.</li><li><strong>Return Address</strong>: The point in the program to return to once the procedure execution is completed.</li><li><strong>Saved Registers</strong>: Registers that need to be preserved across procedure calls, as per the calling convention, are saved here.</li><li><strong>Local Variables</strong>: Variables that are declared within the scope of the procedure.</li><li><strong>Temporary Data</strong>: Space for data that is temporarily needed during the execution of the procedure.</li></ul><p>The layout of a frame is determined by the calling convention used by the system, which dictates how parameters are passed, where the return address is stored, and which registers are saved.</p><h3 id="Managing-the-Stack-and-Frame">Managing the Stack and Frame</h3><p>To manage the stack and frames, the RISC-V architecture (like many other architectures) uses a pair of registers:</p><ul><li><strong>Stack Pointer (SP)</strong>: This pointer points to the top of the stack. It is automatically updated as data is pushed to or popped from the stack. In RISC-V, <code>x2</code> is often used as the stack pointer.</li><li><strong>Frame Pointer (FP)</strong>: This <strong>optional</strong> pointer <strong>always</strong> points to the base of the current stack frame, making it easier to access the frame's components. While not always necessary, using a frame pointer can simplify the code for accessing local variables and parameters, especially in deeply nested calls or when frames have variable sizes. Typically, <code>x8</code> is used as the frame pointer.</li></ul><p>When a procedure is called, the stack pointer is adjusted to allocate space for the new frame. The procedure's parameters, return address, and any necessary saved registers are then stored in this new frame. Upon completion of the procedure, the saved registers are restored, the return address is used to jump back to the calling procedure, and the stack pointer is adjusted to deallocate the frame.</p><p>This structured approach allows for efficient, organized management of procedure calls and returns, especially in complex programs with many nested procedure calls. It ensures that each procedure has access to its own data and resources, while maintaining the integrity and continuity of the program's execution flow.</p><p>Here's are two example of precudure and nested procedure's assembly code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">add_numbers:</span><br><span class="line">    // Prologue</span><br><span class="line">    addi sp, sp, -16   // Allocate space on the stack for 2 words (16 bytes)</span><br><span class="line">    sd ra, 8(sp)       // Save the return address on the stack</span><br><span class="line">    sd s0, 0(sp)       // Save the frame pointer (s0) on the stack</span><br><span class="line">    addi s0, sp, 16    // Set up the new frame pointer</span><br><span class="line"></span><br><span class="line">    // Function body</span><br><span class="line">    add a0, a0, a1     // Perform the addition; result is in a0</span><br><span class="line"></span><br><span class="line">    // Epilogue</span><br><span class="line">    ld ra, 8(sp)       // Restore the return address from the stack</span><br><span class="line">    ld s0, 0(sp)       // Restore the frame pointer (s0) from the stack</span><br><span class="line">    addi sp, sp, 16    // Deallocate space on the stack</span><br><span class="line">    ret                // Return to caller</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">factorial:</span><br><span class="line">    addi sp, sp, -16   // Allocate space on the stack for 2 words (16 bytes)</span><br><span class="line">    sd ra, 8(sp)       // Save the return address on the stack</span><br><span class="line">    sd a0, 0(sp)       // Save the argument a0 on the stack since we&#x27;ll call this function recursively</span><br><span class="line"></span><br><span class="line">    // Base case: if n &lt;= 1, return 1</span><br><span class="line">    li t0, 1           // Load immediate value 1 into temporary register t0</span><br><span class="line">    ble a0, t0, end_recursion // If a0 &lt;= 1, jump to end_recursion</span><br><span class="line"></span><br><span class="line">    // Recursive case: n * factorial(n-1)</span><br><span class="line">    addi a0, a0, -1    // Decrement n by 1</span><br><span class="line">    jal ra, factorial  // Recursive call to factorial with n-1</span><br><span class="line"></span><br><span class="line">    // After returning from recursion, multiply n by the result</span><br><span class="line">    ld a0, 0(sp)       // Restore the original value of n</span><br><span class="line">    mul a0, a0, a1     // Multiply n by factorial(n-1), result is in a0</span><br><span class="line"></span><br><span class="line">end_recursion:</span><br><span class="line">    li a0, 1           // If we hit the base case, set result to 1</span><br><span class="line">    ld ra, 8(sp)       // Restore the return address from the stack</span><br><span class="line">    addi sp, sp, 16    // Deallocate space on the stack</span><br><span class="line">    ret                // Return to caller</span><br></pre></td></tr></table></figure><h3 id="Heap">Heap</h3><p>Corresponding to the stack, the concept of <em>heap</em> may also be familiar to you. Heap is also a data structure, but the concept here is not about the data structure, but the memory management.</p><p>Up to now, all we stored in the main memory are static data, which means the size of the data is determined when we write the program. But in the real world, we often need to store the data whose size is determined when the program is running. This kind of data is called the <em>dynamic data</em>. The dynamic data is stored in the heap.</p><p>When using stack pointer, the original stack pointer stores the address of the top address table of the main memory. When we want to allocate space for a new frame, we need to move down the stack pointer, i.e. subtract the stack pointer.</p><p>In the contrary, the address allocated for the dynamic data in the heap is always increasing.</p><h2 id="Global">Global</h2><p>A C variable is generally a location in storage, and its interpretation depends both on its type and storage class. C has two storage classes: automatic and static. Automatic variables are local to a procedure and are discarded when the procedure exits. Static variables exist across exits from and entries to procedures. C variables declared outside all procedures are considered static, as are any variables declared using the keyword static. The rest are automatic. To simplify access to static data, some RISC-V compilers reserve a register <code>x3</code> for use as the* global pointer*, or <code>gp</code>.</p><h2 id="Full-Calling-Convention">Full Calling Convention</h2><p>Finally, we've introduced all the key concepts when we implement the procedures in the assembly language. Now we can summarize the full calling convention of the RISC-V instruction set:</p><ol><li><p><strong>Parameter Passing</strong>: Parameters are passed in registers <code>x10</code> to <code>x17</code>. If there are more than 8 parameters, the remaining parameters are passed on the stack.</p></li><li><p><strong>Return Value</strong>: The return value is passed in register <code>x10</code>.</p></li><li><p><strong>Saved Registers</strong>: Registers <code>x8</code> to <code>x9</code> and <code>x18</code> to <code>x27</code> must be saved by the callee if they are used.</p></li><li><p><strong>Temporary Registers</strong>: Registers <code>x5</code> to <code>x7</code> and <code>x28</code> to <code>x31</code> can be used by the callee without saving their states.</p></li><li><p><strong>Stack Pointer</strong>: Register <code>x2</code> is used as the stack pointer.</p></li><li><p><strong>Frame Pointer</strong>: Register <code>x8</code> is used as the frame pointer, but it is optional.</p></li><li><p><strong>Return Address</strong>: The return address is stored in register <code>x1</code>.</p></li><li><p><strong>Zero</strong>: Register <code>x0</code> is hardwired to the value <code>0</code>.</p></li></ol><p>But if we always need to remember these rules, it will be very hard to write the assembly code. Thus, like the pseudo-instructions (compressed-instruction) that assembler can translate to the real instructions, <strong>we can also use the <em>nick name</em> (formally <em>ABI Name</em>) of those registers to represent the registers.</strong> Here's a table shows the nick names of the registers:</p><table><thead><tr><th>Register</th><th>ABI Name</th><th>Description</th><th>Saver</th></tr></thead><tbody><tr><td>x0</td><td>zero</td><td>Hard-wired zero</td><td></td></tr><tr><td>x1</td><td>ra</td><td>Return address</td><td>Caller</td></tr><tr><td>x2</td><td>sp</td><td>Stack pointer</td><td>Callee</td></tr><tr><td>x3</td><td>gp</td><td>Global pointer</td><td></td></tr><tr><td>x4</td><td>tp</td><td>Thread pointer</td><td></td></tr><tr><td>x5-x7</td><td>t0-t2</td><td>Temporaries</td><td>Caller</td></tr><tr><td>x8</td><td>s0/fp</td><td>Saved register/frame pointer</td><td>Callee</td></tr><tr><td>x9</td><td>s1</td><td>Saved register</td><td>Callee</td></tr><tr><td>x10-x17</td><td>a0-a7</td><td>Function arguments/return values</td><td>Caller</td></tr><tr><td>x18-x27</td><td>s2-s11</td><td>Saved registers</td><td>Callee</td></tr><tr><td>x28-x31</td><td>t3-t6</td><td>Temporaries</td><td>Caller</td></tr></tbody></table><h1 id="RISC-V-Addressing-for-Wide-Immediates-and-Addresses">RISC-V Addressing for Wide Immediates and Addresses</h1><h2 id="Addressing">Addressing</h2><p>The concept of <em>Addressing</em> in computer science means the actual process when we use a number to express that we want to access a certain part of the memory.</p><p>Formally, the various <em>addressing modes</em> that are defined in a given instruction set architecture define:</p><ul><li><p>How the machine language instructions in that architecture identify the operand(s) of each instruction.</p></li><li><p>How to calculate the effective memory address of an operand by using information held in registers and/or constants contained within a machine instruction or elsewhere.</p></li></ul><p>For example, base addressing is a common way to access the data in the memory. We use the pattern <code>imme(reg)</code> to access the data in the memory. The <code>imme</code> is the offset, and the <code>reg</code> is the base address of the array. The <code>imme</code> is added to the <code>reg</code> to get the address of the data in the memory. Thus the actual address we are accessing is <code>imme + reg</code>.</p><p>We're going to mainly talk about the addressing of wide/large immediate operands and branches' addresses</p><h2 id="Wide-Immediate-Operands">Wide Immediate Operands</h2><p>As we know, in the RISC-V32, the size of instructions are 32-bit. And if we use those instructions contain immediate, like <code>addi</code>, it will be encoded into the instruction itself when assembling. If you don't know that, just check out the format of I type instruction.</p><p>Most of the instructions only have 12-bit field for storing the immediate. But the size of register is 64-bit, which means we could store 32-bit number in the register. And indeed, there's a instruction <code>li</code> allowing us to load a 32-bit immediate into a register directly.</p><p>However, so long as you understand the instruction size are only 32-bit, you can image <code>li</code> must be not a normal instruction, since some of bits must used for storing <code>opcode</code>, <code>func3</code> ...</p><p>Yep, it's a pseudo instruction. What <code>li</code> does, is utilizing <code>lui</code> to load the first 20 bits into register, and use <code>addi</code> to load the remaining 12 bits.</p><p>For an conrete example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">li x19, 3998976</span><br></pre></td></tr></table></figure><p>where</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>399897</mn><msub><mn>6</mn><mn>10</mn></msub><mo>=</mo><mn>00000000</mn><mtext>  </mtext><mn>00111101</mn><mtext>  </mtext><mn>00000101</mn><mtext>  </mtext><mn>0000000</mn><msub><mn>0</mn><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">3998976_{10} =  00000000\;00111101\;00000101\;00000000_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">399897</span><span class="mord"><span class="mord">6</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">00000000</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">00111101</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">00000101</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0000000</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>, will be translated into:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lui  x19, 976</span><br><span class="line">addi x19, x19, 1280</span><br></pre></td></tr></table></figure><p>where</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>97</mn><msub><mn>6</mn><mn>10</mn></msub><mo>=</mo><mn>0000</mn><mtext>  </mtext><mn>0000</mn><mtext>  </mtext><mn>0011</mn><mtext>  </mtext><mn>1101</mn><mtext>  </mtext><mn>000</mn><msub><mn>0</mn><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">976_{10} = 0000\;0000\;0011\;1101\;0000_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">97</span><span class="mord"><span class="mord">6</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">0000</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0000</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0011</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1101</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">000</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>and</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>128</mn><msub><mn>0</mn><mn>10</mn></msub><mo>=</mo><mn>00000101</mn><mtext>  </mtext><mn>0000000</mn><msub><mn>0</mn><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">1280_{10} = 00000101\;00000000_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">128</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">00000101</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0000000</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>.</p><p>As you can see, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>976</mn></mrow><annotation encoding="application/x-tex">976</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">976</span></span></span></span> is the integer representation of the first 20 bits of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3998976</mn></mrow><annotation encoding="application/x-tex">3998976</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3998976</span></span></span></span>. And <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1280</mn></mrow><annotation encoding="application/x-tex">1280</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1280</span></span></span></span> is the integer representation of the last 12 bits of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3998976</mn></mrow><annotation encoding="application/x-tex">3998976</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3998976</span></span></span></span>.</p><p>What <code>lui</code> exactly will do is shifting right the <code>imme</code> (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>976</mn></mrow><annotation encoding="application/x-tex">976</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">976</span></span></span></span> here) by 12 bits and store the shifted number in the <code>reg</code> (<code>x19</code> here). Just as it's name: <strong>Load the number into the register as if it is the upper 20-bit part of an integer</strong>.</p><blockquote><p>In the previous example, bit 11 of the constant was <code>0</code>. If bit 11 had been set, there would have been an additional complication: the 12-bit immediate is sign-extended, so the addend would have been negative. This means that in addition to adding in the rightmost 11 bits of the constant, we would have also subtracted <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>12</mn></msup></mrow><annotation encoding="application/x-tex">2^{12}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span></span></span></span></span></span></span></span>. To compensate for this error, it suffices to add <code>1</code> to the constant loaded with <code>lui</code>, since the <code>lui</code> constant is scaled by <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>12</mn></msup></mrow><annotation encoding="application/x-tex">2^{12}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span></span></span></span></span></span></span></span>.</p></blockquote><h2 id="Addressing-in-Branches">Addressing in Branches</h2><p>The branch instructions in the RISC-V instruction use the instruction format called <em>SB-type</em>.</p><p>For example, <code>bne x10, x11, 2000</code> will be represented in machine code as:</p><table><thead><tr><th style="text-align:center">imm[12]</th><th style="text-align:center">imm[10:5]</th><th style="text-align:center">rs2</th><th style="text-align:center">rs1</th><th style="text-align:center">funct3</th><th style="text-align:center">imm[4:1]</th><th style="text-align:center">imm[11]</th><th style="text-align:center">opcode</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">111110</td><td style="text-align:center">01011</td><td style="text-align:center">01010</td><td style="text-align:center">001</td><td style="text-align:center">1000</td><td style="text-align:center">0</td><td style="text-align:center">1100111</td></tr></tbody></table><blockquote><p>The reason why this format don't cover <code>imm[0]</code> is because each instruction is 32-bit or 4-byte. So the address distance between the instructions is 4 (recall each address corresponds to one byte of memory). Thus the <code>imm</code> is always a multiple of 4, and the last bit of <code>imm</code> is always <code>0</code>, so we leave it implicit, like the implicit <code>1</code> in IEEE 754.</p></blockquote><p>As you can see, the immediate field could only cover the range of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mo>−</mo><mn>4096</mn><mo separator="true">,</mo><mtext>  </mtext><mn>4094</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[−4096,\;4094]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">4096</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">4094</span><span class="mclose">]</span></span></span></span>, and if we use the direct addressing mode, we can only have 2192 instruction in one program, each instruction takes one address. If this be true, then we're done, at least you won't see any modern program today.</p><p>And a similar format <em>UJ-type</em>, which is only used by <code>jal</code>, also only have 20 bits for the immediate.</p><p>For example, <code>jal x0, 2000</code> will be represented in machine code as:</p><table><thead><tr><th style="text-align:center">imm[20]</th><th style="text-align:center">imm[10:1]</th><th style="text-align:center">imm[11]</th><th style="text-align:center">imm[19:12]</th><th style="text-align:center">rd</th><th style="text-align:center">opcode</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">1111101000</td><td style="text-align:center">0</td><td style="text-align:center">00000000</td><td style="text-align:center">00000</td><td style="text-align:center">1101111</td></tr></tbody></table><p>Even if we only use <code>jal</code> to jump, if addresses of the program still had to fit in this 20-bit field, no program could be bigger than <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>20</mn></msup></mrow><annotation encoding="application/x-tex">2^{20}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">20</span></span></span></span></span></span></span></span></span></span></span></span>.</p><p>So RISC-V have to seek a way solving this, and the way is: <em>PC-relative addressing</em></p><p>It help us jump by setting the Program Counter in this way:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PC = PC + Branch offset</span><br></pre></td></tr></table></figure><p>The key idea here is: <strong>For the most of time, the distance we want to jump is not that large.</strong></p><p>This still limits us that we can only branch within <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>±</mo><msup><mn>2</mn><mn>10</mn></msup></mrow><annotation encoding="application/x-tex">\pm2^{10}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">±</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span></span></span></span></span></span></span></span> words of the current instruction, or jump only within <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>±</mo><msup><mn>2</mn><mn>18</mn></msup></mrow><annotation encoding="application/x-tex">\pm2^{18}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">±</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">18</span></span></span></span></span></span></span></span></span></span></span></span> words of the current<br>instruction, But all loops and if statements are smaller than <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>10</mn></msup></mrow><annotation encoding="application/x-tex">2^{10}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span></span></span></span></span></span></span></span> words.</p><h2 id="Addressing-in-Storing-and-Loading">Addressing in Storing and Loading</h2><p>Notice the syntax of the Load and Store function:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sd x1, 100(x2)</span><br><span class="line">ld x1, 100(x2)</span><br></pre></td></tr></table></figure><p>The pattern <code>imme(reg)</code> is used to access the data in the memory. The <code>imme</code> is the offset, and the <code>reg</code> is the base address of the array. The <code>imme</code> is added to the <code>reg</code> to get the address of the data in the memory. Thus the actual address we are accessing is <code>imme + reg</code>.</p><p>This is called the <em>base addressing mode</em>. And it actually hint us, the amount of the memory corresponds the bits of the memory address, which corresponds to the bits of the register.</p><h1 id="Parallelism-and-Instructions-Synchronization">Parallelism and Instructions: Synchronization</h1><p>In the world of computing, particularly within the RISC-V architecture, achieving parallelism often requires tasks to work in tandem. However, this collaboration introduces the need for synchronization to ensure that tasks don't interfere with each other, potentially leading to <em>data races</em>. Data races occur when multiple threads access the same memory location without proper synchronization, and at least one of them is writing to it.</p><h2 id="Data-Race-and-Synchronization">Data Race and Synchronization</h2><p>Consider the analogy of reporters working on different sections of a story; if one reporter needs to read all sections before concluding, they must know when others have finished. <strong>If the latter reporter make the conclusion earlier than the completion of the former reporter, then the conclusion might missing the evaluation of the unfinished part.</strong> This is called a data race.</p><p>This scenario emphasizes the need for synchronization to prevent any changes that could affect the final outcome.</p><p>In computing, synchronization is typically managed through software routines that utilize hardware synchronization instructions. These instructions are crucial for implementing lock and unlock operations, which ensure that only one processor can access a specific region at a time—a concept known as mutual exclusion.</p><h2 id="Atomic-Operations-The-Foundation-of-Synchronization">Atomic Operations: The Foundation of Synchronization</h2><p>Atomic operations means: <strong>Some operations are strongly bonded and can't be split (like an atom).</strong></p><p>The cornerstone of synchronization in a multiprocessor environment is the ability to atomically read and modify a memory location. Without this, the complexity and cost of building synchronization mechanisms would skyrocket with an increasing number of processors.</p><p>A basic example of such an operation is the atomic exchange or swap, which allows a value in a register to be exchanged with a value in memory atomically. This operation can be used to implement a simple locking mechanism, ensuring that only one processor can acquire the lock at a time.</p><h2 id="RISC-V-s-Approach-to-Synchronization">RISC-V's Approach to Synchronization</h2><p>RISC-V introduces a pair of instructions, load-reserved (<code>lr.d</code>) and store-conditional (<code>sc.d</code>), to facilitate atomic operations.</p><p>These instructions work together to ensure that if the memory location used by the load-reserved instruction is altered before the store-conditional instruction is executed, if some instruction tries to modify the location before <code>sc.d</code>, it fails.</p><p>This mechanism allows for the implementation of atomic exchanges and other synchronization primitives.</p><h2 id="Practical-Applications-and-Considerations">Practical Applications and Considerations</h2><p>While atomic exchange is a powerful tool for multiprocessor synchronization, it's also beneficial for single-processor systems in managing multiple processes. Furthermore, the load-reserved/store-conditional mechanism can be extended to build more complex synchronization primitives, such as atomic compare-and-swap or atomic fetch-and-increment.</p><p>However, developers must be cautious about the instructions placed between the load-reserved and store-conditional instructions to avoid deadlocks and ensure the atomicity of the operation.</p><hr><h1 id="Unfinished-yet">Unfinished yet...</h1><h1 id="Translating-and-Starting-a-Program">Translating and Starting a Program</h1><pre class="mermaid" style="text-align: center;">            graph TD            A["C Program"] -->|Compiler| B["Assembly Language Program"]B -->|Assembler| C["Object: Machine Language Module"]D["Object: Library Routine<br>(Machine Language)"] -->|Linker| E["Executable: Machine Language Program"]C -->|Linker| EE -->|Loader| F["Memory"]          </pre><table><thead><tr><th style="text-align:center">Object file header</th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center">Name</td><td style="text-align:center">Procedure A</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">Text size</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10</mn><msub><mn>0</mn><mn>8</mn></msub></mrow><annotation encoding="application/x-tex">100_8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">10</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">Data size</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><msub><mn>0</mn><mn>8</mn></msub></mrow><annotation encoding="application/x-tex">20_8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">2</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Text segment</td><td style="text-align:center">Address</td><td style="text-align:center">Instruction</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">0</td><td style="text-align:center"><code>ld x10, 0(x3)</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">4</td><td style="text-align:center"><code>jal x1, 0</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mrow><annotation encoding="application/x-tex">\vdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.03em;"></span><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mrow><annotation encoding="application/x-tex">\vdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.03em;"></span><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span></span></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Data segment</td><td style="text-align:center">0</td><td style="text-align:center">(X)</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mrow><annotation encoding="application/x-tex">\vdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.03em;"></span><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mrow><annotation encoding="application/x-tex">\vdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.03em;"></span><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span></span></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Relocation information</td><td style="text-align:center">Address</td><td style="text-align:center">Instruction type</td><td style="text-align:center">Dependency</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">0</td><td style="text-align:center"><code>ld</code></td><td style="text-align:center">X</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">4</td><td style="text-align:center"><code>jal</code></td><td style="text-align:center">B</td></tr><tr><td style="text-align:center">Symbol table</td><td style="text-align:center">L abel</td><td style="text-align:center">Address</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">X</td><td style="text-align:center">-</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">B</td><td style="text-align:center">-</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">Name</td><td style="text-align:center">Procedure B</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">Text size</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>20</mn><msub><mn>0</mn><mn>8</mn></msub></mrow><annotation encoding="application/x-tex">200_8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">20</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">Data size</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn><msub><mn>0</mn><mn>8</mn></msub></mrow><annotation encoding="application/x-tex">30_8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">3</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Text segment</td><td style="text-align:center">Address</td><td style="text-align:center">Instruction</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">0</td><td style="text-align:center"><code>sd x11, 0(x3)</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">4</td><td style="text-align:center"><code>jal x1, 0</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mrow><annotation encoding="application/x-tex">\vdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.03em;"></span><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mrow><annotation encoding="application/x-tex">\vdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.03em;"></span><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span></span></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Data segment</td><td style="text-align:center">0</td><td style="text-align:center">(Y)</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mrow><annotation encoding="application/x-tex">\vdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.03em;"></span><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mrow><annotation encoding="application/x-tex">\vdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.03em;"></span><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span></span></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Relocation information</td><td style="text-align:center">Address</td><td style="text-align:center">Instruction type</td><td style="text-align:center">Dependency</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">0</td><td style="text-align:center"><code>sd</code></td><td style="text-align:center">Y</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">4</td><td style="text-align:center"><code>jal</code></td><td style="text-align:center">A</td></tr><tr><td style="text-align:center">Symbol table</td><td style="text-align:center">L abel</td><td style="text-align:center">Address</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">Y</td><td style="text-align:center">-</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">A</td><td style="text-align:center">-</td><td style="text-align:center"></td></tr></tbody></table><table><thead><tr><th style="text-align:center">Executable file header</th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center">Text size</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>30</mn><msub><mn>0</mn><mn>8</mn></msub></mrow><annotation encoding="application/x-tex">300_8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">30</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">Data size</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>5</mn><msub><mn>0</mn><mn>8</mn></msub></mrow><annotation encoding="application/x-tex">50_8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">5</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td></tr><tr><td style="text-align:center">Text segment</td><td style="text-align:center">Address</td><td style="text-align:center">Instruction</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0000</mn><mtext>  </mtext><mn>0000</mn><mtext>  </mtext><mn>0040</mn><mtext>  </mtext><mn>000</mn><msub><mn>0</mn><mn>8</mn></msub></mrow><annotation encoding="application/x-tex">0000\;0000\;0040\;0000_8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">0000</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0000</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0040</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">000</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center"><code>ld x10, 0(x3)</code></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0000</mn><mtext>  </mtext><mn>0000</mn><mtext>  </mtext><mn>0040</mn><mtext>  </mtext><mn>000</mn><msub><mn>4</mn><mn>8</mn></msub></mrow><annotation encoding="application/x-tex">0000\;0000\;0040\;0004_8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">0000</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0000</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0040</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">000</span><span class="mord"><span class="mord">4</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center"><code>jal x1, 252</code></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mrow><annotation encoding="application/x-tex">\vdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.03em;"></span><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mrow><annotation encoding="application/x-tex">\vdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.03em;"></span><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span></span></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0000</mn><mtext>  </mtext><mn>0000</mn><mtext>  </mtext><mn>0040</mn><mtext>  </mtext><mn>010</mn><msub><mn>0</mn><mn>8</mn></msub></mrow><annotation encoding="application/x-tex">0000\;0000\;0040\;0100_8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">0000</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0000</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0040</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">010</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center"><code>sd x11, 32(x3)</code></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0000</mn><mtext>  </mtext><mn>0000</mn><mtext>  </mtext><mn>0040</mn><mtext>  </mtext><mn>010</mn><msub><mn>4</mn><mn>8</mn></msub></mrow><annotation encoding="application/x-tex">0000\;0000\;0040\;0104_8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">0000</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0000</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0040</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">010</span><span class="mord"><span class="mord">4</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center"><code>jal x1, -260</code></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mrow><annotation encoding="application/x-tex">\vdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.03em;"></span><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mrow><annotation encoding="application/x-tex">\vdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.03em;"></span><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span></span></td></tr><tr><td style="text-align:center">Data segment</td><td style="text-align:center">Address</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0000</mn><mtext>  </mtext><mn>0000</mn><mtext>  </mtext><mn>1000</mn><mtext>  </mtext><mn>000</mn><msub><mn>0</mn><mn>8</mn></msub></mrow><annotation encoding="application/x-tex">0000\;0000\;1000\;0000_8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">0000</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0000</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1000</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">000</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">(X)</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mrow><annotation encoding="application/x-tex">\vdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.03em;"></span><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mrow><annotation encoding="application/x-tex">\vdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.03em;"></span><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span></span></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0000</mn><mtext>  </mtext><mn>0000</mn><mtext>  </mtext><mn>1000</mn><mtext>  </mtext><mn>002</mn><msub><mn>0</mn><mn>8</mn></msub></mrow><annotation encoding="application/x-tex">0000\;0000\;1000\;0020_8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">0000</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0000</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1000</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">002</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center">(Y )</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mrow><annotation encoding="application/x-tex">\vdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.03em;"></span><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mrow><annotation encoding="application/x-tex">\vdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.03em;"></span><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span></span></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">Instructions: Language of the Computer</summary>
    
    
    
    <category term="学习" scheme="https://zivmax.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机科学" scheme="https://zivmax.top/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
    <category term="CS110" scheme="https://zivmax.top/tags/CS110/"/>
    
    <category term="上科大" scheme="https://zivmax.top/tags/%E4%B8%8A%E7%A7%91%E5%A4%A7/"/>
    
    <category term="计算机体系架构" scheme="https://zivmax.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/"/>
    
    <category term="笔记" scheme="https://zivmax.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Unfinished" scheme="https://zivmax.top/tags/Unfinished/"/>
    
  </entry>
  
  <entry>
    <title>CS110 Note [2]</title>
    <link href="https://zivmax.top/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/02/23/CS110/CS110-Note-2/"/>
    <id>https://zivmax.top/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/02/23/CS110/CS110-Note-2/</id>
    <published>2024-02-23T01:37:52.000Z</published>
    <updated>2024-04-08T07:23:54.807Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Using-Bits-to-represent-everything">Using Bits to represent everything</h1><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span> bits <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>↔</mo></mrow><annotation encoding="application/x-tex">\leftrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">↔</span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>N</mi></msup></mrow><annotation encoding="application/x-tex">2^N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span></span></span></span></span></span></span> different values, which could be used to abstractly represent a set of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>N</mi></msup></mrow><annotation encoding="application/x-tex">2^N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span></span></span></span></span></span></span> different things in real world.</p><h1 id="Hex-Decimal-and-Binary">Hex, Decimal and Binary</h1><h2 id="Hexadecimal">Hexadecimal</h2><p>Hexadecimal, or &quot;hex&quot; for short, is a way of counting that uses 16 symbols instead of the usual 10 symbols (0-9) we use in everyday life. In hex, we use the numbers 0-9 and the letters A-F to represent values from 0 to 15.</p><p>Here's a quick comparison of decimal (base-10) and hexadecimal (base-16) counting:</p><table><thead><tr><th></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td>Decimal</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">4</td><td style="text-align:center">5</td><td style="text-align:center">6</td><td style="text-align:center">7</td><td style="text-align:center">8</td><td style="text-align:center">9</td><td style="text-align:center">10</td><td style="text-align:center">11</td><td style="text-align:center">12</td><td style="text-align:center">13</td><td style="text-align:center">14</td><td style="text-align:center">15</td><td style="text-align:center">16</td><td style="text-align:center">17</td></tr><tr><td>Hex</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">4</td><td style="text-align:center">5</td><td style="text-align:center">6</td><td style="text-align:center">7</td><td style="text-align:center">8</td><td style="text-align:center">9</td><td style="text-align:center">A</td><td style="text-align:center">B</td><td style="text-align:center">C</td><td style="text-align:center">D</td><td style="text-align:center">E</td><td style="text-align:center">F</td><td style="text-align:center">10</td><td style="text-align:center">11</td></tr></tbody></table><h2 id="Binary">Binary</h2><p>Binary is also a way of counting, but it only uses two symbols: 0 and 1. This is because computers are made up of tiny switches that can only be in one of two states: on or off. We can use these switches to represent the binary numbers 0 and 1.</p><p>Here's a quick comparison of decimal (base-10) and binary (base-2) counting:</p><table><thead><tr><th></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td>Decimal</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">4</td><td style="text-align:center">5</td><td style="text-align:center">6</td><td style="text-align:center">7</td><td style="text-align:center">8</td><td style="text-align:center">9</td><td style="text-align:center">10</td><td style="text-align:center">11</td><td style="text-align:center">12</td><td style="text-align:center">13</td><td style="text-align:center">14</td><td style="text-align:center">15</td><td style="text-align:center">16</td></tr><tr><td>Binary</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">10</td><td style="text-align:center">11</td><td style="text-align:center">100</td><td style="text-align:center">101</td><td style="text-align:center">110</td><td style="text-align:center">111</td><td style="text-align:center">1000</td><td style="text-align:center">1001</td><td style="text-align:center">1010</td><td style="text-align:center">1011</td><td style="text-align:center">1100</td><td style="text-align:center">1101</td><td style="text-align:center">1110</td><td style="text-align:center">1111</td><td style="text-align:center">10000</td></tr></tbody></table><h2 id="Converting-between-Hex-Decimal-and-Binary">Converting between Hex, Decimal and Binary</h2><h3 id="Decimal-to-Hex-and-Binary"><strong>Decimal to Hex and Binary</strong></h3><p>Converting hex and binary to decimal is easy. You just need to use the order of the digits and multiply each digit by the base of the system raised to the power of its position. For example, the hex number 2A3F can be converted to decimal like this:</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>A</mi><mn>3</mn><msub><mi>F</mi><mn>16</mn></msub><mo>=</mo><mn>2</mn><mo>×</mo><mn>1</mn><msup><mn>6</mn><mn>3</mn></msup><mo>+</mo><mn>10</mn><mo>×</mo><mn>1</mn><msup><mn>6</mn><mn>2</mn></msup><mo>+</mo><mn>3</mn><mo>×</mo><mn>1</mn><msup><mn>6</mn><mn>1</mn></msup><mo>+</mo><mn>15</mn><mo>×</mo><mn>1</mn><msup><mn>6</mn><mn>0</mn></msup><mo>=</mo><mn>1078</mn><msub><mn>3</mn><mn>10</mn></msub></mrow><annotation encoding="application/x-tex">2A3F_{16} = 2 \times 16^3 + 10 \times 16^2 + 3 \times 16^1 + 15 \times 16^0 = 10783_{10}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord">2</span><span class="mord mathnormal">A</span><span class="mord">3</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">16</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mord"><span class="mord">6</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">10</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mord"><span class="mord">6</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mord"><span class="mord">6</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">15</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">6</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">1078</span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><h3 id="Hex-and-Binary-to-Decimal"><strong>Hex and Binary to Decimal</strong></h3><p>Converting decimal to hex and binary needs a little more complicated algorithm.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decimal_to_base</span>(<span class="params">base</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">convert</span>(<span class="params">n</span>):</span><br><span class="line">        <span class="keyword">if</span> n &lt; base:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">str</span>(n)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> convert(n // base) + <span class="built_in">str</span>(n % base)</span><br><span class="line">    <span class="keyword">return</span> convert</span><br><span class="line"></span><br><span class="line">decimal_to_hex = decimal_to_base(<span class="number">16</span>)</span><br><span class="line">decimal_to_binary = decimal_to_base(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="Hex-and-Binary-Conversion"><strong>Hex and Binary Conversion</strong></h3><p>Converting between hex and binary is quite easy. Why?</p><p>By observing the table below, we can see that each hex digit corresponds to a 4-bit binary number:</p><table><thead><tr><th></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td>Hex</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">4</td><td style="text-align:center">5</td><td style="text-align:center">6</td><td style="text-align:center">7</td><td style="text-align:center">8</td><td style="text-align:center">9</td><td style="text-align:center">A</td><td style="text-align:center">B</td><td style="text-align:center">C</td><td style="text-align:center">D</td><td style="text-align:center">E</td><td style="text-align:center">F</td></tr><tr><td>Binary</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">10</td><td style="text-align:center">11</td><td style="text-align:center">100</td><td style="text-align:center">101</td><td style="text-align:center">110</td><td style="text-align:center">111</td><td style="text-align:center">1000</td><td style="text-align:center">1001</td><td style="text-align:center">1010</td><td style="text-align:center">1011</td><td style="text-align:center">1100</td><td style="text-align:center">1101</td><td style="text-align:center">1110</td><td style="text-align:center">1111</td></tr></tbody></table><p>So to convert a hex number to binary, we just need to convert each hex digit to its corresponding 4-bit binary number. For example, the hex number 2A3F can be converted to binary like this:</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>A</mi><mn>3</mn><msub><mi>F</mi><mn>16</mn></msub><mo>=</mo><mn>001010100011111</mn><msub><mn>1</mn><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">2A3F_{16} = 0010 1010 0011 1111_{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord">2</span><span class="mord mathnormal">A</span><span class="mord">3</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">16</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">001010100011111</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p>Since <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span> corresponds to <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0010</mn></mrow><annotation encoding="application/x-tex">0010</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0010</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span> corresponds to <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1010</mn></mrow><annotation encoding="application/x-tex">1010</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1010</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span> corresponds to <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0011</mn></mrow><annotation encoding="application/x-tex">0011</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0011</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi></mrow><annotation encoding="application/x-tex">F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span></span></span></span> corresponds to <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1111</mn></mrow><annotation encoding="application/x-tex">1111</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1111</span></span></span></span>.</p><h1 id="Number-Representation-in-Computer">Number Representation in Computer</h1><h2 id="Integer-Representation">Integer Representation</h2><p>Under the hood, the computer represents the an integer using bits, with binary. Since the convinience of converting between hex and binary, we usually use hex to represent the bits when we acutally view a binary number because the binary representaion is quite too long.</p><p>If the integer is unsigned, we can use all the bits to represent the numeral. The direct conversion from binary to decimal is the correspongding number. When we need to represent a signed integer, things are getting more complex.</p><p>Typically, there are three ways to represent the sign of a integer in computer:</p><ol><li><strong>Sign-Magnitude</strong>: The leftmost bit is used to represent the sign of the integer. 0 for positive and 1 for negative.<blockquote><p>For example, the 8-bit sign-magnitude representation of the integer 5 is <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>00000101</mn></mrow><annotation encoding="application/x-tex">00000101</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">00000101</span></span></span></span>, and the representation of -5 is <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10000101</mn></mrow><annotation encoding="application/x-tex">10000101</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10000101</span></span></span></span>.</p></blockquote></li><li><strong>One's Complement</strong>: The leftmost bit is used to represent the sign of the integer. 0 for positive and 1 for negative. The negative integer is represented by flipping all the bits of the positive integer.<blockquote><p>For example, the 8-bit one's complement representation of the integer 5 is <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>00000101</mn></mrow><annotation encoding="application/x-tex">00000101</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">00000101</span></span></span></span>, and the representation of -5 is <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>11111010</mn></mrow><annotation encoding="application/x-tex">11111010</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">11111010</span></span></span></span>.</p></blockquote></li><li><strong>Two's Complement</strong>: The leftmost bit is used to represent the sign of the integer. 0 for positive and 1 for negative. The negative integer is represented by flipping all the bits of the positive integer and then adding 1 to the result.<blockquote><p>For example, the 8-bit two's complement representation of the integer 5 is <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>00000101</mn></mrow><annotation encoding="application/x-tex">00000101</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">00000101</span></span></span></span>, and the representation of -5 is <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>11111010</mn><mo>+</mo><mn>1</mn><mo>=</mo><mn>11111011</mn></mrow><annotation encoding="application/x-tex">11111010 + 1 = 11111011</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">11111010</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">11111011</span></span></span></span>.</p></blockquote></li></ol><p>There are obvious shortcomings of first two methods.</p><p>For <strong>sign-magnitude</strong>:</p><ul><li>There are two representations for zero: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>00000000</mn></mrow><annotation encoding="application/x-tex">00000000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">00000000</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10000000</mn></mrow><annotation encoding="application/x-tex">10000000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10000000</span></span></span></span>. This makes the arithmetic operations more complicated.</li><li>When we add number, we need to check the sign bit and then perform the operation. Otherwise, this will happen:<blockquote><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>00000101</mn><mo stretchy="false">(</mo><mn>5</mn><mo stretchy="false">)</mo><mo>+</mo><mn>10000101</mn><mo stretchy="false">(</mo><mo>−</mo><mn>5</mn><mo stretchy="false">)</mo><mo>=</mo><mn>10001010</mn><mo stretchy="false">(</mo><mo>−</mo><mn>10</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">00000101(5) + 10000101(-5) = 10001010(-10)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">00000101</span><span class="mopen">(</span><span class="mord">5</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">10000101</span><span class="mopen">(</span><span class="mord">−</span><span class="mord">5</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">10001010</span><span class="mopen">(</span><span class="mord">−</span><span class="mord">10</span><span class="mclose">)</span></span></span></span>.</p></blockquote></li></ul><p>For <strong>one's complement</strong>:</p><ul><li>Still, there are two representations for zero: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>00000000</mn></mrow><annotation encoding="application/x-tex">00000000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">00000000</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>11111111</mn></mrow><annotation encoding="application/x-tex">11111111</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">11111111</span></span></span></span>.</li></ul><p>So, in the end, the <em>two's complement</em> is the most widely used method to represent the sign of a integer in computer.</p><h2 id="Integer-Extension">Integer Extension</h2><p>Inside the computer, there's chance that we need to extend the bits of an integer. Such as convert a 8-bit integer to a 16-bit integer. There are two ways to do this:</p><ol><li><p><strong>Zero Extension</strong>: The leftmost bit is used to represent the sign of the integer. 0 for positive and 1 for negative. The new bits are filled with 0.</p></li><li><p><strong>Sign Extension</strong>: The leftmost bit is used to represent the sign of the integer. 0 for positive and 1 for negative. The leftmost bit is copied to the new bits.</p><blockquote><p>For example, the 8-bit sign-magnitude representation of the integer -5 is <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10000101</mn></mrow><annotation encoding="application/x-tex">10000101</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10000101</span></span></span></span>, and the 16-bit sign-magnitude representation of -5 is <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1111111110000101</mn></mrow><annotation encoding="application/x-tex">11111111 10000101</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1111111110000101</span></span></span></span>.</p></blockquote></li></ol><p>Obviously, if we choose to use <em>two's complement</em> to represent the sign of a integer, the sign extension will be the only way to extend the bits of an integer.</p><h2 id="Floating-Point-Representation">Floating Point Representation</h2><p><em>Floating point</em> is used to represent the real number, compared to integer, real number sometime have the point.</p><p>The term floating point is more like a relative name come from the idea of <em>fixed point</em>, which is used to represent real number too.</p><h3 id="Fixed-Point">Fixed Point</h3><p>Like we represent sign and the numeral of a integer by using different specific bits, we can also represent the sign, the integer part and the fractional part of a real number by using different specific bits.</p><p>For example, we can use the first bit to represent the sign of the real number, the next 4 bits to represent the integer part and the last 3 bits to represent the fractional part.</p><blockquote><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10.101</mn><msub><mn>0</mn><mn>2</mn></msub><mo>=</mo><mn>1</mn><mo>×</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><mn>1</mn><mo>×</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>+</mo><mn>1</mn><mo>×</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>3</mn></mrow></msup><mo>=</mo><mn>2.62</mn><msub><mn>5</mn><mn>10</mn></msub></mrow><annotation encoding="application/x-tex">10.1010_{2} = 1 \times 2^1 + 1 \times 2^{-1}  + 1 \times 2^{-3}  = 2.625_{10}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">10.101</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">2.62</span><span class="mord"><span class="mord">5</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p></blockquote><p>We can see that the number of bits used to represent the fractional part is fixed, which is determined by how many bits we use to represent the fractional part. This is why it is called <em>fixed point</em>.</p><h3 id="Basic-Floating-Point">Basic Floating Point</h3><p>To understand the idea of <em>floating point</em>, we need to understand the idea of <em>scientific notation</em>.</p><p>In decimal scientific notation, a number is represented as a product of a mantissa and a power of 10.</p><blockquote><p>For example, the number 1234 can be represented as <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1.234</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">1.234 \times 10^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1.234</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span>.</p></blockquote><p>In binary scientific notation, a number is represented as a product of a mantissa and a power of 2.</p><blockquote><p>For example, the number 10 can be represented as <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1.0</mn><msub><mn>1</mn><mn>2</mn></msub><mo>×</mo><msubsup><mn>2</mn><mn>10</mn><mn>3</mn></msubsup></mrow><annotation encoding="application/x-tex">1.01_2 \times 2_{10}^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">1.0</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span></span></span></span>.</p></blockquote><p>The idea of <em>floating point</em> is similar to the idea of <em>scientific notation</em>. We can represent a real number as a product of a mantissa and a power of 2.</p><p>The normalized format of scientific notation in binary is:</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>1.</mn><msub><mi>x</mi><mrow><mi>b</mi><mi>i</mi><mi>n</mi></mrow></msub><mo>×</mo><msup><mn>2</mn><msub><mi>y</mi><mrow><mi>b</mi><mi>i</mi><mi>n</mi></mrow></msub></msup></mrow><annotation encoding="application/x-tex">1.x_{bin} \times 2^{y_{bin}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">1.</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">bin</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7144em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">bin</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1512em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>Only <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> on the left side of the point is needed for normalization. Just like in decimal scientific notation, we can represent the number <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0.001</mn></mrow><annotation encoding="application/x-tex">0.001</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.001</span></span></span></span> as <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1.0</mn><mo>×</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>3</mn></mrow></msup></mrow><annotation encoding="application/x-tex">1.0 \times 2^{-3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1.0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span> to make sure on the left side of the point there is only one nonzero digit.</p><p>For a 32 bits floating point, the structure of the representation is:</p><table><thead><tr><th>sign</th><th>exponent (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>)</th><th>significand (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>)</th></tr></thead><tbody><tr><td>1 bit</td><td>8 bits</td><td>23 bits</td></tr></tbody></table><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mtext>sign</mtext></msup><mo>×</mo><msub><mi>x</mi><mrow><mi>b</mi><mi>i</mi><mi>n</mi></mrow></msub><mo>×</mo><msup><mn>2</mn><msub><mi>y</mi><mrow><mi>b</mi><mi>i</mi><mi>n</mi></mrow></msub></msup></mrow><annotation encoding="application/x-tex">(-1)^\text{sign} \times x_{bin} \times 2^{y_{bin}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1305em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8805em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord mtight">sign</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">bin</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7144em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">bin</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1512em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>For this naive implementaion of floating point, the range of representation is:</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">[</mo><mo>−</mo><mn>3.4</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>38</mn></msup><mo separator="true">,</mo><mtext>  </mtext><mo>−</mo><mn>1.2</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>38</mn></mrow></msup><mo stretchy="false">]</mo><mo>∪</mo><mo stretchy="false">[</mo><mn>1.2</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>38</mn></mrow></msup><mo separator="true">,</mo><mtext>  </mtext><mn>3.4</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>38</mn></msup><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[-3.4 \times 10^{38},\;-1.2 \times 10^{-38}] \cup [1.2 \times 10^{-38},\;3.4 \times 10^{38}]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">3.4</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0585em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">38</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">−</span><span class="mord">1.2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">38</span></span></span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1.2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0585em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">38</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3.4</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">38</span></span></span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span></span></p><p>which does not include the vital <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>.</p><h3 id="IEEE-754-Floating-Point-Standard">IEEE 754 Floating Point Standard</h3><p>Compared to the naive implementaion of floating point, the IEEE 754 Floating Point Standard majorly differs by using bias to represent the exponent part and implict leading <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> in significand part.</p><p>For a 32 bits floating point, the structure of the representation is:</p><table><thead><tr><th>sign</th><th>exponent (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>)</th><th>significand (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>)</th></tr></thead><tbody><tr><td>1 bit</td><td>8 bits</td><td>23 bits</td></tr></tbody></table><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mtext>sign</mtext></msup><mo>×</mo><mo stretchy="false">(</mo><mn>1.</mn><msub><mi>x</mi><mrow><mi>b</mi><mi>i</mi><mi>n</mi></mrow></msub><mo stretchy="false">)</mo><mo>×</mo><msup><mn>2</mn><mrow><msub><mi>y</mi><mrow><mi>b</mi><mi>i</mi><mi>n</mi></mrow></msub><mo>−</mo><mn>127</mn></mrow></msup></mrow><annotation encoding="application/x-tex">(-1)^\text{sign} \times (1.x_{bin}) \times 2^{y_{bin} - 127}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1305em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8805em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord mtight">sign</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1.</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">bin</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">bin</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1512em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">127</span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>The range of representation is:</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">[</mo><mo>−</mo><mn>3.4</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>38</mn></msup><mo separator="true">,</mo><mtext>  </mtext><mo>−</mo><mn>1.2</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>38</mn></mrow></msup><mo stretchy="false">]</mo><mo>∪</mo><mo stretchy="false">[</mo><mn>1.2</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>38</mn></mrow></msup><mo separator="true">,</mo><mtext>  </mtext><mn>3.4</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>38</mn></msup><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[-3.4 \times 10^{38},\;-1.2 \times 10^{-38}] \cup [1.2 \times 10^{-38},\;3.4 \times 10^{38}]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">3.4</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0585em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">38</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">−</span><span class="mord">1.2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">38</span></span></span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1.2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0585em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">38</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3.4</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">38</span></span></span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span></span></p><p>which does still not include the vital <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>.</p><p>The bias helps using unsigned integer to represent the exponent part, which makes the comparison between two floating point numbers easier and simplifies the hardware design.</p><p>The implict leading <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> makes the numeral part from 23 bits to 24 bits, which makes the representation more accurate. We can make the leading <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> implict is because <strong>any normlized floating point number's significand has a leading <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></strong>. So if we always maintain the floating point number in normalized form, we assume the leading <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> is always there.</p><p>Also to notice that after hiding the leading <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>, the left part of the significand is usually called <em>mantissa</em>.</p><p>For a 64 bits floating point, the structure is similar:</p><table><thead><tr><th>sign</th><th>exponent (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>)</th><th>significand (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>)</th></tr></thead><tbody><tr><td>1 bit</td><td>11 bits</td><td>52 bits</td></tr></tbody></table><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mtext>sign</mtext></msup><mo>×</mo><mo stretchy="false">(</mo><mn>1.</mn><msub><mi>x</mi><mrow><mi>b</mi><mi>i</mi><mi>n</mi></mrow></msub><mo stretchy="false">)</mo><mo>×</mo><msup><mn>2</mn><mrow><msub><mi>y</mi><mrow><mi>b</mi><mi>i</mi><mi>n</mi></mrow></msub><mo>−</mo><mn>1023</mn></mrow></msup></mrow><annotation encoding="application/x-tex">(-1)^\text{sign} \times (1.x_{bin}) \times 2^{y_{bin} - 1023}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1305em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8805em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord mtight">sign</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1.</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">bin</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">bin</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1512em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1023</span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>The range of representation is:</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">[</mo><mo>−</mo><mn>1.8</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>308</mn></msup><mo separator="true">,</mo><mtext>  </mtext><mo>−</mo><mn>2.2</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>308</mn></mrow></msup><mo stretchy="false">]</mo><mo>∪</mo><mo stretchy="false">[</mo><mn>2.2</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>308</mn></mrow></msup><mo separator="true">,</mo><mtext>  </mtext><mn>1.8</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>308</mn></msup><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[-1.8 \times 10^{308},\;-2.2 \times 10^{-308}] \cup [2.2 \times 10^{-308},\;1.8 \times 10^{308}]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">1.8</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0585em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">308</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">−</span><span class="mord">2.2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">308</span></span></span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">2.2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0585em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">308</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1.8</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">308</span></span></span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span></span></p><p>Notice now our floating point only use normalized representation, but infact if we accept the denormalized representation, we can represent even smaller numbers.</p><p>The smallest normalized floating points of 32bits is:</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>1.0000</mn><mtext> </mtext><mn>0000</mn><mtext> </mtext><mn>0000</mn><mtext> </mtext><mn>0000</mn><mtext> </mtext><mn>0000</mn><mtext> </mtext><mn>00</mn><msub><mn>0</mn><mrow><mi>b</mi><mi>i</mi><mi>n</mi></mrow></msub><mo>×</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>126</mn></mrow></msup><mo>≈</mo><mn>1.4</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>45</mn></mrow></msup></mrow><annotation encoding="application/x-tex">1.0000\ 0000\ 0000\ 0000\ 0000\ 000_{bin} \times 2^{-126} \approx 1.4 \times 10^{-45}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">1.0000</span><span class="mspace"> </span><span class="mord">0000</span><span class="mspace"> </span><span class="mord">0000</span><span class="mspace"> </span><span class="mord">0000</span><span class="mspace"> </span><span class="mord">0000</span><span class="mspace"> </span><span class="mord">00</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">bin</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">126</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1.4</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">45</span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>But the smallest denormalized floating points of 32bits is:</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>0.0000</mn><mtext> </mtext><mn>0000</mn><mtext> </mtext><mn>0000</mn><mtext> </mtext><mn>0000</mn><mtext> </mtext><mn>0000</mn><mtext> </mtext><mn>00</mn><msub><mn>1</mn><mrow><mi>b</mi><mi>i</mi><mi>n</mi></mrow></msub><mo>×</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>126</mn></mrow></msup><mo>=</mo><mn>1.</mn><msub><mn>0</mn><mrow><mi>b</mi><mi>i</mi><mi>n</mi></mrow></msub><mo>×</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>149</mn></mrow></msup><mo>≈</mo><mn>1.4</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>45</mn></mrow></msup></mrow><annotation encoding="application/x-tex">0.0000\ 0000\ 0000\ 0000\ 0000\ 001_{bin} \times 2^{-126} = 1.0_{bin} \times 2^{-149} \approx 1.4 \times 10^{-45}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">0.0000</span><span class="mspace"> </span><span class="mord">0000</span><span class="mspace"> </span><span class="mord">0000</span><span class="mspace"> </span><span class="mord">0000</span><span class="mspace"> </span><span class="mord">0000</span><span class="mspace"> </span><span class="mord">00</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">bin</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">126</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">1.</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">bin</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">149</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1.4</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">45</span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>Thus in IEEE 754, <strong>When the exponent part is all <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>, the number is a denormalized number</strong>. The significand part is interpreted as <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0.</mn><msub><mi>x</mi><mrow><mi>b</mi><mi>i</mi><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">0.x_{bin}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">0.</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">bin</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> (No leading <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>), and the exponent part is interpreted as <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mn>126</mn></mrow><annotation encoding="application/x-tex">-126</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">126</span></span></span></span> for a 32 bits floating point and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mn>1022</mn></mrow><annotation encoding="application/x-tex">-1022</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">1022</span></span></span></span> for a 64 bits floating point. So the smallest positive number we can represent is <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mo>−</mo><mn>126</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{-126}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">126</span></span></span></span></span></span></span></span></span></span></span></span> (about <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1.4</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>45</mn></mrow></msup></mrow><annotation encoding="application/x-tex">1.4 × 10^{-45}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1.4</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">45</span></span></span></span></span></span></span></span></span></span></span></span>) for a 32 bits floating point and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mo>−</mo><mn>1022</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{-1022}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1022</span></span></span></span></span></span></span></span></span></span></span></span> (about <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>5.0</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>324</mn></mrow></msup></mrow><annotation encoding="application/x-tex">5.0 × 10^{-324}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">5.0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">324</span></span></span></span></span></span></span></span></span></span></span></span>) for a 64 bits floating point.</p><p>In the following Chapters, we'll use IEEE 754 Floating Point Standard.</p><h3 id="Special-Values">Special Values</h3><p>In the IEEE 754 Floating Point Standard, there are some special values to represent some special real numbers.</p><p>Bellow is the table of the special values for a 32 bits floating point:</p><table><thead><tr><th style="text-align:center">Single precision</th><th style="text-align:center"></th><th style="text-align:center">Double precision</th><th style="text-align:center"></th><th style="text-align:center">Object represented</th></tr></thead><tbody><tr><td style="text-align:center">Exponent</td><td style="text-align:center">Fraction</td><td style="text-align:center">Exponent</td><td style="text-align:center">Fraction</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">Nonzero</td><td style="text-align:center">0</td><td style="text-align:center">Nonzero</td><td style="text-align:center">± denormalized number</td></tr><tr><td style="text-align:center">1–254</td><td style="text-align:center">Anything</td><td style="text-align:center">1–2046</td><td style="text-align:center">Anything</td><td style="text-align:center">± floating-point number</td></tr><tr><td style="text-align:center">255</td><td style="text-align:center">0</td><td style="text-align:center">2047</td><td style="text-align:center">0</td><td style="text-align:center">± infinity</td></tr><tr><td style="text-align:center">255</td><td style="text-align:center">Nonzero</td><td style="text-align:center">2047</td><td style="text-align:center">Nonzero</td><td style="text-align:center">NaN (Not a Number)</td></tr></tbody></table><h1 id="Arithmetic-in-Computers">Arithmetic in Computers</h1><h2 id="Integer-Arithmetic">Integer Arithmetic</h2><h3 id="Everything-is-Addition">Everything is Addition</h3><p>Thanks to the &quot;strange&quot; way we represent the integers we learn above, for any addition and substraction, so long as we consider them as two signed integers' addtion, we just need to add their binary representation directly, then we get the answer.</p><p>For example, let's consider <code>3 - 4</code>, which should be condsidered as <code>3 + -4</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    00000000 00000000 00000000 00000110 (3)</span><br><span class="line">+   11111111 11111111 11111111 11111001 (-4) </span><br><span class="line">--------------------------------------</span><br><span class="line">    11111111 11111111 11111111 11111111 (-1)</span><br></pre></td></tr></table></figure><p>If you're unfamiliar with binary addition and can not understand the above arithmetic, go check <a href="https://www.bilibili.com/video/BV1EW411u7th?p=4&amp;vd_source=fdfd8451279302b7750ea2a395a2fe38">this video</a>.</p><p>As for other types of addtion and subtraction, they are the same.</p><h3 id="Overflow-and-Underflow">Overflow and Underflow</h3><p>What will happen if we do calculation like this?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    01111111 11111111 11111111 11111111 (2^31 - 1)</span><br><span class="line">+   00000000 00000000 00000000 00000001 (1)</span><br></pre></td></tr></table></figure><p>By arithmetic in binary, the result should be:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10000000 00000000 00000000 00000000 (-2^31)</span><br></pre></td></tr></table></figure><p>Notice the intepretation of the result is not <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>3</mn></msup><mn>1</mn><mo>−</mo><mn>1</mn><mo>=</mo><msup><mn>2</mn><mn>3</mn></msup><mn>1</mn></mrow><annotation encoding="application/x-tex">2^31 - 1 = 2^31</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mord">1</span></span></span></span>, but <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>3</mn></msup><mn>1</mn></mrow><annotation encoding="application/x-tex">-2^31</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mord">1</span></span></span></span>. This is called <em>overflow</em>. And it's due to the limitation of the bits'amount we use to represent the integer. <strong>We try to represent a number that is larger than the largest number we can represent.</strong></p><p>Correspondingly, if we do calculation like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    10000000 00000000 00000000 00000000 (-2^31)</span><br><span class="line">-   00000000 00000000 00000000 00000001 (1)</span><br></pre></td></tr></table></figure><p>The result should be:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">01111111 11111111 11111111 11111111 (2^31 - 1)</span><br></pre></td></tr></table></figure><p>This is called <em>underflow</em>. The reason is the same as overflow. <strong>We try to represent a number that is smaller than the smallest number we can represent.</strong></p><h2 id="Floating-Point-Arithmetic">Floating Point Arithmetic</h2><h3 id="Arithmetic-in-Practical-Life">Arithmetic in Practical Life</h3><p>Recall how we do the arithmetic of numbers represented by scitific notation:</p><ol><li><p>Assumming we are adding <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1.23</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">1.23 \times 10^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1.23</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4.56</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">4.56 \times 10^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">4.56</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>:</p></li><li><p>First we will &quot;align&quot; the two number, letting them using the same power of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10</mn></mrow><annotation encoding="application/x-tex">10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10</span></span></span></span></p><blockquote><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mn>1.230</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup><mo>=</mo><mn>1.230</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mn>4.560</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>2</mn></msup><mo>=</mo><mn>0.456</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">   \begin{align*}       1.230 \times 10^3 = 1.230 \times 10^3&amp; \\       4.560 \times 10^2 = 0.456 \times 10^3&amp;   \end{align*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0482em;vertical-align:-1.2741em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7741em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1.230</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1.230</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span><span style="top:-2.3859em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4.560</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0.456</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2741em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7741em;"><span style="top:-3.7741em;"><span class="pstrut" style="height:2.8641em;"></span><span class="mord"><span class="mord"></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:2.8641em;"></span><span class="mord"><span class="mord"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2741em;"><span></span></span></span></span></span></span></span></span></span></span></span></p></blockquote></li><li><p>Then we can add the two number's significand directly:</p><blockquote><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em" rowlines="none solid"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mn>1.230</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo>+</mo><mtext> </mtext><mn>0.456</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mn>1.686</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">   \begin{align*}        1.230 \times 10^3&amp; \\       +\ 0.456 \times 10^3&amp; \\       \hline       1.686 \times 10^3&amp;    \end{align*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.5723em;vertical-align:-2.0362em;"></span><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5362em;"><span style="top:-4.5362em;"><span class="pstrut" style="height:4.5362em;"></span><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5362em;"><span style="top:-4.6721em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1.230</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span><span style="top:-3.1479em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">+</span><span class="mspace"> </span><span class="mord">0.456</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span><span style="top:-1.6238em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1.686</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0362em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5362em;"><span style="top:-4.5362em;"><span class="pstrut" style="height:2.8641em;"></span><span class="mord"><span class="mord"></span></span></span><span style="top:-3.0121em;"><span class="pstrut" style="height:2.8641em;"></span><span class="mord"><span class="mord"></span></span></span><span style="top:-1.4879em;"><span class="pstrut" style="height:2.8641em;"></span><span class="mord"><span class="mord"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0362em;"><span></span></span></span></span></span></span></span><span style="top:-4.0241em;"><span class="pstrut" style="height:4.5362em;"></span><span class="hline" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0362em;"><span></span></span></span></span></span></span></span></span></span></p></blockquote></li><li><p>Then we check if the result is normalized, if not, we normalize it, but in this case, the result is already normalized.</p></li></ol><h3 id="Arithmetic-in-Binary">Arithmetic in Binary</h3><p>In fact the arithmetic of floating point numbers in computer is exactly the same as the arithmetic of floating point numbers in practical life. Just use binary instead of decimal.</p><p>For example, let's consider <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1.0</mn><msub><mn>1</mn><mn>2</mn></msub><mo>×</mo><msup><mn>2</mn><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">1.01_2 \times 2^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">1.0</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1.1</mn><msub><mn>1</mn><mn>2</mn></msub><mo>×</mo><msup><mn>2</mn><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">1.11_2 \times 2^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">1.1</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>:</p><ol><li><p>Align the two numbers (Notcie the exponent part):</p><blockquote><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mn>1.010</mn><mo>×</mo><msup><mn>2</mn><mn>3</mn></msup><mo>=</mo><mn>1.010</mn><mo>×</mo><msup><mn>2</mn><mn>3</mn></msup></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mn>1.110</mn><mo>×</mo><msup><mn>2</mn><mn>2</mn></msup><mo>=</mo><mn>0.111</mn><mo>×</mo><msup><mn>2</mn><mn>3</mn></msup></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">   \begin{align*}       1.010 \times 2^3 = 1.010 \times 2^3&amp; \\       1.110 \times 2^2 = 0.111 \times 2^3&amp;   \end{align*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0482em;vertical-align:-1.2741em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7741em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1.010</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1.010</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span><span style="top:-2.3859em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1.110</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0.111</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2741em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7741em;"><span style="top:-3.7741em;"><span class="pstrut" style="height:2.8641em;"></span><span class="mord"><span class="mord"></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:2.8641em;"></span><span class="mord"><span class="mord"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2741em;"><span></span></span></span></span></span></span></span></span></span></span></span></p></blockquote></li><li><p>Add the two numbers' significand:</p><blockquote><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em" rowlines="none solid"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mn>1.010</mn><mo>×</mo><msup><mn>2</mn><mn>3</mn></msup></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo>+</mo><mtext> </mtext><mn>0.111</mn><mo>×</mo><msup><mn>2</mn><mn>3</mn></msup></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mn>10.001</mn><mo>×</mo><msup><mn>2</mn><mn>3</mn></msup></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">   \begin{align*}        1.010 \times 2^3&amp; \\       +\ 0.111 \times 2^3&amp; \\       \hline       10.001 \times 2^3&amp;    \end{align*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.5723em;vertical-align:-2.0362em;"></span><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5362em;"><span style="top:-4.5362em;"><span class="pstrut" style="height:4.5362em;"></span><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5362em;"><span style="top:-4.6721em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1.010</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span><span style="top:-3.1479em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">+</span><span class="mspace"> </span><span class="mord">0.111</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span><span style="top:-1.6238em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">10.001</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0362em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5362em;"><span style="top:-4.5362em;"><span class="pstrut" style="height:2.8641em;"></span><span class="mord"><span class="mord"></span></span></span><span style="top:-3.0121em;"><span class="pstrut" style="height:2.8641em;"></span><span class="mord"><span class="mord"></span></span></span><span style="top:-1.4879em;"><span class="pstrut" style="height:2.8641em;"></span><span class="mord"><span class="mord"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0362em;"><span></span></span></span></span></span></span></span><span style="top:-4.0241em;"><span class="pstrut" style="height:4.5362em;"></span><span class="hline" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0362em;"><span></span></span></span></span></span></span></span></span></span></p></blockquote></li><li><p>Normalize the result:</p><blockquote><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mn>10.001</mn><mo>×</mo><msup><mn>2</mn><mn>3</mn></msup><mo>=</mo><mn>1.0001</mn><mo>×</mo><msup><mn>2</mn><mn>4</mn></msup></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">   \begin{align*}       10.001 \times 2^3 = 1.0001 \times 2^4&amp;   \end{align*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.5241em;vertical-align:-0.5121em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0121em;"><span style="top:-3.1479em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">10.001</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1.0001</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5121em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0121em;"><span style="top:-3.0121em;"><span class="pstrut" style="height:2.8641em;"></span><span class="mord"><span class="mord"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5121em;"><span></span></span></span></span></span></span></span></span></span></span></span></p></blockquote></li></ol><h3 id="Arithmetic-in-IEEE-754-Floating-Point-Standard">Arithmetic in IEEE 754 Floating Point Standard</h3><p>Now we know how to do the arithmetic of floating point numbers in computer, but there are still some details we need to pay attention tom when we do the arithmetic in IEEE 754 Floating Point Standard.</p><p>This time, we still consider <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1.0</mn><msub><mn>1</mn><mn>2</mn></msub><mo>×</mo><msup><mn>2</mn><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">1.01_2 \times 2^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">1.0</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1.1</mn><msub><mn>1</mn><mn>2</mn></msub><mo>×</mo><msup><mn>2</mn><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">1.11_2 \times 2^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">1.1</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>:</p><ol><li><p>Represent the two numbers in IEEE 754 Floating Point Standard:</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    0 10000010 01000000000000000000000 (1.01 * 2^3)</span><br><span class="line">+   0 10000001 11000000000000000000000 (1.11 * 2^2)</span><br></pre></td></tr></table></figure></li><li><p>Add the implicit leading <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> to the significand part.</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    0 10000010 (1)01000000000000000000000 (1.01 * 2^3)</span><br><span class="line">+   0 10000001 (1)11000000000000000000000 (1.11 * 2^2)</span><br></pre></td></tr></table></figure><p>Notcie now that the mantiassa part become the significand part. From 23-bits to 24-bits.</p></li><li><p>Align the two numbers (Notcie the exponent part):</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    0 10000010 (1)01000000000000000000000 (1.010 * 2^3)</span><br><span class="line">+   0 10000010 (0)11100000000000000000000 (0.111 * 2^3)</span><br></pre></td></tr></table></figure></li><li><p>Add the two numbers' significand:</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    0 10000010 (1)01000000000000000000000 (1.010 * 2^3)</span><br><span class="line">+   0 10000010 (0)11100000000000000000000 (0.111 * 2^3)</span><br><span class="line">--------------------------------------</span><br><span class="line">    0 10000010 (10)0010000000000000000000 (10.001 * 2^3)</span><br></pre></td></tr></table></figure><p>Notice that the significand part is overflowed. We actuall dropped a <code>0</code> in the end of the significand.</p></li><li><p>Normalize the result:</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 10000011 (1)00010000000000000000000 (1.0001 * 2^4)</span><br></pre></td></tr></table></figure><p>Notice that the exponent part is increased by <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>.</p></li><li><p>The final representation:</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 10000011 00010000000000000000000 (1.0001 * 2^4)</span><br></pre></td></tr></table></figure><p>After making the leading <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> implict again, we get the actual bits in the hareware to represent floating point in IEEE 754.</p></li></ol><h3 id="Acurate-Arithmetic-in-IEEE-754">Acurate Arithmetic in IEEE 754</h3><p>In the above example, we can see that there's many chance that we'll drop some bits in the significand part. when the droped bits are non zero, the result will be distorted.</p><p>For example, let's consider we are normalizing such a number:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 10000010 (10)1111111111111111111111 (10.1111111111111111111111 * 2^3)</span><br></pre></td></tr></table></figure><p>After normalization, the result should be:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 10000011 (1)01111111111111111111111 (1.01111111111111111111111 * 2^4)</span><br></pre></td></tr></table></figure><p>And the normalized result is smaller than the actual result by <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0.00000000000000000000001</mn><mo>×</mo><msup><mn>2</mn><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">0.00000000000000000000001 \times 2^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">0.00000000000000000000001</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span> (about <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>8</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>23</mn></mrow></msup></mrow><annotation encoding="application/x-tex">8 \times 10^{-23}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">23</span></span></span></span></span></span></span></span></span></span></span></span>) since we dropped the last bit of the unnormalized significand.</p><p>To reduce the loss caused by the drop of bits, we typically use the following method to do the arithmetic in IEEE 754:</p><ul><li><p>Using 2 buffer bits during the calculation to extend the significand part temporarily.</p><ul><li>The first buffer bit is called <em>guard bit</em>.</li><li>The second buffer bit is called <em>round bit</em>.</li></ul></li><li><p>Using a extra bits to record if there's any bit storing <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> was dropped.</p><ul><li>This bit is called <em>sticky bit</em>.</li></ul></li></ul><p>Here's a demonstration of the method:</p><ol><li><p>Before calculating the mantissa, we add three extra bits to preserve the precision of the result. The three extra bits are the guard bit, the round bit, and the sticky bit.</p><p>Here is a brief explanation of these bits:</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Mantissa of the number (assume normalized):</span><br><span class="line">    1.XXXXXXXXXXXXXXXXXXXXXXX   0   0   0</span><br><span class="line"></span><br><span class="line">    ^         ^                 ^   ^   ^</span><br><span class="line">    |         |                 |   |   |</span><br><span class="line">    |         |                 |   |   -  sticky bit (s)</span><br><span class="line">    |         |                 |   -  round bit (r)</span><br><span class="line">    |         |                 -  guard bit (g)</span><br><span class="line">    |         -  23-bit mantissa from a representation</span><br><span class="line">    -  hidden bit</span><br></pre></td></tr></table></figure></li><li><p>The sticky bit is an indication of whether there are any non-zero bits to the right of the round bit.</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">                                         gr s</span><br><span class="line">Initial:        1.1100000000000000001010000 0</span><br><span class="line">Shift 1 bit:    0.1110000000000000000101000 0</span><br><span class="line">Shift 2 bits:   0.0111000000000000000010100 0</span><br><span class="line">Shift 3 bits:   0.0011100000000000000001010 0</span><br><span class="line">Shift 4 bits:   0.0001110000000000000000101 0</span><br><span class="line">Shift 5 bits:   0.0000111000000000000000010 1</span><br><span class="line">Shift 6 bits:   0.0000011100000000000000001 1</span><br><span class="line">Shift 7 bits:   0.0000001110000000000000000 1</span><br><span class="line">Shift 8 bits:   0.0000000111000000000000000 1</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">Arithmetic for Computers</summary>
    
    
    
    <category term="学习" scheme="https://zivmax.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机科学" scheme="https://zivmax.top/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
    <category term="CS110" scheme="https://zivmax.top/tags/CS110/"/>
    
    <category term="上科大" scheme="https://zivmax.top/tags/%E4%B8%8A%E7%A7%91%E5%A4%A7/"/>
    
    <category term="计算机体系架构" scheme="https://zivmax.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/"/>
    
    <category term="笔记" scheme="https://zivmax.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>CS110 Note [1]</title>
    <link href="https://zivmax.top/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/02/23/CS110/CS110-Note-1/"/>
    <id>https://zivmax.top/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/02/23/CS110/CS110-Note-1/</id>
    <published>2024-02-23T01:37:51.000Z</published>
    <updated>2024-04-08T07:23:11.857Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Eight-Great-Ideas-in-Computer-Architecture">Eight Great Ideas in Computer Architecture</h1><ul><li><p><strong>Design for Moore's Law</strong></p><blockquote><p>As computer designs can take years, the resources available per chip can easily double or quadruple between the start and finish of the project. Like a skeet shooter, computer architects must anticipate where the technology will be when the design finishes rather than design for where it starts.</p></blockquote></li><li><p><strong>Use Abstraction to Simplify Design</strong></p><blockquote><p>The complexity of computer systems makes it impossible to understand every detail of the hardware and software. Abstraction is a way to manage this complexity. By abstracting a system, we can ignore the irrelevant details and focus on the important ones.</p></blockquote></li><li><p><strong>Make the Common Case Fast</strong></p><blockquote><p>Computer architects must design systems that are fast for most of the tims. This is often achieved by making the common case fast and the rare case correct. Ironically, the common case is often easier to make fast than the rare case.</p></blockquote></li><li><p><strong>Performance via Parallelism</strong></p><blockquote><p>The performance of a computer system can be improved by doing more than one thing at a time. This is called parallelism. There are many forms of parallelism, including instruction-level parallelism, data parallelism, and task parallelism.</p></blockquote></li><li><p><strong>Performance via Pipelining</strong></p><blockquote><p>Pipelining is a technique for implementing parallelism within a single processor. It works by breaking down the execution of instructions into a series of independent steps. This allows multiple instructions to be in progress at once. But if we only foucsing on what is piplining, we can image a human assembly line.</p></blockquote></li><li><p><strong>Performance via Prediction</strong></p><blockquote><p>If a case could be faster on average by guessing the outcome, then it is worth the cost of the guess. It mostly happen when a case is easy to guess and the cost of wrong guess is low.</p></blockquote></li><li><p><strong>Hierarchy of Memories</strong></p><blockquote><p>The memory system is organized in a hierarchy of different storage devices. Each device in the hierarchy is larger, slower, and cheaper per byte than the next smaller, faster, and more expensive device. The memory hierarchy is a key to understanding how computer systems achieve good performance at a reasonable cost.</p></blockquote></li><li><p><strong>Dependability via Redundancy</strong></p><blockquote><p>Dependability is the ability to deliver correct service in the presence of faults. Redundancy is a key technique for achieving dependability. Redundancy can be applied to the hardware, the software, and the information. Just like the RAID in hard disk.</p></blockquote></li></ul><h1 id="Bellow-Your-Program">Bellow Your Program</h1><h2 id="From-Application-Software-to-Hardware">From Application Software to Hardware</h2><ul><li><p><strong>Application Software</strong></p><blockquote><p>Application software is the software that is used by the users to perform specific tasks. It is used to solve a particular problem or to do a specific task. For example, word processing, spreadsheet, and database management system.</p></blockquote></li><li><p><strong>System Software</strong></p><blockquote><p>System software is a type of computer program that is designed to run a computer's hardware and application programs. It is designed to provide a platform for running application software. There are many types of systems software, but two types of systems software are central to every computer system today: an operating system and a compiler.</p></blockquote></li><li><p><strong>Hardware</strong></p><blockquote><p>Hardware is the physical components of a computer system. It includes the monitor, keyboard, mouse, and the computer itself. The computer is made up of the CPU, memory, and storage devices.</p></blockquote></li></ul><h2 id="From-High-Level-Language-to-Machine-Language">From High-Level Language to Machine Language</h2><p>To speak with a machine, we need to be able to represent 2 states: 0 and 1, since the easiest signals for computers to understand are on and off, and so the computer alphabet is just two letters. This is called <em>binary</em>.</p><p>But it is hard to write a program in binary. So we need a language that is easier to write and understand. This is called high-level language. But the computer can only understand binary. So we need a way to translate high-level language to machine language. This is called compiler.</p><p>Typically, compilers first translate high-level language to assembly language, and then translate assembly language to machine language.</p><p>Machine language directly read and execute by the computer, and assembly language is a direct hunman-readable representation of machine language.</p><p>High-level language <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mo>→</mo><mrow><mi>c</mi><mi>o</mi><mi>m</mi><mi>p</mi><mi>i</mi><mi>l</mi><mi>e</mi><mi>s</mi></mrow></msup></mrow><annotation encoding="application/x-tex">\to^{compiles}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mrel"><span class="mrel">→</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">co</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">es</span></span></span></span></span></span></span></span></span></span></span></span> Assembly language <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mo>→</mo><mrow><mi>a</mi><mi>s</mi><mi>s</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>l</mi><mi>e</mi><mi>s</mi></mrow></msup></mrow><annotation encoding="application/x-tex">\to^{assembles}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mrel"><span class="mrel">→</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">sse</span><span class="mord mathnormal mtight">mb</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">es</span></span></span></span></span></span></span></span></span></span></span></span> Machine language</p><p>Example of compiling and assembling:</p><ol><li><p>Source code:</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, World!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Assembly code:</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">    .file    &quot;hello.c&quot;</span><br><span class="line">    .intel_syntax noprefix</span><br><span class="line">    .text</span><br><span class="line">    .def    __main;.scl2;.type32;.endef</span><br><span class="line">    .section .rdata,&quot;dr&quot;</span><br><span class="line">.LC0:</span><br><span class="line">    .ascii &quot;Hello, World!\0&quot;</span><br><span class="line">    .text</span><br><span class="line">    .globl    main</span><br><span class="line">    .def    main;.scl2;.type32;.endef</span><br><span class="line">    .seh_proc    main</span><br><span class="line">main:</span><br><span class="line">    push    rbp</span><br><span class="line">    .seh_pushreg    rbp</span><br><span class="line">    mov    rbp, rsp</span><br><span class="line">    .seh_setframe    rbp, 0</span><br><span class="line">    sub    rsp, 32</span><br><span class="line">    .seh_stackalloc    32</span><br><span class="line">    .seh_endprologue</span><br><span class="line">    call    __main</span><br><span class="line">    lea    rax, .LC0[rip]</span><br><span class="line">    mov    rcx, rax</span><br><span class="line">    call    puts</span><br><span class="line">    mov    eax, 0</span><br><span class="line">    add    rsp, 32</span><br><span class="line">    pop    rbp</span><br><span class="line">    ret</span><br><span class="line">    .seh_endproc</span><br><span class="line">    .ident    &quot;GCC: (MinGW-W64 x86_64-ucrt-posix-seh, built by Brecht Sanders) 13.2.0&quot;</span><br><span class="line">    .def    puts;.scl2;.type32;.endef</span><br></pre></td></tr></table></figure></li><li><p>Machine code:</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">000000000010010101010101000001100</span><br><span class="line">110101010101010100000111101010100</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ol><h1 id="Components-of-a-Computer">Components of a Computer</h1><h2 id="The-Big-Picture">The Big Picture</h2><p>The five classic components of a computer are briefly described below. They are:</p><ul><li><p><strong>Input</strong>:</p><blockquote><p>This is the process of entering data and programs into the computer system. You should know that computer is an electronic machine like any other machine which takes as inputs raw data and performs some processing giving out processed data.</p></blockquote></li><li><p><strong>Output</strong>:</p><blockquote><p>The result produced by a computer. It can be called as the processed data given by after data processing.</p></blockquote></li><li><p><strong>Memory</strong>:</p><blockquote><p>This is the part of the computer that stores data. It stores data, intermediate results, and instructions (program).</p></blockquote></li><li><p><strong>Datapath</strong>:</p><blockquote><p>A datapath is a collection of functional units such as arithmetic logic units (ALUs) or multipliers that perform data processing operations, registers, and buses.</p></blockquote></li><li><p><strong>Control</strong>:</p><blockquote><p>The component of the processor that commands the datapath, memory, and I/O devices according to the instructions of the program.</p></blockquote></li></ul><p>The processor (Control and Datapath) gets instructions and data from memory. Input writes data to memory, and output reads data from memory. Control sends the signals that determine the operations of the datapath, memory, input, and output.</p><p>Occasionally, people call the processor the CPU, for the more bureaucratic-sounding central processor unit.</p><h2 id="Slightly-deeper-into-the-Memory">Slightly deeper into the Memory</h2><h3 id="Volatile-Memory">Volatile Memory</h3><p>Storage, such as DRAM, that retains data only if it is receiving power.</p><ul><li><p><strong>Registers</strong>:</p><blockquote><p>Registers are the fastest storage location in the memory hierarchy. They are used to store data that is being used by the CPU. The CPU can access the data in the registers very quickly. The number of registers in a CPU is limited. The registers are used to store the data that is being used by the CPU.</p></blockquote></li><li><p><strong>Cache</strong>:</p><blockquote><p>Cache is a small and fast memory that is located between the CPU and the main memory. It is used to store the frequently accessed data and instructions. The cache memory is faster than the main memory.</p><p>Cache is built using a different memory technology, static random access memory (SRAM).</p></blockquote></li><li><p><strong>Main Memory</strong>:</p><blockquote><p>Main memory is the primary memory of the computer. It is used to store the data and instructions that are being used by the CPU. The main memory is slower than the cache memory.</p><p>Main memory is built using a different memory technology, dynamic random access memory (DRAM).</p></blockquote></li></ul><h3 id="Nonvolatile-Memory">Nonvolatile Memory</h3><p>A form of memory that retains data even in the absence of a power source and that is used to store programs between runs.</p><p>Such as flash memory, that retains data even when it is not receiving power.</p><ul><li><p><strong>Hard Disk</strong>:</p><blockquote><p>A form of nonvolatile secondary memory composed of rotating platters coated with a magnetic recording material. Because they are rotating mechanical devices, access times are about 5 to 20 milliseconds and cost per gigabyte in 2012 was $0.05 to $0.10.</p></blockquote></li><li><p><strong>Flash Memory</strong>:</p><blockquote><p>A nonvolatile semiconductor memory. It is cheaper and slower than DRAM but more expensive per bit and faster than magnetic disks. Access times are about 5 to 50 microseconds and cost per gigabyte in 2012 was $0.75 to $1.00</p></blockquote></li></ul><p>Most of the nonviolatile memory belongs to the secondary memory, which is used to store programs and data between runs.</p><h1 id="Performance">Performance</h1><h2 id="Defining-Performance">Defining Performance</h2><p>Typically, we use response time or throughput to measure the performance of a computer system.</p><ul><li><p><strong>Response Time (Execution time)</strong>:</p><blockquote><p>The time it takes to complete some task. For example, the time it takes to load a web page or the time it takes to execute a program.</p></blockquote></li><li><p><strong>Throughput (Bandwidth)</strong>:</p><blockquote><p>The number of tasks completed per unit of time. For example, the number of web pages loaded per second or the number of programs executed per hour.</p></blockquote></li></ul><p>In the first few chapters, we will focus on the response time.</p><h2 id="Measuring-Performance">Measuring Performance</h2><p>We use time to measure the performance of a computer system. But the straightforward time (response time) actually contains many factors, such as memory access, I/O activities, and so on.</p><p>Also, a processor may simultaneously execute multiple programs, so the time to execute a program is not the same as the time to execute a program on a dedicated processor.</p><p>Hence, we often use CPU time to measure the performance, which is the time the CPU spends computing for a specific task. It can be further divided into user CPU time (only program time) and system CPU time (including OS time).</p><p>We'll use response time to measure the <em>system performance</em>, and use user CPU time to measure the <em>CPU performance</em>.</p><h2 id="Understanding-Program-Performance">Understanding Program Performance</h2><p>Different programs have different performance requirements. For example, a web server needs to handle many requests per second, so it needs high throughput. A video game needs to render many frames per second, so it needs high throughput. A word processor needs to respond quickly to user input, so it needs low response time.</p><p>To improve the performance of a program, one must have a clear definition of what performance metric matters and then proceed to find the bottleneck of the program.</p><h2 id="CPU-performance-and-Its-Factors">CPU performance and Its Factors</h2><h3 id="Clock">Clock</h3><p>CPU has some basic utilities to perform when doing computions. For example, it needs to fetch instructions, decode instructions, execute instructions, and write results.</p><p>The <em>clock</em> set the speed of these basic actions. One tick of the clock is called a <em>clock cycle</em>, which represents CPU done one or multiple basic action.</p><p>The <em>clock rate</em> is the number of cycles per second. It is measured in hertz (Hz). The clock rate is also called the clock frequency.</p><h3 id="CPU-time-formula">CPU time formula</h3><p>The CPU time for a program is determined by the number of clock cycles, the clock cycle time, and the number of instructions.</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>CPU time</mtext><mo>=</mo><mtext>Clock cycles</mtext><mo>×</mo><mtext>Clock cycle time</mtext><mo>=</mo><mfrac><mtext>Clock cycles</mtext><mtext>Clock rate</mtext></mfrac></mrow><annotation encoding="application/x-tex">\text{CPU time} = \text{Clock cycles} \times \text{Clock cycle time} = \frac{\text{Clock cycles}}{\text{Clock rate}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord text"><span class="mord">CPU time</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord text"><span class="mord">Clock cycles</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord text"><span class="mord">Clock cycle time</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0574em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">Clock rate</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">Clock cycles</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><h3 id="Instruction-Performance">Instruction Performance</h3><p>A program is a sequence of instructions. Each instruction needs multiple clock cycles to execute. The average number of clock cycles for an instruction is called the <em>CPI</em> (cycles per instruction).</p><p>So we can compute the clock cycles for a program by the following formula:</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>Clock cycles</mtext><mo>=</mo><mtext>CPI</mtext><mo>×</mo><mtext>Instructions</mtext></mrow><annotation encoding="application/x-tex">\text{Clock cycles} = \text{CPI} \times \text{Instructions}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord text"><span class="mord">Clock cycles</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord text"><span class="mord">CPI</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord text"><span class="mord">Instructions</span></span></span></span></span></span></p><p>Combining with the CPU time formula, we can get:</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>CPU time</mtext><mo>=</mo><mtext>CPI</mtext><mo>×</mo><mtext>Instructions</mtext><mo>×</mo><mtext>Clock cycle time</mtext><mo>=</mo><mfrac><mrow><mtext>CPI</mtext><mo>×</mo><mtext>Instructions</mtext></mrow><mtext>Clock rate</mtext></mfrac></mrow><annotation encoding="application/x-tex">\text{CPU time} = \text{CPI} \times \text{Instructions} \times \text{Clock cycle time} = \frac{\text{CPI} \times \text{Instructions}}{\text{Clock rate}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord text"><span class="mord">CPU time</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord text"><span class="mord">CPI</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord text"><span class="mord">Instructions</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord text"><span class="mord">Clock cycle time</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">Clock rate</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">CPI</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord text"><span class="mord">Instructions</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><h3 id="How-Program-components-affect-CPU-performance">How Program components affect CPU performance</h3><table><thead><tr><th>Hardware or software component</th><th>Affects what?</th><th>How?</th></tr></thead><tbody><tr><td>Algorithm</td><td>Instruction count, CPI</td><td>The algorithm determines the number of source program instructions executed and hence the number of processor instructions executed. The algorithm may also affect the CPI, by favoring slower or faster instructions. For example, if the algorithm uses more divides, it will tend to have a higher CPI.</td></tr><tr><td>Programming language</td><td>Instruction count, CPI</td><td>The programming language certainly affects the instruction count, since statements in the language are translated to processor instructions, which determine instruction count. The language may also affect the CPI because of its features; for example, a language with heavy support for data abstraction (e.g., Java) will require indirect calls, which will use higher CPI instructions.</td></tr><tr><td>Compiler</td><td>Instruction count, CPI</td><td>The efficiency of the compiler affects both the instruction count and average cycles per instruction, since the compiler determines the translation of the source language instructions into computer instructions. The compiler’s role can be very complex and affect the CPI in varied ways.</td></tr><tr><td>Instruction set architecture</td><td>Instruction count, clock rate, CPI</td><td>The instruction set architecture affects all three aspects of  CPU performance, since it affects the instructions needed  for a function, the cost in cycles of each instruction, and the  overall clock rate of the processor.</td></tr></tbody></table><h1 id="Power-Wall">Power Wall</h1><p>The power used by a computer is divided into two parts: dynamic power and static power.</p><h2 id="Dynamic-Power">Dynamic Power</h2><p>The dominant technology for integrated circuits is called CMOS (complementary metal oxide semiconductor). For CMOS, the primary source of energy consumption is so-called dynamic energy—that is, energy that is consumed when transistors switch states from 0 to 1 and vice versa.</p><p>The dynamic energy depends on the capacitive loading of each transistor, the voltage and the frequency of switching:</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>Dynamic energy</mtext><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo>×</mo><mtext>Capacitance</mtext><mo>×</mo><msup><mtext>Voltage</mtext><mn>2</mn></msup><mo>×</mo><mtext>Frequency of switching</mtext></mrow><annotation encoding="application/x-tex">\text{Dynamic energy} = \frac{1}{2} \times \text{Capacitance} \times \text{Voltage}^2 \times \text{Frequency of switching}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord text"><span class="mord">Dynamic energy</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord text"><span class="mord">Capacitance</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0929em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord text"><span class="mord">Voltage</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8984em;"><span style="top:-3.1473em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord text"><span class="mord">Frequency of switching</span></span></span></span></span></span></p><h2 id="Static-Power">Static Power</h2><p>Although dynamic energy is the primary source of energy consumption in CMOS, static energy consumption occurs because of leakage current that flows even when a transistor is off. In servers, leakage is typically responsible for 40% of the energy consumption. Thus, increasing the number of transistors increases power dissipation, even if the transistors are always off. A variety of design techniques and technology innovations are being deployed to control leakage, but it’s hard to lower voltage further.</p>]]></content>
    
    
    <summary type="html">Computer Abstractions and Technology</summary>
    
    
    
    <category term="学习" scheme="https://zivmax.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机科学" scheme="https://zivmax.top/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
    <category term="CS110" scheme="https://zivmax.top/tags/CS110/"/>
    
    <category term="上科大" scheme="https://zivmax.top/tags/%E4%B8%8A%E7%A7%91%E5%A4%A7/"/>
    
    <category term="计算机体系架构" scheme="https://zivmax.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/"/>
    
    <category term="笔记" scheme="https://zivmax.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>CS101 PA [3]</title>
    <link href="https://zivmax.top/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/01/26/CS101/CS101-PA-3/"/>
    <id>https://zivmax.top/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/01/26/CS101/CS101-PA-3/</id>
    <published>2024-01-26T02:38:42.000Z</published>
    <updated>2024-04-03T08:01:44.659Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>注意：本学期 CS101 PA 的所有 C++ 代码都采用 C++20 标准。如果您使用 GCC 或 Clang，您需要在编译时设置 <code>-std=c++20</code> 。</p><span id="more"></span><p>如果您看到类似这样的报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++-9: error: unrecognized command line option ‘-std=c++20’; did you mean ‘-std=c++2a’?</span><br></pre></td></tr></table></figure><p>说明您的编译器版本过低，请安装更高版本的编译器。目前 GCC 13 几乎已经将 C++20 除 modules 外的全部新特性实现完毕，我们推荐使用 GCC 13。</p><h1 id="Problem-1-Master-of-Linear-Algebra">Problem 1. Master of Linear Algebra</h1><p>There are <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> vectors <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="bold-italic">v</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>i</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\bm v_i(i=1,\cdots,m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span> in <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="double-struck">R</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">\R^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6889em;"></span><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span>, where each vector <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="bold-italic">v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\bm v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5944em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> has a <strong>value</strong> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>. Each vector <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="bold-italic">v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\bm v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5944em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> consists of only a consecutive interval of standard basis vectors <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="bold-italic">e</mi><msub><mi>l</mi><mi>i</mi></msub></msub><mo>…</mo><msub><mi mathvariant="bold-italic">e</mi><msub><mi>r</mi><mi>i</mi></msub></msub></mrow><annotation encoding="application/x-tex">\bm{e}_{l_i}\dots \bm e_{r_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6945em;vertical-align:-0.2501em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol">e</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:-0.0197em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol">e</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:-0.0278em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span></span></span></span>. In other words, there exist <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><msub><mi>l</mi><mi>i</mi></msub><mo>≤</mo><msub><mi>r</mi><mi>i</mi></msub><mo>≤</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1\le l_i\le r_i\le n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0197em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.786em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> such that <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="bold-italic">v</mi><mi>i</mi></msub><mo>=</mo><msub><mi mathvariant="bold-italic">e</mi><msub><mi>l</mi><mi>i</mi></msub></msub><mo>+</mo><msub><mi mathvariant="bold-italic">e</mi><mrow><msub><mi>l</mi><mi>i</mi></msub><mo>+</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi mathvariant="bold-italic">e</mi><mrow><msub><mi>l</mi><mi>i</mi></msub><mo>+</mo><mn>2</mn></mrow></msub><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi mathvariant="bold-italic">e</mi><msub><mi>r</mi><mi>i</mi></msub></msub></mrow><annotation encoding="application/x-tex">\bm v_i = \bm e_{l_i} + \bm e_{l_i+1} + \bm e_{l_i+2} + \dots + \bm e_{r_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5944em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8334em;vertical-align:-0.2501em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol">e</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:-0.0197em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8334em;vertical-align:-0.2501em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol">e</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:-0.0197em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8334em;vertical-align:-0.2501em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol">e</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:-0.0197em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6945em;vertical-align:-0.2501em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol">e</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:-0.0278em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span></span></span></span>, i.e.</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi mathvariant="bold-italic">v</mi><mi>i</mi></msub><mo>=</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><munder><munder><mrow><mn>1</mn><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mn>1</mn></mrow><mo stretchy="true">⏟</mo></munder><mrow><mtext>from </mtext><msub><mi>l</mi><mi>i</mi></msub><mtext> to </mtext><msub><mi>r</mi><mi>i</mi></msub></mrow></munder><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">\bm v_i = (0,\cdots,0,\underbrace{1,\cdots,1}_{\text{from }l_i\text{ to }r_i},0,\cdots,0).</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5944em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3786em;vertical-align:-1.6286em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord munder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6444em;"><span style="top:-1.4715em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">from </span></span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:-0.0197em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord text mtight"><span class="mord mtight"> to </span></span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:-0.0278em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord munder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6444em;"><span class="svg-align" style="top:-2.1576em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.548em;min-width:1.6em;"><span class="brace-left" style="height:0.548em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="0.548em" viewbox="0 0 400000 548" preserveaspectratio="xMinYMin slice"><path d="M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z"/></svg></span><span class="brace-center" style="height:0.548em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="0.548em" viewbox="0 0 400000 548" preserveaspectratio="xMidYMin slice"><path d="M199572 214c100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z"/></svg></span><span class="brace-right" style="height:0.548em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="0.548em" viewbox="0 0 400000 548" preserveaspectratio="xMaxYMin slice"><path d="M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z"/></svg></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8424em;"><span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.6286em;"><span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mclose">)</span><span class="mord">.</span></span></span></span></span></p><p>It means that the <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>l</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">l_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0197em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>-th entry to <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>r</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">r_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>-th entry of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="bold-italic">v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\bm v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5944em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> are <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>, and others are <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>.</p><p>Now your task is to select a linearly independent subset <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span> of vectors <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="bold-italic">v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\bm v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5944em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, maximizing the sum of the value (the <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>'s) of the selected vectors.</p><ul><li><p>Linear independence: The vectors <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="bold-italic">v</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi mathvariant="bold-italic">v</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi mathvariant="bold-italic">v</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">\bm v_1,\bm v_2,\cdots,\bm v_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> are said to be <strong>linearly independent</strong> if there do not exist scalars <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>a</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">a_1,\cdots,a_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, which are not all zero, such that</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><msub><mi>a</mi><mi>i</mi></msub><msub><mi mathvariant="bold-italic">v</mi><mi>i</mi></msub><mo>=</mo><mi mathvariant="bold">0</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">\sum_{i=1}^ma_i\bm v_i = \bm 0.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">0</span></span></span><span class="mord">.</span></span></span></span></span></p></li></ul><h2 id="Input-format">Input format</h2><p>The first line contains two integers <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo separator="true">,</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">m,n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span> separated by space, denoting there are <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> vectors <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>≤</mo><mi>m</mi><mo>≤</mo><mn>600000</mn><mo separator="true">,</mo><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>200000</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(1\le m \le 600000, 1\le n\le 200000)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">600000</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">200000</span><span class="mclose">)</span></span></span></span>.</p><p>Then follow <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> lines, the <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>-th of which contains 3 integers <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>l</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>r</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">l_i, r_i, c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0197em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> separated by space, denoting the <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>-th vector is <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="bold-italic">v</mi><mi>i</mi></msub><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><msub><mi>l</mi><mi>i</mi></msub></mrow><msub><mi>r</mi><mi>i</mi></msub></msubsup><msub><mi mathvariant="bold-italic">e</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">\bm v_i=\sum_{j=l_i}^{r_i}\bm e_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5944em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2401em;vertical-align:-0.4358em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8043em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:-0.0197em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:-0.0278em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4358em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol">e</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span> and has value <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mn>1</mn><mo>≤</mo><msub><mi>c</mi><mi>i</mi></msub><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">c_i(1\le c_i\le 10^9)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.786em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>.</p><p>It is guaranteed that for any <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1\le i,j\le n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo mathvariant="normal">≠</mo><mi>j</mi></mrow><annotation encoding="application/x-tex">i\neq j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span>, either <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>l</mi><mi>i</mi></msub><mo mathvariant="normal">≠</mo><msub><mi>l</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">l_i\neq l_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0197em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9805em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0197em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span> or <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>r</mi><mi>i</mi></msub><mo mathvariant="normal">≠</mo><msub><mi>r</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">r_i\neq r_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span> holds.</p><h2 id="Output-format">Output format</h2><p>Output an integer denoting the maximum sum of values of linearly independent vectors.</p><h2 id="Examples">Examples</h2><h3 id="Input-1">Input 1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6 4</span><br><span class="line">1 1 10</span><br><span class="line">2 3 15</span><br><span class="line">4 4 5</span><br><span class="line">3 4 30</span><br><span class="line">2 4 21</span><br><span class="line">2 2 31</span><br></pre></td></tr></table></figure><h3 id="Output-1">Output 1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">86</span><br></pre></td></tr></table></figure><h3 id="Sample-1-Explanation">Sample 1 Explanation</h3><p>The vectors are</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi mathvariant="bold-italic">v</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo><mo separator="true">,</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi mathvariant="bold-italic">v</mi><mn>2</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo><mo separator="true">,</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi mathvariant="bold-italic">v</mi><mn>3</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo><mo separator="true">,</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi mathvariant="bold-italic">v</mi><mn>4</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo><mo separator="true">,</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi mathvariant="bold-italic">v</mi><mn>5</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo><mo separator="true">,</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi mathvariant="bold-italic">v</mi><mn>6</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo><mi mathvariant="normal">.</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}\bm v_1&amp;=(1,0,0,0),\\\bm v_2&amp;=(0,1,1,0),\\\bm v_3&amp;=(0,0,0,1),\\\bm v_4&amp;=(0,0,1,1),\\\bm v_5&amp;=(0,1,1,1),\\\bm v_6&amp;=(0,1,0,0).\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:9em;vertical-align:-4.25em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.75em;"><span style="top:-6.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-0.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:0.59em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.25em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.75em;"><span style="top:-6.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mclose">)</span><span class="mpunct">,</span></span></span><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mclose">)</span><span class="mpunct">,</span></span></span><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mpunct">,</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mpunct">,</span></span></span><span style="top:-0.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mpunct">,</span></span></span><span style="top:0.59em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mclose">)</span><span class="mord">.</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.25em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>Choose four vectors <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><msub><mi mathvariant="bold-italic">v</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi mathvariant="bold-italic">v</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi mathvariant="bold-italic">v</mi><mn>4</mn></msub><mo separator="true">,</mo><msub><mi mathvariant="bold-italic">v</mi><mn>6</mn></msub><mo fence="true">}</mo></mrow><annotation encoding="application/x-tex">\left\{\bm v_1,\bm v_2,\bm v_4,\bm v_6\right\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">}</span></span></span></span></span>. The answer is <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10</mn><mo>+</mo><mn>15</mn><mo>+</mo><mn>30</mn><mo>+</mo><mn>31</mn><mo>=</mo><mn>86</mn></mrow><annotation encoding="application/x-tex">10 + 15 + 30 + 31 = 86</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">10</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">15</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">30</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">31</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">86</span></span></span></span>.</p><h3 id="Input-2">Input 2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">18 12</span><br><span class="line">5 7 747599713</span><br><span class="line">3 4 757926887</span><br><span class="line">3 6 382811701</span><br><span class="line">4 6 97461676</span><br><span class="line">4 9 710404753</span><br><span class="line">2 9 487547197</span><br><span class="line">2 6 596396727</span><br><span class="line">2 2 608843003</span><br><span class="line">4 4 845337000</span><br><span class="line">4 7 18671691</span><br><span class="line">11 11 135958130</span><br><span class="line">11 12 452842130</span><br><span class="line">1 12 528936929</span><br><span class="line">1 5 812188014</span><br><span class="line">6 8 535007878</span><br><span class="line">12 12 617497619</span><br><span class="line">9 12 737458124</span><br><span class="line">6 12 583189872</span><br></pre></td></tr></table></figure><h3 id="Output-2">Output 2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7469683842</span><br></pre></td></tr></table></figure><h3 id="Sample-2-Explanation">Sample 2 Explanation</h3><p>Choose 11 vectors <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><msub><mi mathvariant="bold-italic">v</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi mathvariant="bold-italic">v</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi mathvariant="bold-italic">v</mi><mn>5</mn></msub><mo separator="true">,</mo><msub><mi mathvariant="bold-italic">v</mi><mn>7</mn></msub><mo separator="true">,</mo><msub><mi mathvariant="bold-italic">v</mi><mn>8</mn></msub><mo separator="true">,</mo><msub><mi mathvariant="bold-italic">v</mi><mn>9</mn></msub><mo separator="true">,</mo><msub><mi mathvariant="bold-italic">v</mi><mn>12</mn></msub><mo separator="true">,</mo><msub><mi mathvariant="bold-italic">v</mi><mn>14</mn></msub><mo separator="true">,</mo><msub><mi mathvariant="bold-italic">v</mi><mn>16</mn></msub><mo separator="true">,</mo><msub><mi mathvariant="bold-italic">v</mi><mn>17</mn></msub><mo separator="true">,</mo><msub><mi mathvariant="bold-italic">v</mi><mn>18</mn></msub><mo fence="true">}</mo></mrow><annotation encoding="application/x-tex">\left\{\bm v_1,\bm v_2,\bm v_5,\bm v_7,\bm v_8,\bm v_9,\bm v_{12},\bm v_{14},\bm v_{16},\bm v_{17},\bm v_{18}\right\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">14</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">16</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">17</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">18</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">}</span></span></span></span></span>.</p><h1 id="Problem-2-VCG-auction">Problem 2. VCG auction</h1><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> buyers want to compete for <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> items through auction.</p><p>The <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>-th buyer wants to buy <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> items at a price for <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>. Note that <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> also means the <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>-th buyer's <strong>valuation</strong> of the items.</p><p>The VCG auction allocates the <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> items which maximize the sum of the valuations of those who get <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> items as he/she wants.</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>v</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>v</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>v</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">V=(v_1,v_2,...,v_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>;</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>c</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>c</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>c</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">C=(c_1,c_2,...,c_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>;</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">VA</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>V</mi><mo separator="true">,</mo><mi>C</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mi>A</mi><mo>∈</mo><msup><mn>2</mn><mrow><mo stretchy="false">{</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">}</mo></mrow></msup><mo>:</mo><munder><mo>∑</mo><mrow><mi>i</mi><mo>∈</mo><mi>A</mi></mrow></munder><msub><mi>c</mi><mi>i</mi></msub><mo>⩽</mo><mi>m</mi><mo fence="true">}</mo></mrow></mrow><annotation encoding="application/x-tex">\operatorname{VA}(V,C)=\left\{A\in2^{\{1,2,...,n\}}:\sum\limits_{i\in A}c_i\leqslant m\right\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span class="mord mathrm">VA</span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4717em;vertical-align:-1.0217em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">{</span><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mtight">2</span><span class="mpunct mtight">,</span><span class="mord mtight">...</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">n</span><span class="mclose mtight">}</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.75em;"><span style="top:-2.1057em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight">A</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop op-symbol small-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0217em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">m</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">}</span></span></span></span></span></span> , which means the set of all <strong>Valid Allocations</strong> to the <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> buyers. Valid means that <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> items are enough to be allocated.</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">MSV</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>V</mi><mo separator="true">,</mo><mi>C</mi><mo stretchy="false">)</mo><mo>=</mo><munder><mrow><mi>max</mi><mo>⁡</mo></mrow><mrow><mi>A</mi><mo>∈</mo><mi mathvariant="normal">VA</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>V</mi><mo separator="true">,</mo><mi>C</mi><mo stretchy="false">)</mo></mrow></munder><munder><mo>∑</mo><mrow><mi>i</mi><mo>∈</mo><mi>A</mi></mrow></munder><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\operatorname{MSV}(V,C)=\max\limits_{A\in\operatorname{VA}(V,C)}\sum\limits_{i\in A}v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span class="mord mathrm" style="margin-right:0.01389em;">MSV</span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.7717em;vertical-align:-1.0217em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.4306em;"><span style="top:-2.309em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">A</span><span class="mrel mtight">∈</span><span class="mop mtight"><span class="mord mathrm mtight">VA</span></span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">V</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">max</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.966em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.75em;"><span style="top:-2.1057em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight">A</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop op-symbol small-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0217em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, which means the <strong>Maximal Sum of the Valuations</strong> of those who gets <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> items as he/she wants.</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mi>M</mi></msub><mo stretchy="false">(</mo><mi>V</mi><mo separator="true">,</mo><mi>C</mi><mo stretchy="false">)</mo><mo>∈</mo><munder><mo><mi>arg</mi><mo>⁡</mo><mi>max</mi><mo>⁡</mo></mo><mrow><mi>A</mi><mo>∈</mo><mi mathvariant="normal">VA</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>V</mi><mo separator="true">,</mo><mi>C</mi><mo stretchy="false">)</mo></mrow></munder><munder><mo>∑</mo><mrow><mi>i</mi><mo>∈</mo><mi>A</mi></mrow></munder><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">A_M(V,C)\in \mathop{\arg\max}\limits_{A\in\operatorname{VA}(V,C)}\sum\limits_{i\in A}v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.9104em;vertical-align:-1.1604em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.4306em;"><span style="top:-2.1146em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">A</span><span class="mrel mtight">∈</span><span class="mop mtight"><span class="mord mathrm mtight">VA</span></span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">V</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop"><span class="mop">ar<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">max</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.1604em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.75em;"><span style="top:-2.1057em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight">A</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop op-symbol small-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0217em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, which means the valid allocation that maximizes the sum of the valuations. The buyers in <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mi>M</mi></msub><mo stretchy="false">(</mo><mi>V</mi><mo separator="true">,</mo><mi>C</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">A_M(V,C)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span></span></span></span> win the auction and get the items they want.</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mrow><mo>−</mo><mi>i</mi></mrow></msub><mo>=</mo><mo stretchy="false">(</mo><msub><mi>v</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>v</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>v</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><msub><mi>v</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>v</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">V_{-i}=(v_1,v_2,...,v_{i-1},v_{i+1},...,v_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>, which means excluding <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> from <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span>;</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mrow><mo>−</mo><mi>i</mi></mrow></msub><mo>=</mo><mo stretchy="false">(</mo><msub><mi>c</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>c</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>c</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><msub><mi>c</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>c</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">C_{-i}=(c_1,c_2,...,c_{i-1},c_{i+1},...,c_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>, which means excluding <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> from <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>;</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub><mo>=</mo><msub><mi>v</mi><mi>i</mi></msub><mo>+</mo><mi mathvariant="normal">MSV</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>V</mi><mrow><mo>−</mo><mi>i</mi></mrow></msub><mo separator="true">,</mo><msub><mi>C</mi><mrow><mo>−</mo><mi>i</mi></mrow></msub><mo stretchy="false">)</mo><mo>−</mo><mi mathvariant="normal">MSV</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>V</mi><mo separator="true">,</mo><mi>C</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p_i=v_i+\operatorname{MSV}(V_{-i},C_{-i})-\operatorname{MSV}(V,C)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span class="mord mathrm" style="margin-right:0.01389em;">MSV</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span class="mord mathrm" style="margin-right:0.01389em;">MSV</span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span></span></span></span>, which is the definition of the <strong>payment</strong> of the <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>-th buyer <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>∈</mo><msub><mi>A</mi><mi>M</mi></msub><mo stretchy="false">(</mo><mi>V</mi><mo separator="true">,</mo><mi>C</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">i\in A_M(V,C)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6986em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span></span></span></span> if he/she gets the <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> items.</li></ul><p>Your task is to compute <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mi>M</mi></msub><mo stretchy="false">(</mo><mi>V</mi><mo separator="true">,</mo><mi>C</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">A_M(V,C)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span></span></span></span> and their payments. If there is more than one choice of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mi>M</mi></msub><mo stretchy="false">(</mo><mi>V</mi><mo separator="true">,</mo><mi>C</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">A_M(V,C)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span></span></span></span>, please choose the lexicographically least one.</p><h2 id="Input-format-2">Input format</h2><p>The first line contains two positive integers <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>, separated by a space.</p><p>For the following <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> lines:</p><ul><li>The <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>-th line contains two positive integers <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, separated by a space.</li></ul><h2 id="Output-format-2">Output format</h2><p>On the first line, print <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mi>M</mi></msub><mo stretchy="false">(</mo><mi>V</mi><mo separator="true">,</mo><mi>C</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">A_M(V,C)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span></span></span></span> (lexicographically least one). The numbers are separated by spaces.</p><p>On the second line, print <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">p_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> for all <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>∈</mo><msub><mi>A</mi><mi>M</mi></msub><mo stretchy="false">(</mo><mi>V</mi><mo separator="true">,</mo><mi>C</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">i\in A_M(V,C)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6986em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span></span></span></span>. The numbers are separated by spaces.</p><h2 id="Testing-on-OJ">Testing on OJ</h2><p>There are 20 testcases on OJ. For the first 10 testcases, your program (assuming it is named <code>foo.cc</code>) is compiled with</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ foo.cc -o foo -std=c++20 -Wall -Wpedantic -Wextra -Werror -DONLINE_JUDGE -fmax-errors=3 -fdiagnostics-color=always -fsanitize=undefined -fsanitize=address -g</span><br></pre></td></tr></table></figure><p>For testcases 11 ~ 20, your program is compiled with</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ foo.cc -o foo -std=c++20 -Wall -Wpedantic -Wextra -Werror -DONLINE_JUDGE -fmax-errors=3 -fdiagnostics-color=always -O2</span><br></pre></td></tr></table></figure><p>Due to the OJ settings, there is no way of running a single testcase in pretest (运行自测). You can enter your input data there and see the output. For pretesting, the program will be compiled with the same command as for the first 10 testcases.</p><h2 id="Data-constraints">Data constraints</h2><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>⩽</mo><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo>⩽</mo><mn>6000</mn></mrow><annotation encoding="application/x-tex">1\leqslant n,m\leqslant 6000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7811em;vertical-align:-0.1367em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8311em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">6000</span></span></span></span>.</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>⩽</mo><msub><mi>v</mi><mi>i</mi></msub><mo>⩽</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo separator="true">,</mo><mn>1</mn><mo>⩽</mo><msub><mi>c</mi><mi>i</mi></msub><mo>⩽</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">1\leqslant v_i\leqslant 10^9, 1\leqslant c_i\leqslant m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7811em;vertical-align:-0.1367em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7867em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7867em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>.</li></ul><p>If you implement your algorithm in <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Theta(n^2m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span> time, you will receive about 50 pts.</p><p>If you implement your algorithm in <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Theta(nm)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathnormal">nm</span><span class="mclose">)</span></span></span></span> time, you will receive about 100 pts.</p><h2 id="Examples-2">Examples</h2><h3 id="Input-1-2">Input 1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 2</span><br><span class="line">2 1</span><br><span class="line">3 2</span><br></pre></td></tr></table></figure><h3 id="Output-1-2">Output 1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="Explanation-1">Explanation 1</h3><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>1</mn></msub><mo>=</mo><mn>2</mn><mo separator="true">,</mo><msub><mi>c</mi><mn>1</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">v_1=2,c_1=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>;</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>2</mn></msub><mo>=</mo><mn>3</mn><mo separator="true">,</mo><msub><mi>c</mi><mn>2</mn></msub><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">v_2=3,c_2=2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span>;</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">MSV</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>V</mi><mo separator="true">,</mo><mi>C</mi><mo stretchy="false">)</mo><mo>=</mo><mn>3</mn><mo separator="true">,</mo><msub><mi>A</mi><mi>M</mi></msub><mo stretchy="false">(</mo><mi>V</mi><mo separator="true">,</mo><mi>C</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">{</mo><mn>2</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\operatorname{MSV}(V,C)=3,A_M(V,C)=\{2\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span class="mord mathrm" style="margin-right:0.01389em;">MSV</span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">2</span><span class="mclose">}</span></span></span></span>;</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">MSV</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>V</mi><mrow><mo>−</mo><mn>2</mn></mrow></msub><mo separator="true">,</mo><msub><mi>C</mi><mrow><mo>−</mo><mn>2</mn></mrow></msub><mo stretchy="false">)</mo><mo>=</mo><mn>2</mn><mo separator="true">,</mo><msub><mi>A</mi><mi>M</mi></msub><mo stretchy="false">(</mo><msub><mi>V</mi><mrow><mo>−</mo><mn>2</mn></mrow></msub><mo separator="true">,</mo><msub><mi>C</mi><mrow><mo>−</mo><mn>2</mn></mrow></msub><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">{</mo><mn>1</mn><mo stretchy="false">}</mo><mo separator="true">,</mo><msub><mi>p</mi><mn>2</mn></msub><mo>=</mo><mn>3</mn><mo>+</mo><mn>2</mn><mo>−</mo><mn>3</mn><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">\operatorname{MSV}(V_{-2},C_{-2})=2,A_M(V_{-2},C_{-2})=\{1\},p_2=3+2-3=2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span class="mord mathrm" style="margin-right:0.01389em;">MSV</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">1</span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span>.</li></ul><h3 id="Input-2-2">Input 2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4 4</span><br><span class="line">1 1</span><br><span class="line">2 2</span><br><span class="line">3 3</span><br><span class="line">2 2</span><br></pre></td></tr></table></figure><h3 id="Output-2-2">Output 2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 3</span><br><span class="line">1 3</span><br></pre></td></tr></table></figure><h3 id="Explanation-2">Explanation 2</h3><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>1</mn></msub><mo>=</mo><mn>1</mn><mo separator="true">,</mo><msub><mi>c</mi><mn>1</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">v_1=1,c_1=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>;</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>2</mn></msub><mo>=</mo><mn>2</mn><mo separator="true">,</mo><msub><mi>c</mi><mn>2</mn></msub><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">v_2=2,c_2=2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span>;</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>3</mn></msub><mo>=</mo><mn>3</mn><mo separator="true">,</mo><msub><mi>c</mi><mn>1</mn></msub><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">v_3=3,c_1=3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span>;</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mn>4</mn></msub><mo>=</mo><mn>2</mn><mo separator="true">,</mo><msub><mi>c</mi><mn>2</mn></msub><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">v_4=2,c_2=2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span>;</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">MSV</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>V</mi><mo separator="true">,</mo><mi>C</mi><mo stretchy="false">)</mo><mo>=</mo><mn>4</mn><mo separator="true">,</mo><msub><mi>A</mi><mi>M</mi></msub><mo stretchy="false">(</mo><mi>V</mi><mo separator="true">,</mo><mi>C</mi><mo stretchy="false">)</mo><mo>∈</mo><mo stretchy="false">{</mo><mtext> </mtext><mo stretchy="false">{</mo><mn>1</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">}</mo><mo separator="true">,</mo><mtext> </mtext><mo stretchy="false">{</mo><mn>2</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">}</mo><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\operatorname{MSV}(V,C)=4,A_M(V,C)\in\{\ \{1,3\},\ \{2,4\}\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span class="mord mathrm" style="margin-right:0.01389em;">MSV</span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mspace"> </span><span class="mopen">{</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">{</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">4</span><span class="mclose">}}</span></span></span></span>, choose the lexicographically least one <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">{</mo><mn>1</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{1,3\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mclose">}</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">MSV</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>V</mi><mrow><mo>−</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><msub><mi>C</mi><mrow><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo><mo>=</mo><mn>4</mn><mo separator="true">,</mo><msub><mi>A</mi><mi>M</mi></msub><mo stretchy="false">(</mo><msub><mi>V</mi><mrow><mo>−</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><msub><mi>C</mi><mrow><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">{</mo><mn>2</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">}</mo><mo separator="true">,</mo><msub><mi>p</mi><mn>1</mn></msub><mo>=</mo><mn>1</mn><mo>+</mo><mn>4</mn><mo>−</mo><mn>4</mn><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\operatorname{MSV}(V_{-1},C_{-1})=4,A_M(V_{-1},C_{-1})=\{2,4\},p_1=1+4-4=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span class="mord mathrm" style="margin-right:0.01389em;">MSV</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">4</span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>;</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">MSV</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>V</mi><mrow><mo>−</mo><mn>3</mn></mrow></msub><mo separator="true">,</mo><msub><mi>C</mi><mrow><mo>−</mo><mn>3</mn></mrow></msub><mo stretchy="false">)</mo><mo>=</mo><mn>4</mn><mo separator="true">,</mo><msub><mi>A</mi><mi>M</mi></msub><mo stretchy="false">(</mo><msub><mi>V</mi><mrow><mo>−</mo><mn>3</mn></mrow></msub><mo separator="true">,</mo><msub><mi>C</mi><mrow><mo>−</mo><mn>3</mn></mrow></msub><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">{</mo><mn>2</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">}</mo><mo separator="true">,</mo><msub><mi>p</mi><mn>3</mn></msub><mo>=</mo><mn>3</mn><mo>+</mo><mn>4</mn><mo>−</mo><mn>4</mn><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">\operatorname{MSV}(V_{-3},C_{-3})=4,A_M(V_{-3},C_{-3})=\{2,4\},p_3=3+4-4=3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span class="mord mathrm" style="margin-right:0.01389em;">MSV</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">4</span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span>.</li></ul><h1 id="Problem-3-Shortest-path">Problem 3. Shortest path</h1><p>This problem consists of three subtasks: the Bellman-Ford algorithm, the Dijkstra's algorithm, and the difference constraints problem.</p><p><strong>Please go to Piazza Resources to download the related materials first.</strong></p><h2 id="The-Graph-class">The <code>Graph</code> class</h2><p><code>graph.hpp</code> is a header file defining a <code>Graph</code> class that represents a <strong>directed, edge-weighted</strong> graph <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi><mo>=</mo><mo stretchy="false">(</mo><mi>V</mi><mo separator="true">,</mo><mi>E</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">G=(V,E)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mclose">)</span></span></span></span> using adjacency lists. For simplicity, we assume that <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi><mo>=</mo><mo stretchy="false">{</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">V=\{0,1,\cdots,n-1\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">}</span></span></span></span> and that the edge weights are integers. Considering that you might have not written any graph-related code before, we have implemented two basic functions for you as demonstration:</p><ul><li><p>The Breadth-First Search algorithm, which has the following signature</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(VertexID start, std::invocable&lt;VertexID&gt; <span class="keyword">auto</span> callback)</span> <span class="type">const</span></span>;</span><br></pre></td></tr></table></figure><p><code>start</code> is the id of the vertex where the traversal begins. <code>callback</code> is a callable object that is called every time a vertex is visited. For example, the following code (see <code>examples/graph_example.cpp</code>) performs BFS on the graph <code>graph</code> and prints the id of the visited vertices in order.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">graph.<span class="built_in">bfs</span>(<span class="number">0</span>, [](<span class="keyword">auto</span> x) &#123; std::cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>; &#125;);</span><br></pre></td></tr></table></figure></li><li><p>The naive <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><msup><mi>V</mi><mn>2</mn></msup><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\left(V^2\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2em;vertical-align:-0.35em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span> Dijkstra's algorithm, which has the following signature</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::vector&lt;Weight&gt; <span class="title">dijkstra</span><span class="params">(VertexID source)</span> <span class="type">const</span></span>;</span><br></pre></td></tr></table></figure><p><code>source</code> is the id of the source vertex. This function returns a <code>std::vector&lt;Weight&gt;</code>, in which the element indexed <code>i</code> is the length of the shortest path from <code>source</code> to the vertex <code>i</code>, or <code>Graph::infinity</code> if no path exists.</p><p>The behavior is undefined if there exists an edge with negative weight.</p><blockquote><p>By saying &quot;the behavior is undefined&quot;, we mean that <strong>you don't need to care about this case</strong>. Do not waste your effort detecting it.</p></blockquote><p>The implementation of this function is in <code>graph.cpp</code>, which you need to overwrite (See <a href="#subtask-2-the-dijkstra-algorithm">below</a>).</p></li></ul><p>Read through the code we have provided in <code>graph.cpp</code>, <code>graph.hpp</code> and <code>examples/graph_example.cpp</code> and make sure you have understood the design. To compile and run <code>graph_example.cpp</code>, refer to <a href="#compile-and-run">compile and run</a>.</p><p><strong>Note: Your submission will not contain the contents in <code>graph.hpp</code>. Any modification to that file (e.g. adding a member to the class <code>Graph</code>) will have no effect.</strong></p><h2 id="Subtask-1-The-Bellman-Ford-algorithm">Subtask 1: The Bellman-Ford algorithm</h2><p>First, you need to implement the Bellman-Ford algorithm that calculates the length of the shortest path from a given source vertex to each vertex, or reports that there is a negative cycle reachable from <code>source</code>. It is a member function of <code>Graph</code> that has the following signature</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::optional&lt;std::vector&lt;Weight&gt;&gt; <span class="built_in">bellmanFord</span>(VertexID source) <span class="type">const</span>;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://en.cppreference.com/w/cpp/utility/optional"><code>std::optional&lt;T&gt;</code></a> is a special standard library type that represents <strong>either an object of type <code>T</code>, or nothing (represented by <code>std::nullopt</code>)</strong>. You can refer to <code>examples/equation.cpp</code> to see an example of using it.</p></blockquote><p>This function should return <code>std::nullopt</code> if the graph contains a negative cycle reachable from <code>source</code>. Otherwise, it should return a vector of numbers, in which the element indexed <code>i</code> is the length of the shortest path from <code>source</code> to the vertex <code>i</code>, or <code>Graph::infinity</code> if no path exists. This function should run in <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>V</mi><mi>E</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(VE)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mclose">)</span></span></span></span> time with <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>V</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(V)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mclose">)</span></span></span></span> extra space.</p><p>Write your implementation in <code>graph.cpp</code>.</p><h2 id="Subtask-2-The-Dijkstra-s-algorithm">Subtask 2: The Dijkstra's algorithm</h2><p>In <code>graph.cpp</code>, there is an implementation of the naive Dijkstra's algorithm whose time complexity is <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><msup><mi>V</mi><mn>2</mn></msup><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\left(V^2\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2em;vertical-align:-0.35em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span>. Suppose now the graph is not so dense, or more specifically, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo>=</mo><mi>o</mi><mrow><mo fence="true">(</mo><msup><mi>V</mi><mn>2</mn></msup><mi mathvariant="normal">/</mi><mi>log</mi><mo>⁡</mo><mi>V</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">E=o\left(V^2/\log V\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2em;vertical-align:-0.35em;"></span><span class="mord mathnormal">o</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span>. Overwrite this function to make it run within <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>E</mi><mi>log</mi><mo>⁡</mo><mi>V</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(E\log V)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mclose">)</span></span></span></span> time, with <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>V</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(V)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mclose">)</span></span></span></span> extra space.</p><p>You may need <a href="https://en.cppreference.com/w/cpp/container/priority_queue"><code>std::priority_queue</code></a>. We have provided two examples of using it: <code>examples/priqueue.cpp</code> and <code>examples/huffman.cpp</code>. The latter is a program that computes the Huffman codes given the frequencies of characters.</p><blockquote><p>By default, <code>std::priority_queue&lt;T&gt;</code> uses <code>std::less&lt;T&gt;</code> (which is <code>operator&lt;</code>) to compare elements and models a <strong>max-heap</strong>. If you need a min-heap, just pass <code>std::greater&lt;&gt;</code> as the third template argument (see details in the examples).</p><p>We have seen some inexperienced students overload <code>operator&lt;</code> to do the work that should have been done by <code>operator&gt;</code> (e.g. <code>return lhs.something &gt; rhs.something;</code>), or pass negated values to the max-heap to <em>fake</em> a min-heap. <strong>You should never do that.</strong></p></blockquote><h2 id="Subtask-3-System-of-difference-constraints">Subtask 3: System of difference constraints</h2><p>In a <em><strong>system of difference constraints</strong></em> (or, <em><strong>difference constraints problem</strong></em>), there are <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> variables <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>x</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">x_0,x_1,\cdots,x_{n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> constraints on these variables, where the <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>-th constraint (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>⩽</mo><mi>k</mi><mo>&lt;</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">0\leqslant k&lt;m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7811em;vertical-align:-0.1367em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>) is of the form</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>x</mi><msub><mi>u</mi><mi>k</mi></msub></msub><mo>−</mo><msub><mi>x</mi><msub><mi>v</mi><mi>k</mi></msub></msub><mo>⩽</mo><msub><mi>c</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">x_{u_k}-x_{v_k}\leqslant c_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8392em;vertical-align:-0.2559em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1512em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2559em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8925em;vertical-align:-0.2559em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1512em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2559em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>where <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>⩽</mo><msub><mi>u</mi><mi>k</mi></msub><mo separator="true">,</mo><msub><mi>v</mi><mi>k</mi></msub><mo>&lt;</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">0\leqslant u_k,v_k&lt;n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7811em;vertical-align:-0.1367em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>, and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>u</mi><mi>k</mi></msub><mo mathvariant="normal">≠</mo><msub><mi>v</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">u_k\neq v_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>. We want to find a solution to the given difference constraints problem, that is, to assign the variables with values so that all the constraints are satisfied.</p><p>For example, the following is a system of difference constraints with <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>5</mn></mrow><annotation encoding="application/x-tex">5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">5</span></span></span></span> variables and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>8</mn></mrow><annotation encoding="application/x-tex">8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">8</span></span></span></span> constraints:</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>x</mi><mn>0</mn></msub><mo>−</mo><msub><mi>x</mi><mn>1</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>⩽</mo><mn>0</mn><mo separator="true">,</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>x</mi><mn>0</mn></msub><mo>−</mo><msub><mi>x</mi><mn>4</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>⩽</mo><mo>−</mo><mn>1</mn><mo separator="true">,</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>−</mo><msub><mi>x</mi><mn>4</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>⩽</mo><mn>1</mn><mo separator="true">,</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>x</mi><mn>2</mn></msub><mo>−</mo><msub><mi>x</mi><mn>0</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>⩽</mo><mn>5</mn><mo separator="true">,</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>x</mi><mn>3</mn></msub><mo>−</mo><msub><mi>x</mi><mn>0</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>⩽</mo><mn>4</mn><mo separator="true">,</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>x</mi><mn>3</mn></msub><mo>−</mo><msub><mi>x</mi><mn>2</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>⩽</mo><mo>−</mo><mn>1</mn><mo separator="true">,</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>x</mi><mn>4</mn></msub><mo>−</mo><msub><mi>x</mi><mn>2</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>⩽</mo><mo>−</mo><mn>3</mn><mo separator="true">,</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>x</mi><mn>4</mn></msub><mo>−</mo><msub><mi>x</mi><mn>3</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>⩽</mo><mo>−</mo><mn>3.</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}  x_0-x_1&amp;\leqslant 0,\\  x_0-x_4&amp;\leqslant -1,\\  x_1-x_4&amp;\leqslant 1,\\  x_2-x_0&amp;\leqslant 5,\\  x_3-x_0&amp;\leqslant 4,\\  x_3-x_2&amp;\leqslant -1,\\  x_4-x_2&amp;\leqslant -3,\\  x_4-x_3&amp;\leqslant -3.\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:12em;vertical-align:-5.75em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:6.25em;"><span style="top:-8.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-6.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-0.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:0.59em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:2.09em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.75em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:6.25em;"><span style="top:-8.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span><span class="mpunct">,</span></span></span><span style="top:-6.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span></span></span><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span><span class="mpunct">,</span></span></span><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">5</span><span class="mpunct">,</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">4</span><span class="mpunct">,</span></span></span><span style="top:-0.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span></span></span><span style="top:0.59em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mord">3</span><span class="mpunct">,</span></span></span><span style="top:2.09em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mord">3.</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.75em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>One solution to this problem is <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>3</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>4</mn></msub><mo fence="true">)</mo></mrow><mo>=</mo><mo stretchy="false">(</mo><mo>−</mo><mn>5</mn><mo separator="true">,</mo><mo>−</mo><mn>3</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mo>−</mo><mn>4</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\left(x_0,x_1,x_2,x_3,x_4\right)=(-5,-3,0,-1,-4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">−</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">−</span><span class="mord">4</span><span class="mclose">)</span></span></span></span>, which you can verify directly by checking each inequality. Note that a system of difference constraints usually have infinitely many solutions, but some systems may have no solutions at all. The following is a system with <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span> variables and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span> constraints that have no solutions:</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>x</mi><mn>0</mn></msub><mo>−</mo><msub><mi>x</mi><mn>1</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>⩽</mo><mo>−</mo><mn>1</mn><mo separator="true">,</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>−</mo><msub><mi>x</mi><mn>2</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>⩽</mo><mo>−</mo><mn>1</mn><mo separator="true">,</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>x</mi><mn>2</mn></msub><mo>−</mo><msub><mi>x</mi><mn>0</mn></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>⩽</mo><mo>−</mo><mn>1.</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}  x_0-x_1&amp;\leqslant -1,\\  x_1-x_2&amp;\leqslant -1,\\  x_2-x_0&amp;\leqslant -1.\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.5em;vertical-align:-2em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span></span></span><span style="top:-1.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mord">1.</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>A system of difference constraints can be modeled as a graph, and then solved by solving a single-source shortest-path problem on the graph. <strong>Read Section 24.4 of <em>Introduction to Algorithms, Third Edition</em></strong> which is available in Piazza Resources.</p><p>The difference constraints problem that you need to solve will be presented as the class <code>Problem</code> in <code>problem.hpp</code>. Read through the code in <code>problem.hpp</code> and understand the structure of that class. Note that we have implemented some useful functions for you, such as <code>hasNegativeConstant()</code>, <code>getNumVars()</code> and <code>getConstraints()</code>.</p><p>Your task is to implement the <code>solve</code> function in <code>main.cpp</code>, which has the signature</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::optional&lt;Problem::Solution&gt; <span class="title">solve</span><span class="params">(<span class="type">const</span> Problem &amp;problem)</span></span>;</span><br></pre></td></tr></table></figure><p>It solves the given difference constraints problem <code>problem</code>, and returns the solution to it or <code>std::nullopt</code> if it has none. A solution is of type <code>Problem::Solution</code> i.e. <code>std::vector&lt;Problem::Value&gt;</code> in which the element indexed <code>i</code> is the value assigned to the variable <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.</p><p>For testcase 1~5, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">c_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> may be negative, and your algorithm should run within <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mi>n</mi><mi>m</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\left(n^2+nm\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2em;vertical-align:-0.35em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">nm</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span> time. For testcase 6~10, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">c_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> are non-negative, and your algorithm should run within <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>m</mi><mo stretchy="false">)</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O((n+m)\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">((</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> time.</p><h2 id="Compile-and-run">Compile and run</h2><h3 id="Basic-knowledge">Basic knowledge</h3><p>Read <a href="/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/2024/01/25/CS101/Compile-Basics/" title="Compile Basics">Compile Basics</a> if you need.</p><h3 id="Compile-multiple-files">Compile multiple files</h3><p>The functions <code>Graph::dijkstra</code> and <code>Graph::bellmanFord</code> are defined in <code>graph.cpp</code>. Therefore, every time you compile a program that calls those functions, <code>graph.cpp</code> should be compiled and linked as well. You will see an error like</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ld: /tmp/ccxICQ7U.o: in function `main&#x27;:</span><br><span class="line">graph_example.cpp:(.text+0x15e): undefined reference to `Graph::dijkstra(unsigned long) const&#x27;</span><br><span class="line">collect2: error: ld returned 1 exit status</span><br></pre></td></tr></table></figure><p>if you did not link them correctly. The simplest way is to also pass the path to <code>graph.cpp</code> as an argument to the compiler. For example, to compile <code>solve.cpp</code>, <code>cd</code> to the directory <code>attachments</code> first, and then</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ solve.cpp graph.cpp -o solve -std=c++20</span><br></pre></td></tr></table></figure><p>To compile <code>examples/graph_example.cpp</code>: If the current working directory is <code>attachments</code>,</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ examples/graph_example.cpp graph.cpp -o examples/graph_example -std=c++20</span><br></pre></td></tr></table></figure><p>This will generate an executable named <code>graph_example</code> (<code>graph_example.exe</code> on Windows) in the directory <code>attachments/examples</code>. If the current working directory is <code>attachments/examples</code>,</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ graph_example.cpp ../graph.cpp -o graph_example -std=c++20</span><br></pre></td></tr></table></figure><p>will do the same thing.</p><blockquote><p>It is so annoying to enter such a long command every time! You can press <code>↑</code> to obtain your command history.</p></blockquote><h3 id="VSCode-configurations">VSCode configurations</h3><p>Read <a href="VSCodeConfig.md">VSCodeConfig.md</a> if you need.</p><h2 id="Submission">Submission</h2><p>Create a zip file <code>submission.zip</code> containing <code>graph.cpp</code> and <code>solve.cpp</code>, and then submit <code>submission.zip</code> to the OJ. You can <code>cd</code> to <code>attachments</code>, and then run the following command to create it:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip -r submission.zip graph.cpp solve.cpp</span><br></pre></td></tr></table></figure><p>Note that the files <code>graph.cpp</code> and <code>solve.cpp</code> should be placed directly in the zip file.</p><h1 id="评分">评分</h1><p>评分由 OJ 分数（60%）和线下 check （40%）两部分构成。线下 check 会在此次作业结束时间之后进行。</p><p>注：线下 check 也带有检查学术诚信的含义，当然这不是唯一的手段。如果被认定为抄袭， OJ 的分数也会作废，并且会有惩罚。<strong>特别强调，抄袭来自 generative AI 的代码和抄袭网上的代码是同等处理的，我们建议您在写作业时关闭一切generative AI 工具。</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;注意：本学期 CS101 PA 的所有 C++ 代码都采用 C++20 标准。如果您使用 GCC 或 Clang，您需要在编译时设置 &lt;code&gt;-std=c++20&lt;/code&gt; 。&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://zivmax.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机科学" scheme="https://zivmax.top/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
    <category term="CS110" scheme="https://zivmax.top/tags/CS110/"/>
    
    <category term="算法" scheme="https://zivmax.top/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="作业" scheme="https://zivmax.top/tags/%E4%BD%9C%E4%B8%9A/"/>
    
    <category term="上科大" scheme="https://zivmax.top/tags/%E4%B8%8A%E7%A7%91%E5%A4%A7/"/>
    
  </entry>
  
</feed>
